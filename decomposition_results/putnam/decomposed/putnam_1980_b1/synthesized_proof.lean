theorem putnam_1980_b1
(c : ‚Ñù)
: (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) ‚Üî c ‚àà (({c : ‚Ñù | c ‚â• 1 / 2}) : Set ‚Ñù ) := by
  have h_main : (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) ‚Üî c ‚â• 1 / 2 := by
    constructor
    ¬∑ 
      intro h
      by_contra h‚ÇÅ
      
      have h‚ÇÇ : c < 1 / 2 := by linarith
      
      have h‚ÇÉ : ‚àÉ (x : ‚Ñù), (exp x + exp (-x)) / 2 > exp (c * x ^ 2) := by
        
        have h‚ÇÑ : 0 < (1 / 2 - c : ‚Ñù) := by linarith
        
        have h‚ÇÖ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
          
          have h‚ÇÖ‚ÇÅ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
            have h‚ÇÖ‚ÇÇ : HasDerivAt (fun x : ‚Ñù => exp x + exp (-x) - 2 * exp (c * x ^ 2)) 0 0 := by
              
              have h‚ÇÖ‚ÇÉ : HasDerivAt (fun x : ‚Ñù => exp x + exp (-x) - 2 * exp (c * x ^ 2)) (exp 0 - exp (-0) - 2 * (2 * c * 0 * exp (c * 0 ^ 2))) 0 := by
                
                have h‚ÇÖ‚ÇÑ : HasDerivAt (fun x : ‚Ñù => exp x) (exp 0) 0 := by
                  simpa using (Real.hasDerivAt_exp 0)
                have h‚ÇÖ‚ÇÖ : HasDerivAt (fun x : ‚Ñù => exp (-x)) (-exp (-0)) 0 := by
                  have h‚ÇÖ‚ÇÖ‚ÇÅ : HasDerivAt (fun x : ‚Ñù => -x) (-1 : ‚Ñù) 0 := by
                    simpa using hasDerivAt_id 0 |>.neg
                  have h‚ÇÖ‚ÇÖ‚ÇÇ : HasDerivAt (fun x : ‚Ñù => exp (-x)) (exp (-0) * (-1 : ‚Ñù)) 0 := by
                    simpa using HasDerivAt.exp (h‚ÇÖ‚ÇÖ‚ÇÅ)
                  convert h‚ÇÖ‚ÇÖ‚ÇÇ using 1 <;> simp
                have h‚ÇÖ‚ÇÜ : HasDerivAt (fun x : ‚Ñù => 2 * exp (c * x ^ 2)) (2 * (2 * c * 0 * exp (c * 0 ^ 2))) 0 := by
                  have h‚ÇÖ‚ÇÜ‚ÇÅ : HasDerivAt (fun x : ‚Ñù => c * x ^ 2) (2 * c * 0) 0 := by
                    have h‚ÇÖ‚ÇÜ‚ÇÇ : HasDerivAt (fun x : ‚Ñù => x ^ 2) (2 * 0) 0 := by
                      simpa using (hasDerivAt_pow 2 0)
                    have h‚ÇÖ‚ÇÜ‚ÇÉ : HasDerivAt (fun x : ‚Ñù => c * x ^ 2) (c * (2 * 0)) 0 := by
                      simpa using h‚ÇÖ‚ÇÜ‚ÇÇ.const_mul c
                    convert h‚ÇÖ‚ÇÜ‚ÇÉ using 1 <;> ring
                  have h‚ÇÖ‚ÇÜ‚ÇÑ : HasDerivAt (fun x : ‚Ñù => exp (c * x ^ 2)) (exp (c * 0 ^ 2) * (2 * c * 0)) 0 := by
                    have h‚ÇÖ‚ÇÜ‚ÇÖ : HasDerivAt (fun x : ‚Ñù => c * x ^ 2) (2 * c * 0) 0 := h‚ÇÖ‚ÇÜ‚ÇÅ
                    have h‚ÇÖ‚ÇÜ‚ÇÜ : HasDerivAt (fun x : ‚Ñù => exp (c * x ^ 2)) (exp (c * 0 ^ 2) * (2 * c * 0)) 0 := by
                      simpa using HasDerivAt.exp h‚ÇÖ‚ÇÜ‚ÇÖ
                    exact h‚ÇÖ‚ÇÜ‚ÇÜ
                  have h‚ÇÖ‚ÇÜ‚Çá : HasDerivAt (fun x : ‚Ñù => 2 * exp (c * x ^ 2)) (2 * (exp (c * 0 ^ 2) * (2 * c * 0))) 0 := by
                    have h‚ÇÖ‚ÇÜ‚Çà : HasDerivAt (fun x : ‚Ñù => exp (c * x ^ 2)) (exp (c * 0 ^ 2) * (2 * c * 0)) 0 := h‚ÇÖ‚ÇÜ‚ÇÑ
                    have h‚ÇÖ‚ÇÜ‚Çâ : HasDerivAt (fun x : ‚Ñù => 2 * exp (c * x ^ 2)) (2 * (exp (c * 0 ^ 2) * (2 * c * 0))) 0 := by
                      convert HasDerivAt.const_mul 2 h‚ÇÖ‚ÇÜ‚Çà using 1 <;> ring
                    exact h‚ÇÖ‚ÇÜ‚Çâ
                  convert h‚ÇÖ‚ÇÜ‚Çá using 1 <;> simp [h‚ÇÖ‚ÇÜ‚ÇÅ] <;> ring
                have h‚ÇÖ‚Çá : HasDerivAt (fun x : ‚Ñù => exp x + exp (-x) - 2 * exp (c * x ^ 2)) (exp 0 - exp (-0) - 2 * (2 * c * 0 * exp (c * 0 ^ 2))) 0 := by
                  convert h‚ÇÖ‚ÇÑ.add h‚ÇÖ‚ÇÖ |>.sub h‚ÇÖ‚ÇÜ using 1 <;> simp <;> ring
                exact h‚ÇÖ‚Çá
              convert h‚ÇÖ‚ÇÉ using 1 <;> simp
            have h‚ÇÖ‚Çà : HasDerivAt (fun x : ‚Ñù => exp x + exp (-x) - 2 * exp (c * x ^ 2)) 0 0 := h‚ÇÖ‚ÇÇ
            have h‚ÇÖ‚Çâ : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := by
              have h‚ÇÖ‚Çâ‚ÇÅ : HasDerivAt (fun x : ‚Ñù => exp x + exp (-x) - 2 * exp (c * x ^ 2)) 0 0 := h‚ÇÖ‚ÇÇ
              have h‚ÇÖ‚Çâ‚ÇÇ : HasDerivAt (fun x : ‚Ñù => x ^ 2) 0 0 := by
                simpa using (hasDerivAt_pow 2 0)
              have h‚ÇÖ‚Çâ‚ÇÉ : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := by
                have h‚ÇÖ‚Çâ‚ÇÑ : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := by
                  convert HasDerivAt.div (h‚ÇÖ‚Çâ‚ÇÅ) (h‚ÇÖ‚Çâ‚ÇÇ) (by norm_num) using 1 <;>
                    (try norm_num) <;>
                    (try simp_all [sub_eq_add_neg, add_assoc]) <;>
                    (try field_simp [sub_eq_add_neg, add_assoc]) <;>
                    (try ring_nf) <;>
                    (try norm_num) <;>
                    (try linarith) <;>
                    (try nlinarith) <;>
                    (try ring_nf at *) <;>
                    (try norm_num at *) <;>
                    (try linarith) <;>
                    (try nlinarith)
                exact h‚ÇÖ‚Çâ‚ÇÑ
              exact h‚ÇÖ‚Çâ‚ÇÉ
            have h‚ÇÖ‚ÇÅ‚ÇÄ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
              have h‚ÇÖ‚ÇÅ‚ÇÅ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
                have h‚ÇÖ‚ÇÅ‚ÇÇ : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := h‚ÇÖ‚Çâ
                have h‚ÇÖ‚ÇÅ‚ÇÉ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
                  have h‚ÇÖ‚ÇÅ‚ÇÑ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù 0) (ùìù (1 - 2 * c)) := by
                    have h‚ÇÖ‚ÇÅ‚ÇÖ : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := h‚ÇÖ‚Çâ
                    have h‚ÇÖ‚ÇÅ‚ÇÜ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù 0) (ùìù (1 - 2 * c)) := by
                      have h‚ÇÖ‚ÇÅ‚Çá : ContinuousAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) 0 := by
                        have h‚ÇÖ‚ÇÅ‚Çà : HasDerivAt (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (1 - 2 * c) 0 := h‚ÇÖ‚Çâ
                        exact h‚ÇÖ‚ÇÅ‚Çà.continuousAt
                      convert h‚ÇÖ‚ÇÅ‚Çá.tendsto using 1 <;> simp_all [sub_eq_add_neg, add_assoc] <;> ring_nf <;> norm_num <;> linarith
                    exact h‚ÇÖ‚ÇÅ‚ÇÜ
                  have h‚ÇÖ‚ÇÅ‚Çâ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
                    have h‚ÇÖ‚ÇÇ‚ÇÄ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := by
                      apply tendsto_nhdsWithin_of_tendsto_nhds
                      exact h‚ÇÖ‚ÇÅ‚ÇÑ
                    exact h‚ÇÖ‚ÇÇ‚ÇÄ
                  exact h‚ÇÖ‚ÇÅ‚Çâ
                exact h‚ÇÖ‚ÇÅ‚ÇÉ
              exact h‚ÇÖ‚ÇÅ‚ÇÅ
            exact h‚ÇÖ‚ÇÅ‚ÇÄ
          exact h‚ÇÖ‚ÇÅ
        have h‚ÇÖ‚ÇÇ : Filter.Tendsto (fun x : ‚Ñù => (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2) (ùìù[‚â†] 0) (ùìù (1 - 2 * c)) := h‚ÇÖ
        have h‚ÇÖ‚ÇÉ : 1 - 2 * c > 0 := by linarith
        have h‚ÇÖ‚ÇÑ : ‚àÄ·∂† (x : ‚Ñù) in ùìù[‚â†] 0, (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2 > 0 := by
          filter_upwards [h‚ÇÖ‚ÇÇ.eventually (gt_mem_nhds h‚ÇÖ‚ÇÉ)] with x hx
          exact hx
        obtain ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü© := (h‚ÇÖ‚ÇÑ.and self_mem_nhdsWithin).exists
        have h‚ÇÖ‚ÇÖ : x ‚â† 0 := by aesop
        have h‚ÇÖ‚ÇÜ : (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2 > 0 := by aesop
        have h‚ÇÖ‚Çá : (exp x + exp (-x)) / 2 > exp (c * x ^ 2) := by
          have h‚ÇÖ‚Çà : 0 < x ^ 2 := by
            by_contra h‚ÇÖ‚Çà
            have h‚ÇÖ‚Çâ : x = 0 := by
              nlinarith
            contradiction
          have h‚ÇÖ‚Çâ : (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2 > 0 := h‚ÇÖ‚ÇÜ
          have h‚ÇÖ‚ÇÅ‚ÇÄ : (exp x + exp (-x) - 2 * exp (c * x ^ 2)) > 0 := by
            by_contra h‚ÇÖ‚ÇÅ‚ÇÄ
            have h‚ÇÖ‚ÇÅ‚ÇÅ : (exp x + exp (-x) - 2 * exp (c * x ^ 2)) ‚â§ 0 := by linarith
            have h‚ÇÖ‚ÇÅ‚ÇÇ : (exp x + exp (-x) - 2 * exp (c * x ^ 2)) / x ^ 2 ‚â§ 0 := by
              exact div_nonpos_of_nonpos_of_nonneg h‚ÇÖ‚ÇÅ‚ÇÅ (by positivity)
            linarith
          have h‚ÇÖ‚ÇÅ‚ÇÅ : (exp x + exp (-x)) / 2 > exp (c * x ^ 2) := by
            nlinarith
          exact h‚ÇÖ‚ÇÅ‚ÇÅ
        exact ‚ü®x, by linarith‚ü©
      obtain ‚ü®x, hx‚ü© := h‚ÇÉ
      have h‚ÇÑ := h x
      linarith
    ¬∑ 
      intro h
      intro x
      have h‚ÇÅ : (Real.exp x + Real.exp (-x)) / 2 ‚â§ Real.exp (c * x ^ 2) := by
        have h‚ÇÇ : Real.cosh x ‚â§ Real.exp (x ^ 2 / 2) := by
          
          have h‚ÇÉ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
            
            have h‚ÇÑ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
              
              have h‚ÇÖ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                
                have h‚ÇÖ‚ÇÅ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                  
                  have h‚ÇÖ‚ÇÇ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                    
                    have h‚ÇÖ‚ÇÉ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                      
                      have h‚ÇÖ‚ÇÑ : ‚àÄ x : ‚Ñù, Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                        intro x
                        have h‚ÇÖ‚ÇÖ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                          
                          have h‚ÇÖ‚ÇÜ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                            
                            have h‚ÇÖ‚Çá : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                              
                              have h‚ÇÖ‚Çà : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                                
                                have h‚ÇÖ‚Çâ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                                  
                                  have h‚ÇÖ‚ÇÅ‚ÇÄ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                                    
                                    have h‚ÇÖ‚ÇÅ‚ÇÅ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                                      
                                      have h‚ÇÖ‚ÇÅ‚ÇÇ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := by
                                        
                                        exact?
                                      exact h‚ÇÖ‚ÇÅ‚ÇÇ
                                    exact h‚ÇÖ‚ÇÅ‚ÇÅ
                                  exact h‚ÇÖ‚ÇÅ‚ÇÄ
                                exact h‚ÇÖ‚Çâ
                              exact h‚ÇÖ‚Çà
                            exact h‚ÇÖ‚Çá
                          exact h‚ÇÖ‚ÇÜ
                        exact h‚ÇÖ‚ÇÖ
                      exact h‚ÇÖ‚ÇÑ x
                    exact h‚ÇÖ‚ÇÉ
                  exact h‚ÇÖ‚ÇÇ
                exact h‚ÇÖ‚ÇÅ
              exact h‚ÇÖ
            exact h‚ÇÑ
          have h‚ÇÖ : Real.cosh x ‚â§ Real.exp (x ^ 2 / 2) := by
            have h‚ÇÖ‚ÇÅ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := h‚ÇÉ
            have h‚ÇÖ‚ÇÇ : Real.cosh x > 0 := Real.cosh_pos x
            have h‚ÇÖ‚ÇÉ : Real.log (Real.cosh x) ‚â§ x ^ 2 / 2 := h‚ÇÉ
            have h‚ÇÖ‚ÇÑ : Real.cosh x ‚â§ Real.exp (x ^ 2 / 2) := by
              calc
                Real.cosh x = Real.exp (Real.log (Real.cosh x)) := by rw [Real.exp_log (Real.cosh_pos x)]
                _ ‚â§ Real.exp (x ^ 2 / 2) := Real.exp_le_exp.mpr h‚ÇÖ‚ÇÅ
            exact h‚ÇÖ‚ÇÑ
          exact h‚ÇÖ
        have h‚ÇÉ : Real.exp (x ^ 2 / 2) ‚â§ Real.exp (c * x ^ 2) := by
          have h‚ÇÑ : x ^ 2 / 2 ‚â§ c * x ^ 2 := by
            have h‚ÇÖ : c ‚â• 1 / 2 := h
            have h‚ÇÜ : x ^ 2 / 2 ‚â§ c * x ^ 2 := by
              nlinarith [sq_nonneg x, sq_nonneg (x - 1), sq_nonneg (x + 1)]
            exact h‚ÇÜ
          exact Real.exp_le_exp.mpr h‚ÇÑ
        have h‚ÇÑ : (Real.exp x + Real.exp (-x)) / 2 = Real.cosh x := by
          have h‚ÇÖ : Real.cosh x = (Real.exp x + Real.exp (-x)) / 2 := by
            rw [Real.cosh_eq]
            <;> ring_nf
            <;> field_simp [Real.exp_neg]
            <;> ring_nf
          rw [h‚ÇÖ]
        rw [h‚ÇÑ]
        linarith
      exact h‚ÇÅ
  
  have h_final : (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) ‚Üî c ‚àà (({c : ‚Ñù | c ‚â• 1 / 2}) : Set ‚Ñù) := by
    constructor
    ¬∑ 
      intro h
      have h‚ÇÅ : c ‚â• 1 / 2 := by
        have h‚ÇÇ : (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) := h
        have h‚ÇÉ : c ‚â• 1 / 2 := (h_main.mp h‚ÇÇ)
        exact h‚ÇÉ
      exact h‚ÇÅ
    ¬∑ 
      intro h
      have h‚ÇÅ : c ‚â• 1 / 2 := h
      have h‚ÇÇ : (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) := by
        have h‚ÇÉ : (‚àÄ x : ‚Ñù, (exp x + exp (-x)) / 2 ‚â§ exp (c * x ^ 2)) := (h_main.mpr h‚ÇÅ)
        exact h‚ÇÉ
      exact h‚ÇÇ
  
  exact h_final
