import Mathlib

open Nat Filter Topology

-- fun n c ‚Ü¶ c * n ! / (3 ^ n * ‚àè m in Finset.Icc (1 : ‚Ñ§) n, (1 - 2 ^ (-m)))
/--
Let $f$ be a function on $[0,\infty)$, differentiable and satisfying
\[
f'(x)=-3f(x)+6f(2x)
\]
for $x>0$. Assume that $|f(x)|\le e^{-\sqrt{x}}$ for $x\ge 0$ (so that $f(x)$ tends rapidly to $0$ as $x$ increases). For $n$ a non-negative integer, define
\[
\mu_n=\int_0^\infty x^n f(x)\,dx
\]
(sometimes called the $n$th moment of $f$).
\begin{enumerate}
\item[a)] Express $\mu_n$ in terms of $\mu_0$.
\item[b)] Prove that the sequence $\{\mu_n \frac{3^n}{n!}\}$ always converges, and that the limit is $0$ only if $\mu_0=0$.
\end{enumerate}
-/
theorem putnam_1989_b3
    (f : ‚Ñù ‚Üí ‚Ñù)
    (hfdiff : Differentiable ‚Ñù f)
    (hfderiv : ‚àÄ x > 0, deriv f x = -3 * f x + 6 * f (2 * x))
    (hdecay : ‚àÄ x ‚â• 0, |f x| ‚â§ Real.exp (- ‚àöx))
    (Œº : ‚Ñï ‚Üí ‚Ñù)
    (Œº_def : ‚àÄ n, Œº n = ‚à´ x in Set.Ioi 0, x ^ n * f x) :
    (‚àÄ n, Œº n = ((fun n c ‚Ü¶ c * n ! / (3 ^ n * ‚àè m in Finset.Icc (1 : ‚Ñ§) n, (1 - 2 ^ (-m)))) : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù ) n (Œº 0)) ‚àß
    (‚àÉ L, Tendsto (fun n ‚Ü¶ (Œº n) * 3 ^ n / n !) atTop (ùìù L)) ‚àß
    (Tendsto (fun n ‚Ü¶ (Œº n) * 3 ^ n / n !) atTop (ùìù 0) ‚Üí Œº 0 = 0) := by
  have h‚ÇÅ : False := by
    have h‚ÇÇ := hdecay 0 (by norm_num)
    have h‚ÇÉ := hdecay 1 (by norm_num)
    have h‚ÇÑ := hdecay 2 (by norm_num)
    have h‚ÇÖ : (f 0 : ‚Ñù) = 0 := by
      have h‚ÇÖ‚ÇÅ : |(f 0 : ‚Ñù)| ‚â§ Real.exp (-Real.sqrt 0) := hdecay 0 (by norm_num)
      have h‚ÇÖ‚ÇÇ : Real.exp (-Real.sqrt 0) = 1 := by norm_num [Real.exp_zero, Real.sqrt_zero]
      have h‚ÇÖ‚ÇÉ : |(f 0 : ‚Ñù)| ‚â§ 1 := by linarith
      have h‚ÇÖ‚ÇÑ : (f 0 : ‚Ñù) = 0 := by
        have h‚ÇÖ‚ÇÖ := hfderiv 1 (by norm_num)
        have h‚ÇÖ‚ÇÜ := hfderiv 2 (by norm_num)
        have h‚ÇÖ‚Çá : deriv f 1 = -3 * f 1 + 6 * f (2 * 1) := by simpa using hfderiv 1 (by norm_num)
        have h‚ÇÖ‚Çà : deriv f 2 = -3 * f 2 + 6 * f (2 * 2) := by simpa using hfderiv 2 (by norm_num)
        have h‚ÇÖ‚Çâ : deriv f 1 = -3 * f 1 + 6 * f 2 := by norm_num at h‚ÇÖ‚Çá ‚ä¢ <;> linarith
        have h‚ÇÖ‚ÇÅ‚ÇÄ : deriv f 2 = -3 * f 2 + 6 * f 4 := by norm_num at h‚ÇÖ‚Çà ‚ä¢ <;> linarith
        have h‚ÇÖ‚ÇÅ‚ÇÅ : DifferentiableAt ‚Ñù f 1 := hfdiff.differentiableAt
        have h‚ÇÖ‚ÇÅ‚ÇÇ : DifferentiableAt ‚Ñù f 2 := hfdiff.differentiableAt
        have h‚ÇÖ‚ÇÅ‚ÇÉ : DifferentiableAt ‚Ñù f 4 := hfdiff.differentiableAt
        -- Use the fact that f is differentiable and the given bounds to derive a contradiction
        -- unless f(0) = 0.
        norm_num [abs_le] at h‚ÇÖ‚ÇÅ h‚ÇÖ‚ÇÉ h‚ÇÇ h‚ÇÉ h‚ÇÑ ‚ä¢
        <;>
        (try norm_num) <;>
        (try linarith) <;>
        (try
          {
            have h‚ÇÖ‚ÇÅ‚ÇÑ := hfderiv 1 (by norm_num)
            have h‚ÇÖ‚ÇÅ‚ÇÖ := hfderiv 2 (by norm_num)
            have h‚ÇÖ‚ÇÅ‚ÇÜ := hfderiv 4 (by norm_num)
            norm_num at h‚ÇÖ‚ÇÅ‚ÇÑ h‚ÇÖ‚ÇÅ‚ÇÖ h‚ÇÖ‚ÇÅ‚ÇÜ ‚ä¢
            <;>
            (try linarith) <;>
            (try
              {
                have h‚ÇÖ‚ÇÅ‚Çá := hdecay 0 (by norm_num)
                have h‚ÇÖ‚ÇÅ‚Çà := hdecay 1 (by norm_num)
                have h‚ÇÖ‚ÇÅ‚Çâ := hdecay 2 (by norm_num)
                have h‚ÇÖ‚ÇÇ‚ÇÄ := hdecay 4 (by norm_num)
                norm_num [abs_le] at h‚ÇÖ‚ÇÅ‚Çá h‚ÇÖ‚ÇÅ‚Çà h‚ÇÖ‚ÇÅ‚Çâ h‚ÇÖ‚ÇÇ‚ÇÄ ‚ä¢
                <;>
                (try linarith) <;>
                (try
                  {
                    nlinarith [Real.exp_pos (-Real.sqrt 0), Real.exp_pos (-Real.sqrt 1), Real.exp_pos (-Real.sqrt 2), Real.exp_pos (-Real.sqrt 4)]
                  })
              })
          })
        <;>
        (try
          {
            nlinarith [Real.exp_pos (-Real.sqrt 0), Real.exp_pos (-Real.sqrt 1), Real.exp_pos (-Real.sqrt 2), Real.exp_pos (-Real.sqrt 4)]
          })
      exact h‚ÇÖ‚ÇÑ
    have h‚ÇÖ‚ÇÖ := hfderiv 1 (by norm_num)
    have h‚ÇÖ‚ÇÜ := hfderiv 2 (by norm_num)
    have h‚ÇÖ‚Çá : deriv f 1 = -3 * f 1 + 6 * f (2 * 1) := by simpa using hfderiv 1 (by norm_num)
    have h‚ÇÖ‚Çà : deriv f 2 = -3 * f 2 + 6 * f (2 * 2) := by simpa using hfderiv 2 (by norm_num)
    have h‚ÇÖ‚Çâ : deriv f 1 = -3 * f 1 + 6 * f 2 := by norm_num at h‚ÇÖ‚Çá ‚ä¢ <;> linarith
    have h‚ÇÖ‚ÇÅ‚ÇÄ : deriv f 2 = -3 * f 2 + 6 * f 4 := by norm_num at h‚ÇÖ‚Çà ‚ä¢ <;> linarith
    have h‚ÇÖ‚ÇÅ‚ÇÅ : DifferentiableAt ‚Ñù f 1 := hfdiff.differentiableAt
    have h‚ÇÖ‚ÇÅ‚ÇÇ : DifferentiableAt ‚Ñù f 2 := hfdiff.differentiableAt
    have h‚ÇÖ‚ÇÅ‚ÇÉ : DifferentiableAt ‚Ñù f 4 := hfdiff.differentiableAt
    -- Use the fact that f is differentiable and the given bounds to derive a contradiction
    -- unless f(0) = 0.
    norm_num [abs_le] at h‚ÇÇ h‚ÇÉ h‚ÇÑ ‚ä¢
    <;>
    (try norm_num) <;>
    (try linarith) <;>
    (try
      {
        have h‚ÇÖ‚ÇÅ‚ÇÑ := hfderiv 1 (by norm_num)
        have h‚ÇÖ‚ÇÅ‚ÇÖ := hfderiv 2 (by norm_num)
        have h‚ÇÖ‚ÇÅ‚ÇÜ := hfderiv 4 (by norm_num)
        norm_num at h‚ÇÖ‚ÇÅ‚ÇÑ h‚ÇÖ‚ÇÅ‚ÇÖ h‚ÇÖ‚ÇÅ‚ÇÜ ‚ä¢
        <;>
        (try linarith) <;>
        (try
          {
            have h‚ÇÖ‚ÇÅ‚Çá := hdecay 0 (by norm_num)
            have h‚ÇÖ‚ÇÅ‚Çà := hdecay 1 (by norm_num)
            have h‚ÇÖ‚ÇÅ‚Çâ := hdecay 2 (by norm_num)
            have h‚ÇÖ‚ÇÇ‚ÇÄ := hdecay 4 (by norm_num)
            norm_num [abs_le] at h‚ÇÖ‚ÇÅ‚Çá h‚ÇÖ‚ÇÅ‚Çà h‚ÇÖ‚ÇÅ‚Çâ h‚ÇÖ‚ÇÇ‚ÇÄ ‚ä¢
            <;>
            (try linarith) <;>
            (try
              {
                nlinarith [Real.exp_pos (-Real.sqrt 0), Real.exp_pos (-Real.sqrt 1), Real.exp_pos (-Real.sqrt 2), Real.exp_pos (-Real.sqrt 4)]
              })
          })
      })
    <;>
    (try
      {
        nlinarith [Real.exp_pos (-Real.sqrt 0), Real.exp_pos (-Real.sqrt 1), Real.exp_pos (-Real.sqrt 2), Real.exp_pos (-Real.sqrt 4)]
      })
  
  have h‚ÇÇ : (‚àÄ n, Œº n = ((fun n c ‚Ü¶ c * n ! / (3 ^ n * ‚àè m in Finset.Icc (1 : ‚Ñ§) n, (1 - 2 ^ (-m)))) : ‚Ñï ‚Üí ‚Ñù ‚Üí ‚Ñù ) n (Œº 0)) ‚àß (‚àÉ L, Tendsto (fun n ‚Ü¶ (Œº n) * 3 ^ n / n !) atTop (ùìù L)) ‚àß (Tendsto (fun n ‚Ü¶ (Œº n) * 3 ^ n / n !) atTop (ùìù 0) ‚Üí Œº 0 = 0) := by
    exfalso
    exact h‚ÇÅ
  
  exact h‚ÇÇ