theorem h‚ÇÉ (h_main :  ‚àÄ (n : ‚Ñï),    ‚àë k ‚àà Finset.Icc 1 n, 6 ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k)) =      2 - 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) (h‚ÇÇ : ‚àÄ (n : ‚Ñï), 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) = 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) : sorry :=
  by
  have h‚ÇÑ : ‚àÄ n : ‚Ñï, (n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ n ‚â• 2 ^ n + 1) := by sorry
  have h‚ÇÖ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ n - 2 ^ n ‚â• 1 :=
    by
    intro n hn
    have h‚ÇÜ : (3 : ‚Ñö) ^ n ‚â• 2 ^ n + 1 := h‚ÇÑ n hn
    linarith
  have h‚ÇÜ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) ‚â• 1 := by sorry
  have h‚Çá : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) ‚â• 1 := by sorry
  have h‚Çà : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) := by sorry
  have h‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) := by sorry
  have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := by sorry
  have h‚ÇÖ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ n - 2 ^ n ‚â• 1 := by sorry
have h‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
  by
  have h‚ÇÑ : ‚àÄ n : ‚Ñï, (n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ n ‚â• 2 ^ n + 1) := by sorry
  have h‚ÇÖ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ n - 2 ^ n ‚â• 1 :=
    by
    intro n hn
    have h‚ÇÜ : (3 : ‚Ñö) ^ n ‚â• 2 ^ n + 1 := h‚ÇÑ n hn
    linarith
  have h‚ÇÜ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) ‚â• 1 :=
    by
    intro n hn
    have h‚Çá : (3 : ‚Ñö) ^ (n + 1) ‚â• 2 ^ (n + 1) + 1 :=
      by
      have h‚Çà : (3 : ‚Ñö) ^ (n + 1) ‚â• 2 ^ (n + 1) + 1 :=
        by
        have h‚Çâ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ (n + 1) ‚â• 2 ^ (n + 1) + 1 :=
          by
          intro n hn
          induction' hn with n hn IH
          ¬∑ norm_num
          ¬∑
            cases n with
            | zero => norm_num at hn ‚ä¢
            | succ n =>
              simp_all [pow_succ] <;>
                nlinarith [pow_pos (by norm_num : (0 : ‚Ñö) < 2) n, pow_pos (by norm_num : (0 : ‚Ñö) < 3) n]
        exact h‚Çâ n hn
      exact h‚Çà
    linarith
  have h‚Çá : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) ‚â• 1 :=
    by
    intro n hn
    exact h‚ÇÜ n hn
  have h‚Çà : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) :=
    by
    intro n hn
    have h‚Çâ : (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) ‚â• 1 := h‚Çá n hn
    have h‚ÇÅ‚ÇÄ : (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) :=
      by
      have h‚ÇÅ‚ÇÅ : (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) > 0 := by linarith
      have h‚ÇÅ‚ÇÇ : (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) :=
        by
        rw [div_le_iff (by positivity)]
        nlinarith [pow_pos (by norm_num : (0 : ‚Ñö) < 2) (n + 1), pow_pos (by norm_num : (0 : ‚Ñö) < 3) (n + 1)]
      exact h‚ÇÅ‚ÇÇ
    exact h‚ÇÅ‚ÇÄ
  have h‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) :=
    by
    have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) :=
      by
      have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) :=
        by
        have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) :=
          by
          have h‚ÇÅ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) := by
            simpa [div_eq_mul_inv] using tendsto_pow_atTop_nhds_0_of_lt_1 (by norm_num) (by norm_num)
          exact h‚ÇÅ‚ÇÉ
        exact h‚ÇÅ‚ÇÇ
      exact h‚ÇÅ‚ÇÅ
    exact h‚ÇÅ‚ÇÄ
  have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
    by
    have h‚ÇÅ‚ÇÅ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) :=
      by
      intro n hn
      exact h‚Çà n hn
    have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
      by
      have h‚ÇÅ‚ÇÉ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 :=
        by
        intro n hn
        have h‚ÇÅ‚ÇÑ : (3 : ‚Ñö) ^ (n + 1) - 2 ^ (n + 1) > 0 :=
          by
          have h‚ÇÅ‚ÇÖ : (3 : ‚Ñö) ^ (n + 1) > 2 ^ (n + 1) :=
            by
            have h‚ÇÅ‚ÇÜ : (3 : ‚Ñö) ^ (n + 1) > 2 ^ (n + 1) := by
              calc
                (3 : ‚Ñö) ^ (n + 1) > 2 ^ (n + 1) := by exact pow_lt_pow_of_lt_left (by norm_num) (by norm_num) (by omega)
                _ = 2 ^ (n + 1) := by rfl
            exact h‚ÇÅ‚ÇÜ
          linarith
        have h‚ÇÅ‚ÇÖ : (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := by positivity
        exact h‚ÇÅ‚ÇÖ
      have h‚ÇÅ‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
        by
        have h‚ÇÅ‚ÇÖ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) := h‚Çâ
        have h‚ÇÅ‚ÇÜ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
          by
          have h‚ÇÅ‚Çá : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) := h‚ÇÅ‚ÇÅ
          have h‚ÇÅ‚Çà : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := h‚ÇÅ‚ÇÉ
          have h‚ÇÅ‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
            by
            have h‚ÇÇ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
              by
              have h‚ÇÇ‚ÇÅ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) := h‚ÇÅ‚ÇÅ
              have h‚ÇÇ‚ÇÇ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := h‚ÇÅ‚ÇÉ
              have h‚ÇÇ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
                by
                have h‚ÇÇ‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) := h‚Çâ
                have h‚ÇÇ‚ÇÖ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
                  by
                  have h‚ÇÇ‚ÇÜ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) := h‚ÇÅ‚ÇÅ
                  have h‚ÇÇ‚Çá : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := h‚ÇÅ‚ÇÉ
                  have h‚ÇÇ‚Çà : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
                    by
                    have h‚ÇÇ‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1)) atTop (ùìù 0) := h‚Çâ
                    have h‚ÇÉ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
                      by
                      have h‚ÇÉ‚ÇÅ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) :=
                        h‚ÇÅ‚ÇÅ
                      have h‚ÇÉ‚ÇÇ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := h‚ÇÅ‚ÇÉ
                      have h‚ÇÉ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := by
                        exact
                          tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds h‚ÇÇ‚ÇÑ
                            (eventually_of_forall fun n => by
                              cases n with
                              | zero => norm_num
                              | succ n =>
                                exact
                                  by
                                  have h‚ÇÉ‚ÇÑ : (2 : ‚Ñö) ^ (n.succ + 1) / (3 ^ (n.succ + 1) - 2 ^ (n.succ + 1)) ‚â• 0 := by
                                    exact h‚ÇÅ‚ÇÉ (n.succ) (by simp)
                                  linarith [h‚ÇÉ‚ÇÑ, h‚ÇÅ‚ÇÅ (n.succ) (by simp)])
                            (eventually_of_forall fun n => by
                              cases n with
                              | zero => norm_num
                              | succ n =>
                                exact
                                  by
                                  have h‚ÇÉ‚ÇÑ :
                                    (2 : ‚Ñö) ^ (n.succ + 1) / (3 ^ (n.succ + 1) - 2 ^ (n.succ + 1)) ‚â§
                                      (2 : ‚Ñö) ^ (n.succ + 1) :=
                                    by exact h‚ÇÅ‚ÇÅ (n.succ) (by simp)
                                  linarith [h‚ÇÉ‚ÇÑ, h‚ÇÅ‚ÇÉ (n.succ) (by simp)])
                      exact h‚ÇÉ‚ÇÉ
                    exact h‚ÇÉ‚ÇÄ
                  exact h‚ÇÇ‚Çà
                exact h‚ÇÇ‚ÇÖ
              exact h‚ÇÇ‚ÇÉ
            exact h‚ÇÇ‚ÇÄ
          exact h‚ÇÅ‚Çâ
        exact h‚ÇÅ‚ÇÜ
      exact h‚ÇÅ‚ÇÑ
    exact h‚ÇÅ‚ÇÇ
  exact h‚ÇÅ‚ÇÄ