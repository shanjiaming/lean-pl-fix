theorem h‚ÇÇ‚ÇÄ (h_main :  ‚àÄ (n : ‚Ñï),    ‚àë k ‚àà Finset.Icc 1 n, 6 ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k)) =      2 - 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) (h‚ÇÇ : ‚àÄ (n : ‚Ñï), 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) = 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) (h‚ÇÑ : ‚àÄ n ‚â• 1, 3 ^ n ‚â• 2 ^ n + 1) (h‚ÇÖ : ‚àÄ n ‚â• 1, 3 ^ n - 2 ^ n ‚â• 1) (h‚ÇÜ h‚Çá : ‚àÄ n ‚â• 1, 3 ^ (n + 1) - 2 ^ (n + 1) ‚â• 1) (h‚Çà : ‚àÄ n ‚â• 1, 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ 2 ^ (n + 1)) (h‚Çâ : sorry) (h‚ÇÅ‚ÇÅ : ‚àÄ n ‚â• 1, 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ 2 ^ (n + 1)) (h‚ÇÅ‚ÇÉ : ‚àÄ n ‚â• 1, 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0) (h‚ÇÅ‚ÇÖ : sorry) (h‚ÇÅ‚Çá : ‚àÄ n ‚â• 1, 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ 2 ^ (n + 1)) (h‚ÇÅ‚Çà : ‚àÄ n ‚â• 1, 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0) : sorry :=
  by
  have h‚ÇÇ‚ÇÅ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â§ (2 : ‚Ñö) ^ (n + 1) := h‚ÇÅ‚ÇÅ
  have h‚ÇÇ‚ÇÇ : ‚àÄ n : ‚Ñï, n ‚â• 1 ‚Üí (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) ‚â• 0 := h‚ÇÅ‚ÇÉ
  have h‚ÇÇ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := by sorry
  exact h‚ÇÇ‚ÇÉ