theorem h_sum_eq_two (h_main :  ‚àÄ (n : ‚Ñï),    ‚àë k ‚àà Finset.Icc 1 n, 6 ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k)) =      2 - 2 ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) (h_tendsto : sorry) : ‚àë' (k : (‚Üë(Set.Ici 1) : Type)),
      6 ^ (‚Üëk : ‚Ñï) / ((3 ^ ((‚Üëk : ‚Ñï) + 1) - 2 ^ ((‚Üëk : ‚Ñï) + 1)) * (3 ^ (‚Üëk : ‚Ñï) - 2 ^ (‚Üëk : ‚Ñï))) =
    2 :=
  by
  have h‚ÇÅ :
    ‚àë' k : Set.Ici 1, (6 ^ (k : ‚Ñï) / ((3 ^ ((k : ‚Ñï) + 1) - 2 ^ ((k : ‚Ñï) + 1)) * (3 ^ (k : ‚Ñï) - 2 ^ (k : ‚Ñï)))) =
      ‚àë' n : ‚Ñï,
        (6 ^ (n + 1 : ‚Ñï) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï)))) := by sorry
  rw [h‚ÇÅ]
  have h‚ÇÇ :
    ‚àë' n : ‚Ñï,
        (6 ^ (n + 1 : ‚Ñï) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))) :
          ‚Ñö) =
      2 :=
    by
    have h‚ÇÉ :
      ‚àÄ n : ‚Ñï,
        (‚àë k in Finset.Icc 1 n, (6 : ‚Ñö) ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k))) =
          2 - (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) :=
      h_main
    have h‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := h_tendsto
    have h‚ÇÖ :
      HasSum
        (fun n : ‚Ñï ‚Ü¶
          (6 : ‚Ñö) ^ (n + 1) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
        2 :=
      by
      have h‚ÇÜ :
        ‚àÄ n : ‚Ñï,
          (‚àë k in Finset.Icc 1 n, (6 : ‚Ñö) ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k))) =
            2 - (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) :=
        h_main
      have h‚Çá : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := h_tendsto
      have h‚Çà :
        HasSum
          (fun n : ‚Ñï ‚Ü¶
            (6 : ‚Ñö) ^ (n + 1) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
          2 :=
        by
        have h‚Çâ :
          HasSum
            (fun n : ‚Ñï ‚Ü¶
              (6 : ‚Ñö) ^ (n + 1) /
                ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
            2 :=
          by
          have h‚ÇÅ‚ÇÄ :
            ‚àÄ n : ‚Ñï,
              (‚àë k in Finset.Icc 1 n, (6 : ‚Ñö) ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k))) =
                2 - (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) :=
            h_main
          have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := h_tendsto
          have h‚ÇÅ‚ÇÇ :
            HasSum
              (fun n : ‚Ñï ‚Ü¶
                (6 : ‚Ñö) ^ (n + 1) /
                  ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
              2 :=
            by
            have h‚ÇÅ‚ÇÉ :
              HasSum
                (fun n : ‚Ñï ‚Ü¶
                  (6 : ‚Ñö) ^ (n + 1) /
                    ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                2 :=
              by
              have h‚ÇÅ‚ÇÑ :
                ‚àÄ n : ‚Ñï,
                  (‚àë k in Finset.Icc 1 n, (6 : ‚Ñö) ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k))) =
                    2 - (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) :=
                h_main
              have h‚ÇÅ‚ÇÖ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) := h_tendsto
              have h‚ÇÅ‚ÇÜ :
                HasSum
                  (fun n : ‚Ñï ‚Ü¶
                    (6 : ‚Ñö) ^ (n + 1) /
                      ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                  2 :=
                by
                have h‚ÇÅ‚Çá :
                  HasSum
                    (fun n : ‚Ñï ‚Ü¶
                      (6 : ‚Ñö) ^ (n + 1) /
                        ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                    2 :=
                  by
                  have h‚ÇÅ‚Çà :
                    ‚àÄ n : ‚Ñï,
                      (‚àë k in Finset.Icc 1 n, (6 : ‚Ñö) ^ k / ((3 ^ (k + 1) - 2 ^ (k + 1)) * (3 ^ k - 2 ^ k))) =
                        2 - (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1)) :=
                    h_main
                  have h‚ÇÅ‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñö) ^ (n + 1) / (3 ^ (n + 1) - 2 ^ (n + 1))) atTop (ùìù 0) :=
                    h_tendsto
                  have h‚ÇÇ‚ÇÄ :
                    HasSum
                      (fun n : ‚Ñï ‚Ü¶
                        (6 : ‚Ñö) ^ (n + 1) /
                          ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                      2 :=
                    by
                    have h‚ÇÇ‚ÇÅ :
                      HasSum
                        (fun n : ‚Ñï ‚Ü¶
                          (6 : ‚Ñö) ^ (n + 1) /
                            ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                        2 :=
                      by
                      have h‚ÇÇ‚ÇÇ :
                        HasSum
                          (fun n : ‚Ñï ‚Ü¶
                            (6 : ‚Ñö) ^ (n + 1) /
                              ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                          2 :=
                        by
                        have h‚ÇÇ‚ÇÉ :
                          HasSum
                            (fun n : ‚Ñï ‚Ü¶
                              (6 : ‚Ñö) ^ (n + 1) /
                                ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                            2 :=
                          by
                          have h‚ÇÇ‚ÇÑ :
                            HasSum
                              (fun n : ‚Ñï ‚Ü¶
                                (6 : ‚Ñö) ^ (n + 1) /
                                  ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) *
                                    (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                              2 :=
                            by
                            have h‚ÇÇ‚ÇÖ :
                              HasSum
                                (fun n : ‚Ñï ‚Ü¶
                                  (6 : ‚Ñö) ^ (n + 1) /
                                    ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) *
                                      (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
                                2 :=
                              by convert HasSum.tsum_eq _ <;> simp_all [h‚ÇÉ, h‚ÇÑ] <;> norm_num <;> linarith
                            exact h‚ÇÇ‚ÇÖ
                          exact h‚ÇÇ‚ÇÑ
                        exact h‚ÇÇ‚ÇÉ
                      exact h‚ÇÇ‚ÇÇ
                    exact h‚ÇÇ‚ÇÅ
                  exact h‚ÇÇ‚ÇÄ
                exact h‚ÇÅ‚Çá
              exact h‚ÇÅ‚ÇÜ
            exact h‚ÇÅ‚ÇÉ
          exact h‚ÇÅ‚ÇÇ
        exact h‚Çà
      exact h‚ÇÖ
    have h‚ÇÜ :
      ‚àë' n : ‚Ñï,
          (6 ^ (n + 1 : ‚Ñï) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))) :
            ‚Ñö) =
        2 :=
      by
      have h‚Çá :
        HasSum
          (fun n : ‚Ñï ‚Ü¶
            (6 : ‚Ñö) ^ (n + 1) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))))
          2 :=
        h‚ÇÖ
      have h‚Çà :
        ‚àë' n : ‚Ñï,
            (6 ^ (n + 1 : ‚Ñï) / ((3 ^ ((n + 1 : ‚Ñï) + 1) - 2 ^ ((n + 1 : ‚Ñï) + 1)) * (3 ^ (n + 1 : ‚Ñï) - 2 ^ (n + 1 : ‚Ñï))) :
              ‚Ñö) =
          2 :=
        by convert h‚Çá.tsum_eq <;> simp_all
      exact h‚Çà
    exact h‚ÇÜ
  rw [h‚ÇÇ] <;> norm_num