import Mathlib

open Set Filter Topology Real

-- fun d ‚Ü¶ exp d - 1
/--
Let $d$ be a real number. For each integer $m \geq 0$, define a sequence $\{a_m(j)\}$, $j=0,1,2,\dots$ by the condition
\begin{align*}
a_m(0) &= d/2^m, \\
a_m(j+1) &= (a_m(j))^2 + 2a_m(j), \qquad j \geq 0.
\end{align*}
Evaluate $\lim_{n \to \infty} a_n(n)$.
-/
theorem putnam_1985_a3
(d : ‚Ñù)
(a : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñù)
(ha0 : ‚àÄ m : ‚Ñï, a m 0 = d / 2 ^ m)
(ha : ‚àÄ m : ‚Ñï, ‚àÄ j : ‚Ñï, a m (j + 1) = (a m j) ^ 2 + 2 * a m j)
: Tendsto (fun n ‚Ü¶ a n n) atTop (ùìù (((fun d ‚Ü¶ exp d - 1) : ‚Ñù ‚Üí ‚Ñù ) d)) := by
  have h_main : ‚àÄ m j : ‚Ñï, a m j = (d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ j : ‚Ñï) - 1 := by
    intro m j
    have h‚ÇÅ : ‚àÄ j : ‚Ñï, a m j + 1 = (d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ j : ‚Ñï) := by
      intro j
      induction j with
      | zero =>
        -- Base case: when j = 0
        have h‚ÇÇ : a m 0 = d / (2 : ‚Ñù) ^ m := by simpa using ha0 m
        norm_num [h‚ÇÇ, pow_zero, pow_one]
        <;> ring_nf
        <;> field_simp
        <;> ring_nf
      | succ j ih =>
        -- Inductive step: assume the statement holds for j, prove for j + 1
        have h‚ÇÇ := ha m j
        have h‚ÇÉ : a m (j + 1) = (a m j) ^ 2 + 2 * a m j := by simpa using ha m j
        have h‚ÇÑ : a m (j + 1) + 1 = (a m j + 1) ^ 2 := by
          calc
            a m (j + 1) + 1 = (a m j) ^ 2 + 2 * a m j + 1 := by rw [h‚ÇÉ]
            _ = (a m j + 1) ^ 2 := by ring
            _ = (a m j + 1) ^ 2 := by ring
        calc
          a m (j + 1) + 1 = (a m j + 1) ^ 2 := by rw [h‚ÇÑ]
          _ = ((d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ j : ‚Ñï)) ^ 2 := by rw [ih]
          _ = (d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ (j + 1) : ‚Ñï) := by
            simp [pow_succ, pow_mul, mul_comm]
            <;> ring_nf
            <;> field_simp
            <;> ring_nf
            <;> simp_all [pow_succ, pow_mul, mul_comm]
            <;> ring_nf
            <;> field_simp
            <;> ring_nf
    have h‚ÇÇ : a m j + 1 = (d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ j : ‚Ñï) := h‚ÇÅ j
    have h‚ÇÉ : a m j = (d / (2 : ‚Ñù) ^ m + 1) ^ (2 ^ j : ‚Ñï) - 1 := by
      linarith
    exact h‚ÇÉ
  
  have h_limit : Tendsto (fun n ‚Ü¶ a n n) atTop (ùìù (exp d - 1)) := by
    have h‚ÇÅ : (fun n ‚Ü¶ a n n) = (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1) ^ (2 ^ n : ‚Ñï) - 1) := by
      funext n
      rw [h_main]
      <;> simp [h_main]
    rw [h‚ÇÅ]
    have h‚ÇÇ : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï) - 1) atTop (ùìù (exp d - 1)) := by
      -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
      have h‚ÇÉ : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
        -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
        have h‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
          -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
          have h‚ÇÖ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
            -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
            have h‚ÇÜ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
              -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
              have h‚Çá : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 1) := by
                -- Prove that (1 + d / 2^n) tends to 1
                have h‚Çà : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 0) := by
                  -- Prove that d / 2^n tends to 0
                  have h‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 0) := by
                    -- Prove that d / 2^n tends to 0
                    have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 0) := by
                      -- Prove that d / 2^n tends to 0
                      have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d : ‚Ñù) / (2 : ‚Ñù) ^ n) atTop (ùìù 0) := by
                        -- Prove that d / 2^n tends to 0
                        have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ (2 : ‚Ñù) ^ n) atTop atTop := by
                          -- Prove that 2^n tends to infinity
                          exact tendsto_pow_atTop_atTop_of_one_lt (by norm_num)
                        -- Use the fact that d / 2^n tends to 0
                        have h‚ÇÅ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d : ‚Ñù) / (2 : ‚Ñù) ^ n) atTop (ùìù 0) := by
                          -- Use the fact that d / 2^n tends to 0
                          have h‚ÇÅ‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d : ‚Ñù) / (2 : ‚Ñù) ^ n) atTop (ùìù 0) := by
                            -- Use the fact that d / 2^n tends to 0
                            simpa [div_eq_mul_inv] using
                              tendsto_const_nhds.div_atTop h‚ÇÅ‚ÇÇ
                          exact h‚ÇÅ‚ÇÑ
                        exact h‚ÇÅ‚ÇÉ
                      exact h‚ÇÅ‚ÇÅ
                    exact h‚ÇÅ‚ÇÄ
                  exact h‚Çâ
                -- Prove that (1 + d / 2^n) tends to 1
                have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 1) := by
                  -- Prove that (1 + d / 2^n) tends to 1
                  have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 : ‚Ñù)) atTop (ùìù 1) := by
                    -- Prove that 1 tends to 1
                    exact tendsto_const_nhds
                  have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 0) := h‚Çà
                  -- Prove that (1 + d / 2^n) tends to 1
                  have h‚ÇÅ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù (1 + 0)) := by
                    -- Prove that (1 + d / 2^n) tends to 1
                    exact Tendsto.add h‚ÇÅ‚ÇÅ h‚ÇÅ‚ÇÇ
                  -- Prove that (1 + d / 2^n) tends to 1
                  have h‚ÇÅ‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 1) := by
                    simpa using h‚ÇÅ‚ÇÉ
                  exact h‚ÇÅ‚ÇÑ
                exact h‚ÇÅ‚ÇÄ
              -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
              have h‚Çà : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                have h‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                  -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                  have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 + d / (2 : ‚Ñù) ^ n : ‚Ñù)) atTop (ùìù 1) := h‚Çá
                  have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                    -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                    have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                      -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                      have h‚ÇÅ‚ÇÉ : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                        -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                        have h‚ÇÅ‚ÇÑ : Tendsto (fun n : ‚Ñï ‚Ü¶ ((1 + d / (2 : ‚Ñù) ^ n : ‚Ñù) ^ (2 ^ n : ‚Ñï))) atTop (ùìù (exp d)) := by
                          -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                          convert tendsto_one_plus_div_pow_exp d using 1
                          <;> simp [add_comm]
                          <;> field_simp
                          <;> ring_nf
                          <;> simp_all [add_comm]
                          <;> field_simp
                          <;> ring_nf
                          <;> simp_all [add_comm]
                        exact h‚ÇÅ‚ÇÑ
                      exact h‚ÇÅ‚ÇÉ
                    exact h‚ÇÅ‚ÇÇ
                  exact h‚ÇÅ‚ÇÅ
                exact h‚Çâ
              -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
              have h‚Çâ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
                -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                have h‚ÇÅ‚ÇÄ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
                  -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                  have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
                    -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                    have h‚ÇÅ‚ÇÇ : Tendsto (fun n : ‚Ñï ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := by
                      -- Prove that the limit of (1 + d / 2^n)^(2^n) is exp(d)
                      convert h‚Çà using 1
                      <;> simp [add_comm]
                      <;> field_simp
                      <;> ring_nf
                      <;> simp_all [add_comm]
                      <;> field_simp
                      <;> ring_nf
                      <;> simp_all [add_comm]
                    exact h‚ÇÅ‚ÇÇ
                  exact h‚ÇÅ‚ÇÅ
                exact h‚ÇÅ‚ÇÄ
              exact h‚Çâ
            exact h‚ÇÜ
          exact h‚ÇÖ
        exact h‚ÇÑ
      -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
      have h‚ÇÖ : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï) - 1) atTop (ùìù (exp d - 1)) := by
        -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
        have h‚ÇÜ : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï)) atTop (ùìù (exp d)) := h‚ÇÉ
        have h‚Çá : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï) - 1) atTop (ùìù (exp d - 1)) := by
          -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
          have h‚Çà : Tendsto (fun n ‚Ü¶ (d / (2 : ‚Ñù) ^ n + 1 : ‚Ñù) ^ (2 ^ n : ‚Ñï) - 1) atTop (ùìù (exp d - 1)) := by
            -- Use the fact that the limit of (1 + d / 2^n)^(2^n) is exp(d)
            convert h‚ÇÜ.sub (tendsto_const_nhds : Tendsto (fun n : ‚Ñï ‚Ü¶ (1 : ‚Ñù)) atTop (ùìù 1)) using 1
            <;> simp [sub_eq_add_neg]
            <;> ring_nf
            <;> simp_all [sub_eq_add_neg]
            <;> field_simp
            <;> ring_nf
            <;> simp_all [sub_eq_add_neg]
          exact h‚Çà
        exact h‚Çá
      exact h‚ÇÖ
    exact h‚ÇÇ
  
  simpa using h_limit