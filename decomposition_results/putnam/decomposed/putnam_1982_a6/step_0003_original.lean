theorem h‚ÇÇ (h :  ‚àÄ (b : ‚Ñï ‚Üí ‚Ñï) (x : ‚Ñï ‚Üí ‚Ñù),    BijOn b (Ici 1) (Ici 1) ‚Üí      StrictAntiOn (fun n => |x n|) (Ici 1) ‚Üí        Tendsto (fun n => ‚Üë|‚Üë(b n) - ‚Üën| * |x n|) atTop (ùìù 0) ‚Üí          Tendsto (fun n => ‚àë k ‚àà Finset.Icc 1 n, x k) atTop (ùìù 1) ‚Üí            Tendsto (fun n => ‚àë k ‚àà Finset.Icc 1 n, x (b k)) atTop (ùìù 1)) : ‚àÉ b x,
    BijOn b (Ici 1) (Ici 1) ‚àß
      StrictAntiOn (fun n => |x n|) (Ici 1) ‚àß
        Tendsto (fun n => ‚Üë|‚Üë(b n) - ‚Üën| * |x n|) atTop (ùìù 0) ‚àß
          Tendsto (fun n => ‚àë k ‚àà Finset.Icc 1 n, x k) atTop (ùìù 1) ‚àß
            ¬¨Tendsto (fun n => ‚àë k ‚àà Finset.Icc 1 n, x (b k)) atTop (ùìù 1) :=
  by
  use fun n => n + 1
  use fun n => if n = 1 then 2 else if n = 2 then -1 else 0
  constructor
  ¬∑ refine' ‚ü®fun n hn => by simp_all [Nat.lt_succ_iff], fun n hn => _, _‚ü©
    ¬∑ simp_all [Nat.lt_succ_iff] <;> omega
    ¬∑ rintro n hn
      simp_all [Nat.lt_succ_iff] <;> (try omega) <;>
        (try {use n - 1 <;> simp_all [Nat.lt_succ_iff] <;> omega
          })
  ¬∑ constructor
    ¬∑ intro n hn m hm hnm
      simp_all [Nat.lt_succ_iff, abs_of_nonneg, abs_of_nonpos, Finset.mem_Icc] <;>
          (try {split_ifs at * <;> norm_num at * <;> (try omega) <;> (try linarith)
            }) <;>
        (try {norm_num at * <;> omega
          })
    ¬∑ constructor
      ¬∑
        have h‚ÇÉ :
          Tendsto
            (fun n : ‚Ñï => |(n + 1 : ‚Ñ§) - (n : ‚Ñ§)| * |(if (n : ‚Ñï) = 1 then (2 : ‚Ñù) else if (n : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0)|)
            atTop (ùìù 0) := by sorry
        simpa using h‚ÇÉ
      ¬∑ constructor
        ¬∑
          have h‚ÇÑ :
            Tendsto (fun n : ‚Ñï => ‚àë k in Finset.Icc 1 n, (if k = 1 then (2 : ‚Ñù) else if k = 2 then (-1 : ‚Ñù) else 0)) atTop
              (ùìù 1) := by sorry
          have h‚ÇÖ :
            ¬¨Tendsto
                (fun n : ‚Ñï =>
                  ‚àë k in Finset.Icc 1 n, (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                atTop (ùìù 1) := by sorry
          simpa using h‚ÇÖ
        ¬∑
          have h‚ÇÖ :
            ¬¨Tendsto
                (fun n : ‚Ñï =>
                  ‚àë k in Finset.Icc 1 n, (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                atTop (ùìù 1) :=
            by
            have h‚ÇÜ :
              ‚àÄ n : ‚Ñï,
                n ‚â• 1 ‚Üí
                  ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0) =
                    (0 : ‚Ñù) :=
              by
              intro n hn
              have h‚Çá : n ‚â• 1 := hn
              have h‚Çà :
                ‚àë k in Finset.Icc 1 n, (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0) =
                  (0 : ‚Ñù) :=
                by
                have h‚Çâ :
                  ‚àÄ k : ‚Ñï,
                    k ‚àà Finset.Icc 1 n ‚Üí
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0) = 0 :=
                  by
                  intro k hk
                  have h‚ÇÅ‚ÇÄ : k ‚àà Finset.Icc 1 n := hk
                  have h‚ÇÅ‚ÇÅ : 1 ‚â§ k := by
                    simp [Finset.mem_Icc] at h‚ÇÅ‚ÇÄ
                    linarith
                  have h‚ÇÅ‚ÇÇ : k ‚â§ n := by
                    simp [Finset.mem_Icc] at h‚ÇÅ‚ÇÄ
                    linarith
                  have h‚ÇÅ‚ÇÉ : (k + 1 : ‚Ñï) ‚â† 1 := by omega
                  have h‚ÇÅ‚ÇÑ : (k + 1 : ‚Ñï) ‚â† 2 := by omega
                  simp [h‚ÇÅ‚ÇÉ, h‚ÇÅ‚ÇÑ]
                have h‚ÇÅ‚ÇÖ :
                  ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0) =
                    ‚àë k in Finset.Icc 1 n, 0 :=
                  by
                  apply Finset.sum_congr rfl
                  intro x hx
                  rw [h‚Çâ x hx]
                have h‚ÇÅ‚ÇÜ : ‚àë k in Finset.Icc 1 n, (0 : ‚Ñù) = 0 := by simp
                rw [h‚ÇÅ‚ÇÖ]
                rw [h‚ÇÅ‚ÇÜ] <;> simp
              exact h‚Çà
            have h‚Çâ :
              Tendsto
                (fun n : ‚Ñï =>
                  ‚àë k in Finset.Icc 1 n, (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                atTop (ùìù 0) :=
              by
              have h‚ÇÅ‚ÇÄ :
                ‚àÄ·∂† (n : ‚Ñï) in atTop,
                  ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0) =
                    (0 : ‚Ñù) :=
                by
                filter_upwards [eventually_ge_atTop 1] with n hn
                exact h‚ÇÜ n hn
              have h‚ÇÅ‚ÇÅ : Tendsto (fun n : ‚Ñï => (0 : ‚Ñù)) atTop (ùìù 0) := by simpa using tendsto_const_nhds
              have h‚ÇÅ‚ÇÇ :
                Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù 0) :=
                by apply Tendsto.congr' h‚ÇÅ‚ÇÄ h‚ÇÅ‚ÇÅ
              exact h‚ÇÅ‚ÇÇ
            have h‚ÇÅ‚ÇÉ :
              ¬¨Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù 1) :=
              by
              intro h‚ÇÅ‚ÇÑ
              have h‚ÇÅ‚ÇÖ :
                Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù 1) :=
                h‚ÇÅ‚ÇÑ
              have h‚ÇÅ‚ÇÜ :
                Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù 0) :=
                h‚Çâ
              have h‚ÇÅ‚Çá : (1 : ‚Ñù) ‚â† (0 : ‚Ñù) := by norm_num
              have h‚ÇÅ‚Çà :
                Filter.Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù (1 : ‚Ñù)) :=
                h‚ÇÅ‚ÇÖ
              have h‚ÇÅ‚Çâ :
                Filter.Tendsto
                  (fun n : ‚Ñï =>
                    ‚àë k in Finset.Icc 1 n,
                      (if (k + 1 : ‚Ñï) = 1 then (2 : ‚Ñù) else if (k + 1 : ‚Ñï) = 2 then (-1 : ‚Ñù) else 0))
                  atTop (ùìù (0 : ‚Ñù)) :=
                h‚Çâ
              have h‚ÇÇ‚ÇÄ := tendsto_nhds_unique h‚ÇÅ‚Çà h‚ÇÅ‚Çâ
              norm_num at h‚ÇÇ‚ÇÄ <;> simp_all
            exact h‚ÇÅ‚ÇÉ
          simpa using h‚ÇÖ