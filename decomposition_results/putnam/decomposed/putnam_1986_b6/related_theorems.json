[
  "And.exists",
  "BAll.imp_left",
  "BAll.imp_right",
  "BEx.elim",
  "BEx.imp_left",
  "BEx.imp_right",
  "BEx.intro",
  "Classical.choose_eq",
  "Classical.some_spec\u2082",
  "CommMagma.IsLeftCancelMul.toIsCancelMul",
  "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
  "CommMagma.IsRightCancelMul.toIsCancelMul",
  "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
  "Decidable.and_forall_ne",
  "Decidable.eq_or_ne",
  "Decidable.ne_or_eq",
  "Eq.rec_eq_cast",
  "Exists.fst",
  "Exists.snd",
  "Exists\u2082.imp",
  "Exists\u2083.imp",
  "Fact.elim",
  "Iff.ne_left",
  "Iff.ne_right",
  "Iff.not_left",
  "Iff.not_right",
  "Imp.swap",
  "Matrix.add_apply",
  "Matrix.add_mulVec",
  "Matrix.add_vecMul",
  "Matrix.col_apply",
  "Matrix.col_def",
  "Matrix.col_diagonal",
  "Matrix.col_eq_transpose",
  "Matrix.col_map",
  "Matrix.col_submatrix",
  "Matrix.col_submatrix_eq_comp",
  "Matrix.col_transpose",
  "Matrix.diag_add",
  "Matrix.diag_apply",
  "Matrix.diag_diagonal",
  "Matrix.diag_map",
  "Matrix.diag_neg",
  "Matrix.diag_one",
  "Matrix.diag_smul",
  "Matrix.diag_sub",
  "Matrix.diag_submatrix",
  "Matrix.diag_transpose",
  "Matrix.diag_zero",
  "Matrix.diagonal_add",
  "Matrix.diagonal_apply",
  "Matrix.diagonal_apply_eq",
  "Matrix.diagonal_apply_ne",
  "Matrix.diagonal_const_mulVec",
  "Matrix.diagonal_eq_diagonal_iff",
  "Matrix.diagonal_injective",
  "Matrix.diagonal_intCast",
  "Matrix.diagonal_map",
  "Matrix.diagonal_mul",
  "Matrix.diagonal_mulVec_single",
  "Matrix.diagonal_mul_diagonal",
  "Matrix.diagonal_natCast",
  "Matrix.diagonal_neg",
  "Matrix.diagonal_ofNat",
  "Matrix.diagonal_one",
  "Matrix.diagonal_smul",
  "Matrix.diagonal_sub",
  "Matrix.diagonal_transpose",
  "Matrix.diagonal_unique",
  "Matrix.diagonal_zero",
  "Matrix.dotProduct_mulVec",
  "Matrix.ext",
  "Matrix.ext_iff",
  "Matrix.ext_of_mulVec_single",
  "Matrix.ext_of_single_vecMul",
  "Matrix.intCast_mulVec",
  "Matrix.map_apply",
  "Matrix.map_id",
  "Matrix.map_injective",
  "Matrix.map_map",
  "Matrix.mulVec_add",
  "Matrix.mulVec_diagonal",
  "Matrix.mulVec_eq_sum",
  "Matrix.mulVec_injective_of_isUnit",
  "Matrix.mulVec_mulVec",
  "Matrix.mulVec_neg",
  "Matrix.mulVec_one",
  "Matrix.mulVec_single",
  "Matrix.mulVec_single_one",
  "Matrix.mulVec_smul",
  "Matrix.mulVec_smul_assoc",
  "Matrix.mulVec_sub",
  "Matrix.mulVec_transpose",
  "Matrix.mulVec_vecMul",
  "Matrix.mulVec_zero",
  "Matrix.mul_apply",
  "Matrix.mul_apply_eq_vecMul",
  "Matrix.mul_diagonal",
  "Matrix.mul_mul_apply",
  "Matrix.mul_mul_left",
  "Matrix.mul_mul_right",
  "Matrix.mul_smul",
  "Matrix.mul_submatrix_one",
  "Matrix.natCast_apply",
  "Matrix.natCast_mulVec",
  "Matrix.neg_apply",
  "Matrix.neg_mulVec",
  "Matrix.neg_mulVec_neg",
  "Matrix.neg_vecMul",
  "Matrix.neg_vecMul_neg",
  "Matrix.ofNat_apply",
  "Matrix.ofNat_mulVec",
  "Matrix.of_apply",
  "Matrix.of_col",
  "Matrix.of_row",
  "Matrix.of_symm_apply",
  "Matrix.one_apply",
  "Matrix.one_apply_eq",
  "Matrix.one_apply_ne",
  "Matrix.one_eq_pi_single",
  "Matrix.one_mulVec",
  "Matrix.one_submatrix_mul",
  "Matrix.one_vecMul",
  "Matrix.op_smul_eq_mul_diagonal",
  "Matrix.op_smul_one_eq_diagonal",
  "Matrix.reindex_apply",
  "Matrix.reindex_refl_refl",
  "Matrix.reindex_symm",
  "Matrix.reindex_trans",
  "Matrix.row_apply",
  "Matrix.row_def",
  "Matrix.row_diagonal",
  "Matrix.row_eq_self",
  "Matrix.row_map",
  "Matrix.row_submatrix",
  "Matrix.row_submatrix_eq_comp",
  "Matrix.row_transpose",
  "Matrix.single_one_vecMul",
  "Matrix.single_vecMul",
  "Matrix.single_vecMul_diagonal",
  "Matrix.smul_apply",
  "Matrix.smul_eq_diagonal_mul",
  "Matrix.smul_eq_mul_diagonal",
  "Matrix.smul_mul",
  "Matrix.smul_mulVec_assoc",
  "Matrix.smul_one_eq_diagonal",
  "Matrix.sub_apply",
  "Matrix.sub_mulVec",
  "Matrix.sub_vecMul",
  "Matrix.submatrix_add",
  "Matrix.submatrix_apply",
  "Matrix.submatrix_diagonal",
  "Matrix.submatrix_diagonal_embedding",
  "Matrix.submatrix_diagonal_equiv",
  "Matrix.submatrix_id_id",
  "Matrix.submatrix_id_mul_left",
  "Matrix.submatrix_id_mul_right",
  "Matrix.submatrix_map",
  "Matrix.submatrix_mul",
  "Matrix.submatrix_mulVec_equiv",
  "Matrix.submatrix_mul_equiv",
  "Matrix.submatrix_mul_transpose_submatrix",
  "Matrix.submatrix_neg",
  "Matrix.submatrix_one",
  "Matrix.submatrix_one_embedding",
  "Matrix.submatrix_one_equiv",
  "Matrix.submatrix_smul",
  "Matrix.submatrix_sub",
  "Matrix.submatrix_submatrix",
  "Matrix.submatrix_vecMul_equiv",
  "Matrix.submatrix_zero",
  "Matrix.transpose_add",
  "Matrix.transpose_apply",
  "Matrix.transpose_eq_diagonal",
  "Matrix.transpose_eq_intCast",
  "Matrix.transpose_eq_natCast",
  "Matrix.transpose_eq_ofNat",
  "Matrix.transpose_eq_one",
  "Matrix.transpose_eq_zero",
  "Matrix.transpose_injective",
  "Matrix.transpose_intCast",
  "Matrix.transpose_map",
  "Matrix.transpose_mul",
  "Matrix.transpose_natCast",
  "Matrix.transpose_neg",
  "Matrix.transpose_ofNat",
  "Matrix.transpose_one",
  "Matrix.transpose_reindex",
  "Matrix.transpose_smul",
  "Matrix.transpose_sub",
  "Matrix.transpose_submatrix",
  "Matrix.transpose_transpose",
  "Matrix.transpose_zero",
  "Matrix.two_mul_expl",
  "Matrix.vecMulVec_apply",
  "Matrix.vecMul_add",
  "Matrix.vecMul_diagonal",
  "Matrix.vecMul_diagonal_const",
  "Matrix.vecMul_eq_sum",
  "Matrix.vecMul_injective_of_isUnit",
  "Matrix.vecMul_intCast",
  "Matrix.vecMul_mulVec",
  "Matrix.vecMul_natCast",
  "Matrix.vecMul_neg",
  "Matrix.vecMul_ofNat",
  "Matrix.vecMul_one",
  "Matrix.vecMul_smul",
  "Matrix.vecMul_sub",
  "Matrix.vecMul_transpose",
  "Matrix.vecMul_vecMul",
  "Matrix.vecMul_zero",
  "Matrix.zero_apply",
  "Matrix.zero_mulVec",
  "Matrix.zero_vecMul",
  "MulOneClass.ext",
  "Multiset._root_.Finset.esymm_map_val",
  "Multiset.pow_smul_esymm",
  "MvPolynomial.IsSymmetric.C",
  "MvPolynomial.IsSymmetric._root_.MvPolynomial.isSymmetric_rename",
  "MvPolynomial.IsSymmetric.add",
  "MvPolynomial.IsSymmetric.map",
  "MvPolynomial.IsSymmetric.mul",
  "MvPolynomial.IsSymmetric.neg",
  "MvPolynomial.IsSymmetric.one",
  "MvPolynomial.IsSymmetric.smul",
  "MvPolynomial.IsSymmetric.sub",
  "MvPolynomial.IsSymmetric.zero",
  "MvPolynomial.aeval_esymm_eq_multiset_esymm",
  "MvPolynomial.degrees_esymm",
  "MvPolynomial.esymmPart_indiscrete",
  "MvPolynomial.esymmPart_zero",
  "MvPolynomial.esymm_eq_multiset_esymm",
  "MvPolynomial.esymm_eq_sum_monomial",
  "MvPolynomial.esymm_eq_sum_subtype",
  "MvPolynomial.esymm_isSymmetric",
  "MvPolynomial.esymm_one",
  "MvPolynomial.esymm_zero",
  "MvPolynomial.hsymmPart_indiscrete",
  "MvPolynomial.hsymmPart_zero",
  "MvPolynomial.hsymm_isSymmetric",
  "MvPolynomial.hsymm_one",
  "MvPolynomial.hsymm_zero",
  "MvPolynomial.map_esymm",
  "MvPolynomial.map_hsymm",
  "MvPolynomial.mem_symmetricSubalgebra",
  "MvPolynomial.msymm_isSymmetric",
  "MvPolynomial.msymm_one",
  "MvPolynomial.msymm_zero",
  "MvPolynomial.psumPart_indiscrete",
  "MvPolynomial.psumPart_zero",
  "MvPolynomial.psum_isSymmetric",
  "MvPolynomial.psum_one",
  "MvPolynomial.psum_zero",
  "MvPolynomial.rename_esymm",
  "MvPolynomial.rename_hsymm",
  "MvPolynomial.rename_msymm",
  "MvPolynomial.rename_psum",
  "MvPolynomial.support_esymm",
  "NNRat.cast_def",
  "NNRat.smul_def",
  "Ne.ne_or_ne",
  "Not.imp_symm",
  "Or.elim3",
  "Or.imp3",
  "Prop.exists_iff",
  "Prop.forall_iff",
  "Rat.cast_def",
  "Rat.cast_mk",
  "Rat.ofScientific_eq_ofScientific",
  "Rat.smul_def",
  "Rat.smul_one_eq_cast",
  "RingHom.map_dotProduct",
  "RingHom.map_matrix_mul",
  "RingHom.map_mulVec",
  "RingHom.map_vecMul",
  "_root_.IsLeftRegular.matrix",
  "_root_.IsSMulRegular.matrix",
  "add_dotProduct",
  "and_forall_ne",
  "and_iff_not_or_not",
  "and_or_imp",
  "and_symm_left",
  "and_symm_right",
  "apply_dite\u2082",
  "apply_ite\u2082",
  "beq_ext",
  "bex_def",
  "by_cases",
  "by_contradiction",
  "cast_heq_iff_heq",
  "comp_equiv_dotProduct_comp_equiv",
  "comp_equiv_symm_dotProduct",
  "congr_arg_heq",
  "congr_arg_refl",
  "congr_fun_congr_arg",
  "congr_fun_rfl",
  "congr_heq",
  "congr_refl_left",
  "congr_refl_right",
  "dec_em",
  "diagonal_dotProduct",
  "dite_apply",
  "dite_dite_comm",
  "dite_eq_iff",
  "dite_eq_or_eq",
  "dite_mem",
  "dite_ne_left_iff",
  "dite_ne_right_iff",
  "dite_prop_iff_and",
  "dite_prop_iff_or",
  "div_eq_mul_inv",
  "div_mul_cancel",
  "div_self",
  "dotProduct_add",
  "dotProduct_assoc",
  "dotProduct_comm",
  "dotProduct_comp_equiv_symm",
  "dotProduct_diagonal",
  "dotProduct_neg",
  "dotProduct_one",
  "dotProduct_pUnit",
  "dotProduct_single",
  "dotProduct_single_one",
  "dotProduct_smul",
  "dotProduct_sub",
  "dotProduct_zero",
  "em",
  "eqRec_heq",
  "eq_cast_iff_heq",
  "eq_equivalence",
  "eq_false_intro",
  "eq_inv_of_mul_eq_one_left",
  "eq_ite_iff",
  "eq_or_ne",
  "eq_true_intro",
  "exists_and_exists_comm",
  "exists_apply_eq",
  "exists_apply_eq_apply",
  "exists_apply_eq_apply2",
  "exists_apply_eq_apply3",
  "exists_iff_of_forall",
  "exists_mem_of_exists",
  "exists_mem_or",
  "exists_mem_or_left",
  "exists_of_exists_mem",
  "exists_or_forall_not",
  "exists_prop_of_false",
  "exists_swap",
  "exists_zpow_surjective",
  "exists\u2082_comm",
  "fact_iff",
  "forall_and_left",
  "forall_and_right",
  "forall_apply_eq_imp_iff",
  "forall_cond_comm",
  "forall_eq_apply_imp_iff",
  "forall_imp_iff_exists_imp",
  "forall_mem_comm",
  "forall_or_exists_not",
  "forall_or_left",
  "forall_or_of_or_forall",
  "forall_or_right",
  "forall_prop_congr",
  "forall_swap",
  "forall_true_iff",
  "forall\u2082_and",
  "forall\u2082_imp",
  "forall\u2082_or_left",
  "forall\u2082_swap",
  "forall\u2082_true_iff",
  "forall\u2083_imp",
  "forall\u2083_true_iff",
  "heq_cast_iff_heq",
  "heq_of_eq_cast",
  "heq_rec_iff_heq",
  "if_congr",
  "if_ctx_congr",
  "iff_eq_eq",
  "iff_iff_and_or_not_and_not",
  "iff_iff_not_or_and_or_not",
  "iff_mpr_iff_true_intro",
  "iff_not_comm",
  "imp_and_neg_imp_iff",
  "imp_congr_ctx_eq",
  "imp_congr_eq",
  "imp_forall_iff",
  "imp_forall_iff_forall",
  "imp_iff_not_or",
  "imp_iff_or_not",
  "imp_iff_right_iff",
  "imp_or",
  "inv_eq_of_mul_eq_one_left",
  "inv_eq_of_mul_eq_one_right",
  "inv_eq_one_div",
  "inv_inv",
  "inv_mul_cancel",
  "inv_mul_cancel_left",
  "inv_mul_cancel_right",
  "inv_one",
  "ite_and",
  "ite_apply",
  "ite_eq_iff",
  "ite_eq_or_eq",
  "ite_ite_comm",
  "ite_mem",
  "ite_ne_left_iff",
  "ite_ne_right_iff",
  "ite_or",
  "ite_prop_iff_and",
  "ite_prop_iff_or",
  "lawful_beq_subsingleton",
  "map_op_smul",
  "map_smul",
  "mem_dite",
  "mem_ite",
  "mul_assoc",
  "mul_comm",
  "mul_div_assoc",
  "mul_div_cancel_right",
  "mul_inv_cancel",
  "mul_inv_cancel_comm",
  "mul_inv_cancel_left",
  "mul_inv_cancel_right",
  "mul_inv_rev",
  "mul_left_cancel",
  "mul_left_cancel_iff",
  "mul_left_inj",
  "mul_left_injective",
  "mul_ne_mul_left",
  "mul_ne_mul_right",
  "mul_one",
  "mul_right_cancel",
  "mul_right_cancel_iff",
  "mul_right_inj",
  "mul_right_injective",
  "ne_and_eq_iff_right",
  "ne_of_eq_of_ne",
  "ne_of_ne_of_eq",
  "ne_or_eq",
  "negSucc_zsmul",
  "neg_dotProduct",
  "neg_dotProduct_neg",
  "neg_of",
  "not_and_not_right",
  "not_and_or",
  "not_beq_of_ne",
  "not_exists_mem",
  "not_forall_not",
  "not_forall\u2082",
  "not_forall\u2082_of_exists\u2082_not",
  "not_iff",
  "not_iff_comm",
  "not_iff_not",
  "not_imp",
  "not_imp_comm",
  "not_imp_not",
  "not_ne_iff",
  "not_or_of_imp",
  "npowBinRec.go_spec",
  "npowRec",
  "npowRec_eq",
  "npowRec_eq_npowBinRec",
  "npow_eq_pow",
  "of_add_of",
  "of_not_imp",
  "of_not_not",
  "of_sub_of",
  "of_zero",
  "one_div",
  "one_dotProduct",
  "one_dotProduct_one",
  "one_mul",
  "or_congr_left",
  "or_congr_right",
  "or_iff_not_and_not",
  "or_not",
  "or_not_of_imp",
  "peirce",
  "pow_add",
  "pow_mul",
  "pow_mul_comm",
  "pow_one",
  "pow_right_comm",
  "pow_succ",
  "pow_three",
  "pow_zero",
  "rec_heq_iff_heq",
  "rec_heq_of_heq",
  "single_dotProduct",
  "single_one_dotProduct",
  "smul_dotProduct",
  "smul_of",
  "sub_dotProduct",
  "sumElim_dotProduct_sumElim",
  "xor_comm",
  "xor_iff_iff_not",
  "xor_iff_not_iff",
  "xor_iff_or_and_not_and",
  "xor_not_not",
  "zero_dotProduct",
  "zpow_natCast",
  "zpow_negSucc",
  "zpow_neg_coe_of_pos",
  "zpow_neg_one",
  "zpow_ofNat",
  "zpow_one"
]