theorem putnam_1977_b1 :
  Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)):=
  by
  have h_main :
    ‚àÄ (N : ‚Ñ§),
      N ‚â• 2 ‚Üí
        ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by sorry
  have h_main :
    ‚àÄ (N : ‚Ñ§),
      N ‚â• 2 ‚Üí
        ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)):=
    by
    --  intro N hN
    have h‚ÇÅ :
      ‚àÄ (n : ‚Ñ§),
        n ‚â• 2 ‚Üí
          ((n : ‚Ñù) ^ 3 - 1 : ‚Ñù) / ((n : ‚Ñù) ^ 3 + 1 : ‚Ñù) =
            ((n : ‚Ñù) - 1) / ((n : ‚Ñù) + 1) * (((n : ‚Ñù) + 1) ^ 2 - ((n : ‚Ñù) + 1) + 1) / ((n : ‚Ñù) ^ 2 - (n : ‚Ñù) + 1) := by sorry
    have h‚ÇÇ :
      ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by sorry
    --  exact h‚ÇÇ <;>
        (try {simp_all
          }) <;>
      (try
          {field_simp <;> ring_nf <;> norm_cast <;>
                    simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero,
                      Int.ofNat_succ, Int.emod_eq_of_lt] <;>
                  (try omega) <;>
                (try {norm_num at * <;> omega
                  }) <;>
              (try {linarith
                }) <;>
            (try {ring_nf at * <;> omega
              })
        })
    hole
  have h_final :
    Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
    by
    have h‚ÇÇ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
      by
      have h‚ÇÉ :
        ‚àÄ·∂† (N : ‚Ñ§) in atTop,
          ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) =
            (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) :=
        by
        filter_upwards [eventually_ge_atTop (2 : ‚Ñ§)] with N hN
        exact h_main N hN
      have h‚ÇÑ :
        Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
        by
        have h‚ÇÖ :
          Tendsto (fun (N : ‚Ñ§) ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop
            (ùìù ((2 / 3 : ‚Ñù))) :=
          by
          apply Tendsto.congr' _ h_main_limit
          apply h‚ÇÉ.mono
          intro N hN
          rw [hN]
        exact h‚ÇÖ
      exact h‚ÇÑ
    exact h‚ÇÇ
  have h_final : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)):=
    by
    have h‚ÇÇ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)):=
      by
      have h‚ÇÉ :
        ‚àÄ·∂† (N : ‚Ñ§) in atTop,
          ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by sorry
      have h‚ÇÑ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)):=
        by
        have h‚ÇÖ :
          Tendsto (fun (N : ‚Ñ§) ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3 : ‚Ñù))) := by sorry
        --  exact h‚ÇÖ
        hole
      --  exact h‚ÇÑ
      hole
    --  exact h‚ÇÇ
    hole
have putnam_1977_b1 :
  Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
  by
  have h_main :
    ‚àÄ (N : ‚Ñ§),
      N ‚â• 2 ‚Üí
        ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by sorry
  have h_main_limit : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
    by
    have h‚ÇÅ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
      by
      have h‚ÇÇ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
        by
        have h‚ÇÉ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
          by
          have h‚ÇÑ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
            by
            have h‚ÇÖ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
              by
              have h‚ÇÜ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                by
                have h‚Çá : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                  by
                  have h‚Çà : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                    by
                    have h‚Çâ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                      by
                      have h‚ÇÅ‚ÇÄ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                        by
                        have h‚ÇÅ‚ÇÅ :
                          (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) =
                            (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) :=
                          rfl
                        --  rw [h‚ÇÅ‚ÇÅ]
                        have h‚ÇÅ‚ÇÇ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                          by
                          have h‚ÇÅ‚ÇÉ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                            by
                            have h‚ÇÅ‚ÇÑ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):=
                              by
                              have h‚ÇÅ‚ÇÖ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))):= by
                                --  convert Tendsto.const_mul (2 / 3 : ‚Ñù) (tendsto_const_nhds : Tendsto (fun (N : ‚Ñ§) => (1 : ‚Ñù)) atTop (ùìù 1)) using 1 <;>
                                --                    simp [mul_comm] <;>
                                --                  field_simp <;>
                                              ring_nf <;>
                                            norm_num <;>
                                          simp_all [mul_comm] <;>
                                        norm_num <;>
                                      simp_all [mul_comm] <;>
                                    norm_num <;>
                                  linarith
                                hole
                              --  exact h‚ÇÅ‚ÇÖ
                              hole
                            --  exact h‚ÇÅ‚ÇÑ
                            hole
                          --  exact h‚ÇÅ‚ÇÉ
                          hole
                        exact h‚ÇÅ‚ÇÇ
                        hole
                      --  exact h‚ÇÅ‚ÇÄ
                      hole
                    --  exact h‚Çâ
                    hole
                  --  exact h‚Çà
                  hole
                --  exact h‚Çá
                hole
              --  exact h‚ÇÜ
              hole
            --  exact h‚ÇÖ
            hole
          --  exact h‚ÇÑ
          hole
        --  exact h‚ÇÉ
        hole
      --  exact h‚ÇÇ
      hole
    --  exact h‚ÇÅ
    hole
  have h_final :
    Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
    by
    have h‚ÇÇ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
      by
      have h‚ÇÉ :
        ‚àÄ·∂† (N : ‚Ñ§) in atTop,
          ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) =
            (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) :=
        by
        filter_upwards [eventually_ge_atTop (2 : ‚Ñ§)] with N hN
        exact h_main N hN
      have h‚ÇÑ :
        Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) :=
        by
        have h‚ÇÖ :
          Tendsto (fun (N : ‚Ñ§) ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop
            (ùìù ((2 / 3 : ‚Ñù))) :=
          by
          apply Tendsto.congr' _ h_main_limit
          apply h‚ÇÉ.mono
          intro N hN
          rw [hN]
        exact h‚ÇÖ
      exact h‚ÇÑ
    exact h‚ÇÇ
  exact h_final
  hole