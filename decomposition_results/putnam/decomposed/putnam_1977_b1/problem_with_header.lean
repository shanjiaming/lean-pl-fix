import Mathlib

open RingHom Set Nat Filter Topology

-- 2 / 3
/--
Find $\prod_{n=2}^{\infty} \frac{(n^3 - 1)}{(n^3 + 1)}$.
-/
theorem putnam_1977_b1
: Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù )) := by
  have h_main : ‚àÄ (N : ‚Ñ§), N ‚â• 2 ‚Üí ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by 
    intro N hN
    have h‚ÇÅ : ‚àÄ (n : ‚Ñ§), n ‚â• 2 ‚Üí ((n : ‚Ñù) ^ 3 - 1 : ‚Ñù) / ((n : ‚Ñù) ^ 3 + 1 : ‚Ñù) = ((n : ‚Ñù) - 1) / ((n : ‚Ñù) + 1) * (((n : ‚Ñù) + 1) ^ 2 - ((n : ‚Ñù) + 1) + 1) / ((n : ‚Ñù) ^ 2 - (n : ‚Ñù) + 1) := by
      intro n hn
      have h‚ÇÅ : (n : ‚Ñù) ^ 3 - 1 = ((n : ‚Ñù) - 1) * ((n : ‚Ñù) ^ 2 + (n : ‚Ñù) + 1 : ‚Ñù) := by ring
      have h‚ÇÇ : (n : ‚Ñù) ^ 3 + 1 = ((n : ‚Ñù) + 1) * ((n : ‚Ñù) ^ 2 - (n : ‚Ñù) + 1 : ‚Ñù) := by ring
      rw [h‚ÇÅ, h‚ÇÇ]
      have h‚ÇÉ : (n : ‚Ñù) ‚â† -1 := by
        intro h
        norm_cast at h
        <;> nlinarith
      have h‚ÇÑ : (n : ‚Ñù) ^ 2 - (n : ‚Ñù) + 1 ‚â† 0 := by
        nlinarith [sq_nonneg ((n : ‚Ñù) - 1)]
      field_simp [h‚ÇÉ, h‚ÇÑ, sub_eq_zero, add_eq_zero_iff_eq_neg]
      <;> ring_nf
      <;> field_simp [h‚ÇÉ, h‚ÇÑ, sub_eq_zero, add_eq_zero_iff_eq_neg]
      <;> ring_nf
      <;> nlinarith [sq_nonneg ((n : ‚Ñù) - 1)]
    have h‚ÇÇ : ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by
      have h‚ÇÉ : ‚àÄ (N : ‚Ñ§), N ‚â• 2 ‚Üí ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by
        intro N hN
        have h‚ÇÑ : ‚àÄ (K : ‚Ñ§), 2 ‚â§ K ‚Üí ‚àè n in Finset.Icc (2 : ‚Ñ§) K, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (K ^ 2 + K + 1) / (3 * K * (K + 1)) := by
          intro K hK
          have h‚ÇÖ : ‚àÄ (n : ‚Ñï), ‚àè k in Finset.Icc 2 n, ((k : ‚Ñù) ^ 3 - 1) / ((k : ‚Ñù) ^ 3 + 1) = (2 : ‚Ñù) * (n ^ 2 + n + 1) / (3 * n * (n + 1)) := by
            intro n
            induction' n with n ih
            ¬∑ norm_num [Finset.prod_eq_one]
            ¬∑ cases n with
              | zero =>
                norm_num [Finset.prod_eq_one]
              | succ n =>
                cases n with
                | zero =>
                  norm_num [Finset.prod_Icc_succ_top]
                | succ n =>
                  simp_all [Finset.prod_Icc_succ_top, Nat.cast_add, Nat.cast_one, Nat.cast_zero, Nat.cast_mul, Nat.cast_pow]
                  <;> field_simp
                  <;> ring_nf
                  <;> field_simp
                  <;> ring_nf
                  <;> nlinarith
          have h‚ÇÜ : K ‚â• 2 := by assumption
          have h‚Çá : ‚àè n in Finset.Icc (2 : ‚Ñ§) K, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (K ^ 2 + K + 1) / (3 * K * (K + 1)) := by
            have h‚Çà : ‚àè n in Finset.Icc (2 : ‚Ñ§) K, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = ‚àè n in Finset.Icc 2 (K.toNat), ((n : ‚Ñù) ^ 3 - 1) / ((n : ‚Ñù) ^ 3 + 1) := by
              have h‚Çâ : Finset.Icc (2 : ‚Ñ§) K = Finset.Icc 2 (K.toNat) := by
                have h‚ÇÅ‚ÇÄ : K ‚â• 0 := by linarith
                have h‚ÇÅ‚ÇÅ : K.toNat = K.natAbs := by simp [Int.toNat_of_nonneg h‚ÇÅ‚ÇÄ]
                have h‚ÇÅ‚ÇÇ : K.natAbs = K.toNat := by simp [Int.toNat_of_nonneg h‚ÇÅ‚ÇÄ]
                have h‚ÇÅ‚ÇÉ : Finset.Icc (2 : ‚Ñ§) K = Finset.Icc 2 (K.toNat) := by
                  apply Finset.ext
                  intro n
                  simp [Finset.mem_Icc]
                  <;>
                  (try omega) <;>
                  (try {
                    cases' le_total 0 n with hn hn <;>
                    cases' le_total 0 K with hK hK <;>
                    simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero,
                      Int.ofNat_succ, Int.emod_eq_of_lt] <;>
                    (try omega) <;>
                    (try {
                      norm_num at * <;>
                      omega
                    }) <;>
                    (try {
                      linarith
                    }) <;>
                    (try {
                      ring_nf at *
                      <;>
                      omega
                    })
                  })
                  <;>
                  (try omega)
                exact h‚ÇÅ‚ÇÉ
              rw [h‚Çâ]
              <;>
              simp [Finset.prod_eq_multiset_prod, Int.toNat_of_nonneg (by linarith : (0 : ‚Ñ§) ‚â§ K)]
              <;>
              norm_cast
              <;>
              simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero,
                Int.ofNat_succ, Int.emod_eq_of_lt]
              <;>
              (try omega)
              <;>
              (try {
                norm_num at * <;>
                omega
              })
              <;>
              (try {
                linarith
              })
              <;>
              (try {
                ring_nf at *
                <;>
                omega
              })
            rw [h‚Çà]
            have h‚Çâ : ‚àè n in Finset.Icc 2 (K.toNat), ((n : ‚Ñù) ^ 3 - 1) / ((n : ‚Ñù) ^ 3 + 1) = (2 : ‚Ñù) * (K.toNat ^ 2 + K.toNat + 1) / (3 * (K.toNat : ‚Ñù) * (K.toNat + 1)) := by
              have h‚ÇÅ‚ÇÄ : ‚àè n in Finset.Icc 2 (K.toNat), ((n : ‚Ñù) ^ 3 - 1) / ((n : ‚Ñù) ^ 3 + 1) = (2 : ‚Ñù) * (K.toNat ^ 2 + K.toNat + 1) / (3 * (K.toNat : ‚Ñù) * (K.toNat + 1)) := by
                have h‚ÇÅ‚ÇÅ := h‚ÇÖ (K.toNat)
                simpa using h‚ÇÅ‚ÇÅ
              exact h‚ÇÅ‚ÇÄ
            rw [h‚Çâ]
            have h‚ÇÅ‚ÇÄ : (K.toNat : ‚Ñù) = (K : ‚Ñù) := by
              norm_cast
              <;>
              simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero,
                Int.ofNat_succ, Int.emod_eq_of_lt]
              <;>
              (try omega)
              <;>
              (try {
                norm_num at * <;>
                omega
              })
              <;>
              (try {
                linarith
              })
              <;>
              (try {
                ring_nf at *
                <;>
                omega
              })
            rw [h‚ÇÅ‚ÇÄ]
            <;>
            ring_nf at *
            <;>
            field_simp at *
            <;>
            ring_nf at *
            <;>
            norm_cast at *
            <;>
            simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero,
              Int.ofNat_succ, Int.emod_eq_of_lt]
            <;>
            (try omega)
            <;>
            (try {
              norm_num at * <;>
              omega
            })
            <;>
            (try {
              linarith
            })
            <;>
            (try {
              ring_nf at *
              <;>
              omega
            })
          exact h‚Çá
        have h‚ÇÖ : ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by
          have h‚ÇÜ := h‚ÇÑ N hN
          exact h‚ÇÜ
        exact h‚ÇÖ
      have h‚ÇÉ : ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by
        have h‚ÇÑ := h‚ÇÉ N hN
        exact h‚ÇÑ
      exact h‚ÇÉ
    exact h‚ÇÇ
    <;>
    (try
      {
        simp_all
      })
    <;>
    (try
      {
        field_simp
        <;>
        ring_nf
        <;>
        norm_cast
        <;>
        simp_all [Int.toNat_of_nonneg, Int.toNat_of_nonpos, Int.ofNat_le, Int.ofNat_lt, Int.ofNat_zero, Int.ofNat_succ, Int.emod_eq_of_lt]
        <;>
        (try omega)
        <;>
        (try
          {
            norm_num at * <;>
            omega
          })
        <;>
        (try
          {
            linarith
          })
        <;>
        (try
          {
            ring_nf at *
            <;>
            omega
          })
      })
  
  have h_main_limit : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by 
    have h‚ÇÅ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
      have h‚ÇÇ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
        -- Establish the limit of the sequence as N ‚Üí ‚àû using the properties of polynomials and rational functions.
        have h‚ÇÉ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
          -- Use the fact that the numerator is a cubic polynomial and the denominator is a cubic polynomial to apply the limit properties.
          have h‚ÇÑ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
            -- Simplify the expression to show that it approaches 2/3 as N ‚Üí ‚àû.
            have h‚ÇÖ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
              -- Use the limit properties to evaluate the limit.
              have h‚ÇÜ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                -- Use the limit properties to evaluate the limit.
                have h‚Çá : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                  -- Use the limit properties to evaluate the limit.
                  have h‚Çà : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                    -- Use the properties of limits to evaluate the limit.
                    have h‚Çâ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                      -- Use the properties of limits to evaluate the limit.
                      have h‚ÇÅ‚ÇÄ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                        -- Use the properties of limits to evaluate the limit.
                        have h‚ÇÅ‚ÇÅ : (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) = (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) := rfl
                        rw [h‚ÇÅ‚ÇÅ]
                        -- Use the properties of limits to evaluate the limit.
                        have h‚ÇÅ‚ÇÇ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                          -- Use the properties of limits to evaluate the limit.
                          have h‚ÇÅ‚ÇÉ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                            -- Use the properties of limits to evaluate the limit.
                            have h‚ÇÅ‚ÇÑ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                              -- Use the properties of limits to evaluate the limit.
                              have h‚ÇÅ‚ÇÖ : Tendsto (fun (N : ‚Ñ§) => (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1))) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
                                -- Use the properties of limits to evaluate the limit.
                                convert Tendsto.const_mul (2 / 3 : ‚Ñù) (tendsto_const_nhds : Tendsto (fun (N : ‚Ñ§) => (1 : ‚Ñù)) atTop (ùìù 1)) using 1
                                <;>
                                simp [mul_comm]
                                <;>
                                field_simp
                                <;>
                                ring_nf
                                <;>
                                norm_num
                                <;>
                                simp_all [mul_comm]
                                <;>
                                norm_num
                                <;>
                                simp_all [mul_comm]
                                <;>
                                norm_num
                                <;>
                                linarith
                              exact h‚ÇÅ‚ÇÖ
                            exact h‚ÇÅ‚ÇÑ
                          exact h‚ÇÅ‚ÇÉ
                        exact h‚ÇÅ‚ÇÇ
                      exact h‚ÇÅ‚ÇÄ
                    exact h‚Çâ
                  exact h‚Çà
                exact h‚Çá
              exact h‚ÇÜ
            exact h‚ÇÖ
          exact h‚ÇÑ
        exact h‚ÇÉ
      exact h‚ÇÇ
    exact h‚ÇÅ
  
  have h_final : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù )) := by
    have h‚ÇÇ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) := by
      have h‚ÇÉ : ‚àÄ·∂† (N : ‚Ñ§) in atTop, ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1) = (2 : ‚Ñù) * (N ^ 2 + N + 1) / (3 * N * (N + 1)) := by
        filter_upwards [eventually_ge_atTop (2 : ‚Ñ§)] with N hN
        exact h_main N hN
      have h‚ÇÑ : Tendsto (fun N ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3) : ‚Ñù)) := by
        have h‚ÇÖ : Tendsto (fun (N : ‚Ñ§) ‚Ü¶ ‚àè n in Finset.Icc (2 : ‚Ñ§) N, ((n : ‚Ñù) ^ 3 - 1) / (n ^ 3 + 1)) atTop (ùìù ((2 / 3 : ‚Ñù))) := by
          apply Tendsto.congr' _ h_main_limit
          apply h‚ÇÉ.mono
          intro N hN
          rw [hN]
        exact h‚ÇÖ
      exact h‚ÇÑ
    exact h‚ÇÇ
  
  exact h_final