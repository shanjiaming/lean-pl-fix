import Mathlib

open Metric Set EuclideanGeometry Filter Topology

/--
A closed subset $S$ of $\mathbb{R}^2$ lies in $a < x < b$. Show that its projection on the y-axis is closed.
-/
theorem putnam_1970_b3
(S : Set (‚Ñù √ó ‚Ñù))
(a b : ‚Ñù)
(hab : a < b)
(hS : ‚àÄ s ‚àà S, s.1 ‚àà Ioo a b)
(hSclosed : IsClosed S)
: IsClosed {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} := by
  have h_main : IsClosed {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} := by
    -- To show that the set {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} is closed, we verify that it contains all its limit points.
    have h‚ÇÅ : IsClosed (Prod.snd '' S) := by
      -- Use the fact that S is closed and the second projection is a closed map when restricted to S.
      have h‚ÇÇ : IsSeqClosed S := by
        -- S is sequentially closed because it is closed in the metric space ‚Ñù √ó ‚Ñù.
        exact hSclosed.isSeqClosed
      -- We need to show that the image of S under the second projection is closed.
      have h‚ÇÉ : IsSeqClosed (Prod.snd '' S) := by
        -- Consider a sequence (y‚Çô) in Prod.snd '' S that converges to y.
        intro y hy
        -- Extract the sequence (y‚Çô) from the hypothesis hy.
        rcases hy with ‚ü®f, hf, rfl‚ü©
        -- For each n, there exists an x‚Çô such that (x‚Çô, y‚Çô) ‚àà S.
        -- Since (x‚Çô) is bounded, by Bolzano-Weierstrass, it has a convergent subsequence.
        have h‚ÇÑ : ‚àÄ n, ‚àÉ x : ‚Ñù, (x, f n) ‚àà S := by
          intro n
          have h‚ÇÖ : f n ‚àà Prod.snd '' S := by simpa using hf n
          rcases h‚ÇÖ with ‚ü®‚ü®x, y‚ü©, h‚ÇÖ, rfl‚ü©
          exact ‚ü®x, h‚ÇÖ‚ü©
        -- Choose x‚Çô using the axiom of choice.
        choose x hx using h‚ÇÑ
        -- The sequence (x‚Çô) is bounded by a < x‚Çô < b.
        have h‚ÇÖ : ‚àÄ n, a < x n ‚àß x n < b := by
          intro n
          have h‚ÇÜ := hS (‚ü®x n, f n‚ü© : ‚Ñù √ó ‚Ñù) (hx n)
          simp at h‚ÇÜ ‚ä¢
          exact h‚ÇÜ
        -- Extract a convergent subsequence of (x‚Çô).
        have h‚ÇÜ : ‚àÉ (œà : ‚Ñï ‚Üí ‚Ñï) (x‚ÇÄ : ‚Ñù), StrictMono œà ‚àß Tendsto (x ‚àò œà) atTop (ùìù x‚ÇÄ) := by
          -- Use the Bolzano-Weierstrass theorem to find a convergent subsequence.
          have h‚Çá : BddAbove (Set.range x) := by
            use b
            rintro _ ‚ü®n, rfl‚ü©
            exact (h‚ÇÖ n).2.le
          have h‚Çà : BddBelow (Set.range x) := by
            use a
            rintro _ ‚ü®n, rfl‚ü©
            exact (h‚ÇÖ n).1.le
          -- Use the Bolzano-Weierstrass theorem to find a convergent subsequence.
          have h‚Çâ : ‚àÉ (œà : ‚Ñï ‚Üí ‚Ñï) (x‚ÇÄ : ‚Ñù), StrictMono œà ‚àß Tendsto (x ‚àò œà) atTop (ùìù x‚ÇÄ) := by
            -- Use the Bolzano-Weierstrass theorem to find a convergent subsequence.
            have h‚ÇÅ‚ÇÄ : ‚àÉ (œà : ‚Ñï ‚Üí ‚Ñï) (x‚ÇÄ : ‚Ñù), StrictMono œà ‚àß Tendsto (x ‚àò œà) atTop (ùìù x‚ÇÄ) := by
              -- Use the Bolzano-Weierstrass theorem to find a convergent subsequence.
              have h‚ÇÅ‚ÇÅ : ‚àÉ (œà : ‚Ñï ‚Üí ‚Ñï) (x‚ÇÄ : ‚Ñù), StrictMono œà ‚àß Tendsto (x ‚àò œà) atTop (ùìù x‚ÇÄ) := by
                -- Use the Bolzano-Weierstrass theorem to find a convergent subsequence.
                exact?
              exact h‚ÇÅ‚ÇÅ
            exact h‚ÇÅ‚ÇÄ
          exact h‚Çâ
        rcases h‚ÇÜ with ‚ü®œà, x‚ÇÄ, hœà, hœà_tendsto‚ü©
        -- The subsequence (x_{œà(n)}) converges to x‚ÇÄ.
        refine' ‚ü®x‚ÇÄ, _‚ü©
        -- We need to show that (x‚ÇÄ, y) ‚àà S.
        have h‚Çá : Tendsto (fun n ‚Ü¶ (x (œà n), f (œà n))) atTop (ùìù (x‚ÇÄ, y)) := by
          -- Use the fact that (x_{œà(n)}) converges to x‚ÇÄ and (f(œà(n))) converges to y.
          have h‚Çà : Tendsto (fun n ‚Ü¶ f (œà n)) atTop (ùìù y) := by
            -- Use the fact that f(œà(n)) is a subsequence of (y‚Çô).
            have h‚Çâ : Tendsto f atTop (ùìù y) := by assumption
            have h‚ÇÅ‚ÇÄ : Tendsto œà atTop atTop := hœà.tendsto_atTop
            have h‚ÇÅ‚ÇÅ : Tendsto (f ‚àò œà) atTop (ùìù y) := h‚Çâ.comp h‚ÇÅ‚ÇÄ
            simpa using h‚ÇÅ‚ÇÅ
          -- Use the fact that (x_{œà(n)}) converges to x‚ÇÄ and (f(œà(n))) converges to y.
          have h‚Çâ : Tendsto (fun n ‚Ü¶ (x (œà n), f (œà n))) atTop (ùìù (x‚ÇÄ, y)) := by
            -- Use the fact that (x_{œà(n)}) converges to x‚ÇÄ and (f(œà(n))) converges to y.
            have h‚ÇÅ‚ÇÄ : Tendsto (fun n ‚Ü¶ x (œà n)) atTop (ùìù x‚ÇÄ) := hœà_tendsto
            have h‚ÇÅ‚ÇÅ : Tendsto (fun n ‚Ü¶ (x (œà n), f (œà n))) atTop (ùìù (x‚ÇÄ, y)) :=
              h‚ÇÅ‚ÇÄ.prod_mk_nhds h‚Çà
            exact h‚ÇÅ‚ÇÅ
          exact h‚Çâ
        -- Use the fact that S is closed to conclude that (x‚ÇÄ, y) ‚àà S.
        have h‚Çà : (x‚ÇÄ, y) ‚àà S := by
          -- Use the fact that S is closed and (x_{œà(n)}, f(œà(n))) is a sequence in S converging to (x‚ÇÄ, y).
          have h‚Çâ : ‚àÄ n, (x (œà n), f (œà n)) ‚àà S := by
            intro n
            exact hx (œà n)
          have h‚ÇÅ‚ÇÄ : ‚àÄ n, (x (œà n), f (œà n)) ‚àà S := h‚Çâ
          have h‚ÇÅ‚ÇÅ : Tendsto (fun n ‚Ü¶ (x (œà n), f (œà n))) atTop (ùìù (x‚ÇÄ, y)) := h‚Çá
          have h‚ÇÅ‚ÇÇ : (x‚ÇÄ, y) ‚àà S := by
            -- Use the fact that S is closed and (x_{œà(n)}, f(œà(n))) is a sequence in S converging to (x‚ÇÄ, y).
            exact h‚ÇÇ.mem_of_tendsto h‚ÇÅ‚ÇÅ (eventually_of_forall h‚ÇÅ‚ÇÄ)
          exact h‚ÇÅ‚ÇÇ
        -- Since (x‚ÇÄ, y) ‚àà S, we have y ‚àà Prod.snd '' S.
        have h‚Çâ : y ‚àà Prod.snd '' S := by
          use (x‚ÇÄ, y)
          <;> simp_all [Prod.snd]
          <;> aesop
        -- Therefore, y ‚àà Prod.snd '' S.
        exact h‚Çâ
      -- Therefore, Prod.snd '' S is closed.
      have h‚ÇÑ : IsClosed (Prod.snd '' S) := by
        exact isClosed_iff_isSeqClosed.mpr h‚ÇÉ
      exact h‚ÇÑ
    -- The set {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} is exactly the image of S under the second projection.
    have h‚ÇÇ : {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} = Prod.snd '' S := by
      ext y
      constructor
      ¬∑ -- If y is in {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S}, then y is in Prod.snd '' S.
        rintro ‚ü®x, hx‚ü©
        exact ‚ü®‚ü®x, y‚ü©, hx, rfl‚ü©
      ¬∑ -- If y is in Prod.snd '' S, then y is in {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S}.
        rintro ‚ü®‚ü®x, y'‚ü©, hx, rfl‚ü©
        exact ‚ü®x, hx‚ü©
    -- Substitute the set {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} with Prod.snd '' S.
    rw [h‚ÇÇ]
    -- Therefore, {y | ‚àÉ x : ‚Ñù, ‚ü®x,y‚ü© ‚àà S} is closed.
    exact h‚ÇÅ
  exact h_main