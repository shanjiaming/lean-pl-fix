import Mathlib

open Filter Topology Metric

-- ((Real.sqrt 2) / 2) * Real.pi * Real.log 2
/--
Let
\[
I(R) = \iint_{x^2+y^2 \leq R^2} \left( \frac{1+2x^2}{1+x^4+6x^2y^2+y^4} - \frac{1+y^2}{2+x^4+y^4} \right)\,dx\,dy.
\]
Find
\[
\lim_{R \to \infty} I(R),
\]
or show that this limit does not exist.
-/
theorem putnam_2021_a4
  (S : ‚Ñù ‚Üí Set (EuclideanSpace ‚Ñù (Fin 2)))
  (hS : S = fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R)
  (I : ‚Ñù ‚Üí ‚Ñù)
  (hI : I = fun R => ‚à´ p in S R,
    (1 + 2*(p 0)^2)/(1 + (p 0)^4 + 6*(p 0)^2*(p 1)^2 + (p 1)^4) - (1 + (p 1)^2)/(2 + (p 0)^4 + (p 1)^4)) :
  Tendsto I atTop (ùìù ((((Real.sqrt 2) / 2) * Real.pi * Real.log 2) : ‚Ñù )) := by
  have h‚ÇÄ : Tendsto I atTop (ùìù (((Real.sqrt 2) / 2) * Real.pi * Real.log 2)) := by
    rw [hI]
    have h‚ÇÅ : ‚àÄ R : ‚Ñù, (‚à´ (p : EuclideanSpace ‚Ñù (Fin 2)) in (fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R) R,
        ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4))) = 0 := by
      intro R
      have h‚ÇÇ : (‚à´ (p : EuclideanSpace ‚Ñù (Fin 2)) in (fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R) R,
        ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4))) = 0 := by
        -- Use the fact that the integrand is odd with respect to the origin
        have h‚ÇÉ : (‚à´ (p : EuclideanSpace ‚Ñù (Fin 2)) in (fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R) R,
          ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4))) = 0 := by
          -- Use the fact that the integrand is odd with respect to the origin
          have h‚ÇÑ : (fun p : EuclideanSpace ‚Ñù (Fin 2) => ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4))) = (fun p : EuclideanSpace ‚Ñù (Fin 2) => (0 : ‚Ñù)) := by
            funext p
            have h‚ÇÖ : ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4)) = 0 := by
              -- Prove that the integrand is zero
              have h‚ÇÜ : (1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4) = 0 := by
                -- Assume p is in the ball and derive a contradiction
                by_cases h‚Çá : (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4 : ‚Ñù) = 0
                ¬∑ have h‚Çà : (p 0 : ‚Ñù) = 0 := by
                    nlinarith [sq_nonneg (p 0), sq_nonneg (p 1), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - (p 1 : ‚Ñù) ^ 2)]
                  have h‚Çâ : (p 1 : ‚Ñù) = 0 := by
                    nlinarith [sq_nonneg (p 0), sq_nonneg (p 1), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - (p 1 : ‚Ñù) ^ 2)]
                  simp_all [h‚Çà, h‚Çâ]
                  <;> ring_nf
                  <;> norm_num
                ¬∑ by_cases h‚Çà : (2 + (p 0) ^ 4 + (p 1) ^ 4 : ‚Ñù) = 0
                  ¬∑ have h‚Çâ : (p 0 : ‚Ñù) = 0 := by
                      nlinarith [sq_nonneg (p 0), sq_nonneg (p 1), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - (p 1 : ‚Ñù) ^ 2)]
                    have h‚ÇÅ‚ÇÄ : (p 1 : ‚Ñù) = 0 := by
                      nlinarith [sq_nonneg (p 0), sq_nonneg (p 1), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - (p 1 : ‚Ñù) ^ 2)]
                    simp_all [h‚Çâ, h‚ÇÅ‚ÇÄ]
                    <;> ring_nf
                    <;> norm_num
                  ¬∑ -- Simplify the expression
                    field_simp at h‚Çá h‚Çà ‚ä¢
                    <;> ring_nf at h‚Çá h‚Çà ‚ä¢
                    <;> nlinarith [sq_nonneg (p 0), sq_nonneg (p 1), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - (p 1 : ‚Ñù) ^ 2),
                      sq_nonneg ((p 0 : ‚Ñù) ^ 2 + (p 1 : ‚Ñù) ^ 2), sq_nonneg ((p 0 : ‚Ñù) ^ 2 - 1),
                      sq_nonneg ((p 1 : ‚Ñù) ^ 2 - 1)]
              exact h‚ÇÜ
            exact h‚ÇÖ
          rw [h‚ÇÑ]
          <;> simp [integral_const]
          <;> ring_nf
          <;> norm_num
        exact h‚ÇÉ
      exact h‚ÇÇ
    have h‚ÇÇ : Tendsto (fun R => (‚à´ (p : EuclideanSpace ‚Ñù (Fin 2)) in (fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R) R,
        ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4)))) atTop (ùìù 0) := by
      -- Use the fact that the integrand is odd with respect to the origin
      have h‚ÇÉ : (fun R => (‚à´ (p : EuclideanSpace ‚Ñù (Fin 2)) in (fun R => ball (0 : EuclideanSpace ‚Ñù (Fin 2)) R) R,
        ((1 + 2 * (p 0) ^ 2) / (1 + (p 0) ^ 4 + 6 * (p 0) ^ 2 * (p 1) ^ 2 + (p 1) ^ 4) - (1 + (p 1) ^ 2) / (2 + (p 0) ^ 4 + (p 1) ^ 4)))) = fun _ => 0 := by
        funext R
        rw [h‚ÇÅ R]
      rw [h‚ÇÉ]
      simpa using tendsto_const_nhds
    have h‚ÇÉ : ((Real.sqrt 2) / 2 * Real.pi * Real.log 2 : ‚Ñù) = 0 := by
      -- Use the fact that the integrand is odd with respect to the origin
      have h‚ÇÑ : Real.sqrt 2 > 0 := Real.sqrt_pos.mpr (by norm_num)
      have h‚ÇÖ : Real.pi > 0 := Real.pi_pos
      have h‚ÇÜ : Real.log 2 > 0 := Real.log_pos (by norm_num)
      have h‚Çá : Real.sqrt 2 / 2 * Real.pi * Real.log 2 > 0 := by positivity
      have h‚Çà : Real.sqrt 2 / 2 * Real.pi * Real.log 2 = 0 := by
        -- Use the fact that the integrand is odd with respect to the origin
        nlinarith [Real.pi_gt_three, Real.log_le_sub_one_of_pos (by norm_num : (0 : ‚Ñù) < 2),
          Real.sqrt_nonneg 2, Real.sq_sqrt (show 0 ‚â§ 2 by norm_num)]
      exact h‚Çà
    simpa [h‚ÇÉ] using h‚ÇÇ
  simpa using h‚ÇÄ