{
  "dataset": "minif2f",
  "total_problems": 30,
  "constraint_violations": 3,
  "constraint_satisfaction_rate": 90.0,
  "successful_problems": 27,
  "complete_solve_success_problems": 14,
  "complete_solve_success_rate": 46.666666666666664,
  "total_original_tactics_tests": 384,
  "successful_original_tactics_tests": 358,
  "original_tactics_success_rate": 93.22916666666666,
  "total_proof_state_tests": 0,
  "total_verifications": 27,
  "average_processing_time": 316.2639251,
  "timestamp": "2025-06-20T03:44:29.623082",
  "results": [
    {
      "problem_id": "aime_1990_p4",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "simpa using h\u2082"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "simpa using h\u2081"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "simpa using h\u2083"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2085, h\u2086, h\u2087, sub_eq_zero, add_eq_zero_iff_eq_neg] at h\u2088\nnlinarith [sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2086), sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2085),\n  sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2087)]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2089\u2081"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith [sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2086), sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2085),\n  sq_pos_of_ne_zero (sub_ne_zero.mpr h\u2087)]"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2080"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply eq_zero_or_eq_zero_of_mul_eq_zero h\u2085\u2083"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2085\u2084 with\n| inl h\u2085\u2084 =>\n  have h\u2085\u2085 : x = 13 := by linarith\n  exact Or.inl h\u2085\u2085\n| inr h\u2085\u2084 =>\n  have h\u2085\u2085 : x = -3 := by linarith\n  exact Or.inr h\u2085\u2085"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2085\u2081 with\n| inl h\u2085\u2081 => exact h\u2085\u2081\n| inr h\u2085\u2081 =>\n  have h\u2085\u2082 : x > 0 := h\u2080\n  have h\u2085\u2083 : x = -3 := h\u2085\u2081\n  linarith"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h_final"
        }
      },
      "successful_tactics": {
        "hole_1": "simpa",
        "hole_2": "simpa",
        "hole_3": "simpa",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_14": "nlinarith",
        "hole_15": "linarith",
        "hole_16": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "simpa",
        "hole_2": "simpa",
        "hole_3": "simpa",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_14": "nlinarith",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_4": "admit",
        "hole_13": "admit",
        "hole_10": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 238.82898,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622948"
    },
    {
      "problem_id": "algebra_absxm1pabsxpabsxp1eqxp2_0leqxleq1",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg (by linarith)]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg (by linarith)]"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg (by linarith)]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg (by linarith)]"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg (by linarith)]"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg (by linarith)]"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg (by linarith)]"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg (by linarith)]"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg (by linarith)]"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact \u27e8h\u2081, h\u2082\u27e9"
        },
        "hole_21": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083"
        }
      },
      "successful_tactics": {
        "hole_1": "linarith",
        "hole_3": "norm_num ; linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_9": "norm_num ; linarith",
        "hole_10": "norm_num ; linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "norm_num ; linarith",
        "hole_16": "simpa",
        "hole_17": "norm_num ; linarith",
        "hole_18": "linarith",
        "hole_19": "linarith",
        "hole_20": "norm_cast",
        "hole_21": "simpa"
      },
      "tactic_mapping": {
        "hole_1": "linarith",
        "hole_3": "norm_num ; linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_9": "norm_num ; linarith",
        "hole_10": "norm_num ; linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "norm_num ; linarith",
        "hole_16": "simpa",
        "hole_17": "norm_num ; linarith",
        "hole_18": "linarith",
        "hole_19": "linarith",
        "hole_20": "norm_cast",
        "hole_21": "simpa",
        "hole_2": "admit",
        "hole_4": "admit",
        "hole_8": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 335.904975,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622959"
    },
    {
      "problem_id": "amc12_2000_p1",
      "dataset": "minif2f",
      "verification_count": 999,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": false,
      "filled_verification_pass": false,
      "complete_solve_success": false,
      "original_tactics_test": {},
      "successful_tactics": {},
      "tactic_mapping": {},
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 0.0,
      "constraint_satisfied": false,
      "timestamp": "2025-06-20T03:44:29.622961"
    },
    {
      "problem_id": "amc12_2000_p12",
      "dataset": "minif2f",
      "verification_count": 999,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": false,
      "filled_verification_pass": false,
      "complete_solve_success": false,
      "original_tactics_test": {},
      "successful_tactics": {},
      "tactic_mapping": {},
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 0.0,
      "constraint_satisfied": false,
      "timestamp": "2025-06-20T03:44:29.622963"
    },
    {
      "problem_id": "amc12a_2002_p6",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "use n + 1\nconstructor\nomega\nuse 0\nsimp [Nat.mul_zero, Nat.add_zero]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081"
        }
      },
      "successful_tactics": {
        "hole_2": "simpa"
      },
      "tactic_mapping": {
        "hole_2": "simpa",
        "hole_1": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 109.279738,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622965"
    },
    {
      "problem_id": "amc12a_2021_p18",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2082\u2082"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2082\u2085"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "decide"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num at h\u2083\u2083 \u22a2\nsimp_all [h\u2083\u2083]"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2082"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084\u2082]\nnorm_num [h\u2083]"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "decide"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num at h\u2085\u2083 \u22a2\nsimp_all [h\u2085\u2083]"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085\u2082"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086\u2084, h\u2084, h\u2085]\nnorm_num"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086]\nnorm_num"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087"
        }
      },
      "successful_tactics": {
        "hole_1": "linarith",
        "hole_2": "norm_num",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "norm_num",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "norm_num",
        "hole_10": "linarith",
        "hole_11": "norm_num",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "norm_num",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_18": "linarith",
        "hole_19": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "linarith",
        "hole_2": "norm_num",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "norm_num",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "norm_num",
        "hole_10": "linarith",
        "hole_11": "norm_num",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "norm_num",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_18": "linarith",
        "hole_19": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 295.485565,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622969"
    },
    {
      "problem_id": "amc12a_2021_p19",
      "dataset": "minif2f",
      "verification_count": 999,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": false,
      "filled_verification_pass": false,
      "complete_solve_success": false,
      "original_tactics_test": {},
      "successful_tactics": {},
      "tactic_mapping": {},
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 0.0,
      "constraint_satisfied": false,
      "timestamp": "2025-06-20T03:44:29.622971"
    },
    {
      "problem_id": "amc12a_2021_p3",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply Nat.div_mul_cancel h\u2081"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2081\u2083"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2081\u2082"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2082] at h\u2083\u2081\nlinarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084\u2082] at h\u2080\nring_nf at h\u2080 \u22a2\nomega"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2084\u2082"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2083, h\u2084]"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085, h\u2084]\nnorm_num"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086"
        }
      },
      "successful_tactics": {
        "hole_1": "omega",
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "omega",
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 188.030054,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622973"
    },
    {
      "problem_id": "amc12a_2021_p9",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [Finset.prod_range_succ, pow_succ, Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib, Finset.prod_range_succ,\n  pow_succ, Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2080"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 48.997985,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622975"
    },
    {
      "problem_id": "mathd_numbertheory_127",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rfl"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h_sum_mod"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 48.38977,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622977"
    },
    {
      "problem_id": "mathd_numbertheory_207",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2082, h\u2083]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084]"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085]"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num",
        "hole_6": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num",
        "hole_6": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 107.162287,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622979"
    },
    {
      "problem_id": "mathd_numbertheory_237",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rfl"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply h\u2081"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 64.003724,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622981"
    },
    {
      "problem_id": "mathd_numbertheory_239",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [Finset.sum_Icc_succ_top, Nat.div_eq_of_lt]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h_sum]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply h_final"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_cast",
        "hole_2": "omega",
        "hole_3": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "norm_cast",
        "hole_2": "omega",
        "hole_3": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 72.175566,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622982"
    },
    {
      "problem_id": "mathd_numbertheory_247",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084, h\u2083]"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_7": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 10",
          "original_tactic": "rcases h\u2088 with (h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088 | h\u2088)\ntry omega"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081"
        }
      },
      "successful_tactics": {
        "hole_1": "omega",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "linarith",
        "hole_6": "omega",
        "hole_7": "omega",
        "hole_8": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "omega",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "linarith",
        "hole_6": "omega",
        "hole_7": "omega",
        "hole_8": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 138.407609,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622984"
    },
    {
      "problem_id": "mathd_numbertheory_277",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "by_contra h\nrw [h] at h\u2081 h\u2080\nsimp [Nat.lcm] at h\u2081 h\u2080"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "by_contra h\nrw [h] at h\u2081 h\u2080\nsimp [Nat.lcm] at h\u2081 h\u2080"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Nat.gcd_mul_lcm]"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084\u2081]\nrw [h\u2080, h\u2081]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2080]"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact Nat.dvd_trans h\u2085\u2081 (Nat.gcd_dvd_left m n)"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2080]"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact Nat.dvd_trans h\u2086\u2081 (Nat.gcd_dvd_right m n)"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_14": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 5",
          "original_tactic": "rcases h\u2087\u2086 with (h\u2087\u2086 | h\u2087\u2086 | h\u2087\u2086 | h\u2087\u2086 | h\u2087\u2086 | h\u2087\u2086)\ntry omega"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_17": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 5",
          "original_tactic": "rcases h\u2087\u2087 with (h\u2087\u2087 | h\u2087\u2087 | h\u2087\u2087 | h\u2087\u2087 | h\u2087\u2087 | h\u2087\u2087)\ntry omega"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_19": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 52",
          "original_tactic": "interval_cases m\nnorm_num at h\u2084 \u22a2\ntry omega"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_21": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 52",
          "original_tactic": "interval_cases n\nnorm_num at h\u2084 \u22a2\ntry omega"
        },
        "hole_22": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 15",
          "original_tactic": "rcases h\u2087\u2086 with (rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl)\nrcases h\u2087\u2087 with (rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl | rfl)\nnorm_num at h\u2080 h\u2081 h\u2084 \u22a2\ntry omega"
        },
        "hole_23": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087"
        }
      },
      "successful_tactics": {
        "hole_4": "nlinarith",
        "hole_5": "omega",
        "hole_7": "omega",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "nlinarith",
        "hole_14": "nlinarith",
        "hole_15": "linarith",
        "hole_16": "nlinarith",
        "hole_17": "nlinarith",
        "hole_18": "linarith",
        "hole_19": "omega",
        "hole_20": "linarith",
        "hole_21": "omega",
        "hole_23": "linarith"
      },
      "tactic_mapping": {
        "hole_4": "nlinarith",
        "hole_5": "omega",
        "hole_7": "omega",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "nlinarith",
        "hole_14": "nlinarith",
        "hole_15": "linarith",
        "hole_16": "nlinarith",
        "hole_17": "nlinarith",
        "hole_18": "linarith",
        "hole_19": "omega",
        "hole_20": "linarith",
        "hole_21": "omega",
        "hole_23": "linarith",
        "hole_1": "admit",
        "hole_22": "admit",
        "hole_2": "admit",
        "hole_6": "admit",
        "hole_8": "admit",
        "hole_3": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 654.490562,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622987"
    },
    {
      "problem_id": "mathd_numbertheory_293",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 9",
          "original_tactic": "interval_cases n\nnorm_num at h\u2084 \u22a2"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2082"
        }
      },
      "successful_tactics": {
        "hole_1": "omega",
        "hole_2": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "omega",
        "hole_2": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 49.152118,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622989"
    },
    {
      "problem_id": "mathd_numbertheory_3",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ,\n  Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ, Finset.sum_range_succ,\n  Finset.sum_range_succ, Nat.pow_succ, Nat.mul_mod, Nat.add_mod, Nat.mod_mod]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h_sum"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 49.283238,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622991"
    },
    {
      "problem_id": "mathd_numbertheory_517",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2081, h\u2082, h\u2083, Nat.mul_mod, Nat.add_mod, Nat.mod_mod, Nat.mod_eq_of_lt]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply h\u2084"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 92.109216,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622993"
    },
    {
      "problem_id": "mathd_numbertheory_559",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085\u2081"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [\u2190 h\u2082]"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_6": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 9",
          "original_tactic": "interval_cases x % 10\nnorm_num at h\u2084 \u22a2"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_9": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 13",
          "original_tactic": "interval_cases x\nnorm_num at h\u2085 h\u2086 h\u2088 \u22a2"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2084"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "omega",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "omega",
        "hole_7": "omega",
        "hole_8": "linarith",
        "hole_9": "omega",
        "hole_10": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "omega",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "omega",
        "hole_7": "omega",
        "hole_8": "linarith",
        "hole_9": "omega",
        "hole_10": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 174.271405,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622995"
    },
    {
      "problem_id": "amc12b_2002_p7",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2082, h\u2081]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2084\u2081"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085\u2082, h\u2085\u2083] at h\u2085\u2081\nring_nf at h\u2085\u2081 \u22a2\ntry omega"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2088"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2085"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_10": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 6",
          "original_tactic": "interval_cases a\nnorm_num at h\u2085 \u22a2"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081, h\u2086]"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084, h\u2086]"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086, h\u2087, h\u2088]\nnorm_num"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2089"
        }
      },
      "successful_tactics": {
        "hole_1": "linarith",
        "hole_2": "linarith",
        "hole_4": "linarith",
        "hole_5": "nlinarith",
        "hole_6": "nlinarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "nlinarith",
        "hole_14": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "linarith",
        "hole_2": "linarith",
        "hole_4": "linarith",
        "hole_5": "nlinarith",
        "hole_6": "nlinarith",
        "hole_7": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "nlinarith",
        "hole_14": "linarith",
        "hole_3": "admit",
        "hole_10": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 334.667979,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.622998"
    },
    {
      "problem_id": "amc12b_2020_p21",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2082"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2082"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2082"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast at h\u2081\u2080 \u22a2"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.ModEq]\nomega"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2082"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2085"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2082"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086]\nring_nf at *\nnorm_num\nfield_simp at *\nring_nf at *"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast at h\u2081\u2080 \u22a2"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2081\u2081"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2087"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact Int.floor_le (Real.sqrt n)"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_21": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2080"
        },
        "hole_22": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith [Real.sq_sqrt (by positivity : 0 \u2264 (n : \u211d)), h\u2089]"
        },
        "hole_23": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2081"
        },
        "hole_24": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact_mod_cast h\u2087"
        },
        "hole_25": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_26": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith [Int.floor_le (Real.sqrt n), Int.lt_floor_add_one (Real.sqrt n)]"
        },
        "hole_27": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_28": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2081"
        },
        "hole_29": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith [Real.sq_sqrt (by positivity : 0 \u2264 (n : \u211d)), h\u2081\u2080]"
        },
        "hole_30": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2082"
        },
        "hole_31": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast at h\u2088 \u22a2"
        },
        "hole_32": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast at h\u2089 \u22a2"
        },
        "hole_33": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_34": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_35": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_36": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_37": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_38": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_39": {
          "success": true,
          "error_message": null,
          "original_tactic": "tauto"
        },
        "hole_40": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_41": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_42": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_43": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_44": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_45": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Int.floor_eq_iff]\nconstructor\nnorm_num [Real.le_sqrt, Real.sqrt_lt]\nnorm_num [Real.le_sqrt, Real.sqrt_lt]"
        },
        "hole_46": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2082]"
        },
        "hole_47": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h_main]\nnorm_num"
        },
        "hole_48": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h_card"
        }
      },
      "successful_tactics": {
        "hole_1": "linarith",
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_8": "simpa",
        "hole_10": "linarith",
        "hole_11": "omega",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_15": "linarith",
        "hole_17": "linarith",
        "hole_18": "norm_cast",
        "hole_20": "linarith",
        "hole_21": "linarith",
        "hole_23": "linarith",
        "hole_24": "norm_cast",
        "hole_25": "linarith",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_30": "linarith",
        "hole_33": "linarith",
        "hole_34": "nlinarith",
        "hole_35": "linarith",
        "hole_36": "omega",
        "hole_37": "linarith",
        "hole_38": "norm_num",
        "hole_39": "omega",
        "hole_40": "norm_num",
        "hole_45": "norm_num",
        "hole_46": "norm_num",
        "hole_48": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "linarith",
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_8": "simpa",
        "hole_10": "linarith",
        "hole_11": "omega",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_15": "linarith",
        "hole_17": "linarith",
        "hole_18": "norm_cast",
        "hole_20": "linarith",
        "hole_21": "linarith",
        "hole_23": "linarith",
        "hole_24": "norm_cast",
        "hole_25": "linarith",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_30": "linarith",
        "hole_33": "linarith",
        "hole_34": "nlinarith",
        "hole_35": "linarith",
        "hole_36": "omega",
        "hole_37": "linarith",
        "hole_38": "norm_num",
        "hole_39": "omega",
        "hole_40": "norm_num",
        "hole_45": "norm_num",
        "hole_46": "norm_num",
        "hole_48": "linarith",
        "hole_7": "admit",
        "hole_32": "admit",
        "hole_14": "admit",
        "hole_22": "admit",
        "hole_41": "admit",
        "hole_47": "admit",
        "hole_26": "admit",
        "hole_43": "admit",
        "hole_44": "admit",
        "hole_29": "admit",
        "hole_9": "admit",
        "hole_16": "admit",
        "hole_42": "admit",
        "hole_6": "admit",
        "hole_19": "admit",
        "hole_31": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 1673.72977,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623002"
    },
    {
      "problem_id": "mathd_numbertheory_711",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Nat.gcd_mul_lcm]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081, h\u2082] at h\u2083\u2081\nnorm_num at h\u2083\u2081 \u22a2\nnlinarith"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2082] at h\u2084\u2081\nexact h\u2084\u2081"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081] at h\u2085\u2081\nexact h\u2085\u2081"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_6": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 111",
          "original_tactic": "interval_cases m\nnorm_num at h\u2086\u2081 h\u2086\u2082 h\u2086\u2083 \u22a2"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2085"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2083] at *"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2083] at *"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2083] at *"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [h\u2083] at *"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2087\u2081]\nnorm_num"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087"
        }
      },
      "successful_tactics": {
        "hole_2": "nlinarith",
        "hole_5": "linarith",
        "hole_7": "omega",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith"
      },
      "tactic_mapping": {
        "hole_2": "nlinarith",
        "hole_5": "linarith",
        "hole_7": "omega",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_1": "admit",
        "hole_3": "admit",
        "hole_4": "admit",
        "hole_6": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 621.295767,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623006"
    },
    {
      "problem_id": "mathd_numbertheory_728",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [Nat.pow_mod, Nat.mod_mod, Nat.mod_eq_of_lt, show 2 \u2264 7 by norm_num]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num [Nat.pow_mod, Nat.mod_mod, Nat.mod_eq_of_lt, show 2 \u2264 7 by norm_num]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2084"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply h\u2083"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "norm_num",
        "hole_5": "norm_num"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 164.837788,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623008"
    },
    {
      "problem_id": "mathd_numbertheory_99",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": true,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "simp [Nat.mul_mod, Nat.add_mod, Nat.mod_mod]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084] at h\u2083\nexact h\u2083"
        },
        "hole_3": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 46",
          "original_tactic": "interval_cases n % 47\nnorm_num at h\u2082 \u22a2"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_2": "linarith",
        "hole_3": "omega",
        "hole_4": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_2": "linarith",
        "hole_3": "omega",
        "hole_4": "linarith"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 154.830328,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623010"
    },
    {
      "problem_id": "numbertheory_aoddbdiv4asqpbsqmod8eq1",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_3": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 7",
          "original_tactic": "rcases this with (h | h | h | h | h | h | h | h)\ntry omega"
        },
        "hole_4": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 3",
          "original_tactic": "rcases h\u2082\u2082 with (h\u2082\u2082 | h\u2082\u2082 | h\u2082\u2082 | h\u2082\u2082)\nomega"
        },
        "hole_5": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 3",
          "original_tactic": "rcases h\u2082\u2081 with (h\u2082\u2081 | h\u2082\u2081 | h\u2082\u2081 | h\u2082\u2081)\ntry simp [h\u2082\u2081, pow_two, Int.mul_emod, Int.add_emod]"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "ring_nf at *\nuse 2 * k ^ 2\nring_nf at *"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2086"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2084"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast at h\u2083\u2086 \u22a2"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2087"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2085"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083\u2083"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "simp [Int.add_emod, Int.emod_emod]"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084\u2081]\nrw [h\u2082, h\u2083]\nnorm_num"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_cast"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085\u2081]\nexact h\u2084"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085"
        }
      },
      "successful_tactics": {
        "hole_1": "omega",
        "hole_2": "omega",
        "hole_3": "omega",
        "hole_4": "omega",
        "hole_9": "omega",
        "hole_10": "omega",
        "hole_11": "omega",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "norm_num",
        "hole_16": "omega",
        "hole_17": "norm_num",
        "hole_18": "linarith",
        "hole_19": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "omega",
        "hole_2": "omega",
        "hole_3": "omega",
        "hole_4": "omega",
        "hole_9": "omega",
        "hole_10": "omega",
        "hole_11": "omega",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "norm_num",
        "hole_16": "omega",
        "hole_17": "norm_num",
        "hole_18": "linarith",
        "hole_19": "linarith",
        "hole_8": "admit",
        "hole_7": "admit",
        "hole_6": "admit",
        "hole_5": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 1546.590657,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623013"
    },
    {
      "problem_id": "numbertheory_fxeq4powxp6powxp9powx_f2powmdvdf2pown",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": true,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2080]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2080]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * k : \u2115) = k + k by ring]\nrw [pow_add]"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * k : \u2115) = k + k by ring]\nrw [pow_add]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * k : \u2115) = k + k by ring]\nrw [pow_add]"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "ring"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "ring"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "ring"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (6 : \u2115) = 2 * 3 by norm_num]\nrw [mul_pow]"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (4 : \u2115) = 2 ^ 2 by norm_num]\nrw [\u2190 pow_mul]"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (9 : \u2115) = 3 ^ 2 by norm_num]\nrw [\u2190 pow_mul]"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * k : \u2115) = k + k by ring]\nrw [pow_add]"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * k : \u2115) = k + k by ring]\nrw [pow_add]"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081\u2084, h\u2081\u2085]\nring_nf"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081\u2083]"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086, h\u2087]\ncases k with\n| zero => norm_num [h\u2080, pow_zero, Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib]\n| succ k =>\n  simp_all [Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib, Nat.add_assoc] <;> ring_nf at * <;> norm_num at * <;>\n    omega"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2081]\nexact\n  \u27e8f k - 2 * 6 ^ k, by\n    cases k with\n    | zero => simp [h\u2080, pow_zero, Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib]\n    | succ k =>\n      simp_all [Nat.mul_sub_left_distrib, Nat.mul_sub_right_distrib, Nat.add_assoc] <;> ring_nf at * <;>\n          norm_num at * <;>\n        omega\u27e9"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [show (2 * 2 ^ (m + t) : \u2115) = 2 ^ (m + t + 1) by\n    ring_nf <;> simp [pow_add, pow_one, mul_add, mul_one, add_mul, one_mul]]"
        },
        "hole_21": {
          "success": true,
          "error_message": null,
          "original_tactic": "ring"
        },
        "hole_22": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086] at h\u2084\nexact dvd_trans ih h\u2084"
        },
        "hole_23": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083 t"
        },
        "hole_24": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_25": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087"
        },
        "hole_26": {
          "success": true,
          "error_message": null,
          "original_tactic": "omega"
        },
        "hole_27": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [ht]"
        },
        "hole_28": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085] at h\u2084\nexact h\u2084"
        },
        "hole_29": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h_final"
        }
      },
      "successful_tactics": {
        "hole_3": "ring",
        "hole_4": "ring",
        "hole_5": "ring",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "omega",
        "hole_9": "linarith",
        "hole_13": "ring",
        "hole_14": "ring",
        "hole_15": "nlinarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_20": "ring",
        "hole_21": "linarith",
        "hole_24": "omega",
        "hole_25": "linarith",
        "hole_26": "linarith",
        "hole_29": "omega"
      },
      "tactic_mapping": {
        "hole_3": "ring",
        "hole_4": "ring",
        "hole_5": "ring",
        "hole_6": "linarith",
        "hole_7": "linarith",
        "hole_8": "omega",
        "hole_9": "linarith",
        "hole_13": "ring",
        "hole_14": "ring",
        "hole_15": "nlinarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_20": "ring",
        "hole_21": "linarith",
        "hole_24": "omega",
        "hole_25": "linarith",
        "hole_26": "linarith",
        "hole_29": "omega",
        "hole_1": "admit",
        "hole_11": "admit",
        "hole_27": "admit",
        "hole_2": "admit",
        "hole_23": "admit",
        "hole_12": "admit",
        "hole_18": "admit",
        "hole_10": "admit",
        "hole_22": "admit",
        "hole_28": "admit",
        "hole_19": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 546.235856,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623016"
    },
    {
      "problem_id": "mathd_algebra_208",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": false,
          "error_message": "Lean error:\ninternal exception #5",
          "original_tactic": "rw [Real.sqrt_eq_iff_sq_eq (by positivity) (by positivity)]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Real.log_rpow (by norm_num : (1000000 : \u211d) > 0)]"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [Real.log_pow]\nnorm_num"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2084]\nring_nf"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "norm_num"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "simpa using h\u2081"
        },
        "hole_9": {
          "success": false,
          "error_message": "Tactic status: Incomplete: contains sorry, goals remain: 0",
          "original_tactic": "rw [show (1000000 : \u211d) ^ ((1 : \u211d) / 3) = (100 : \u211d) by norm_num]"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2085\u2081]"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply Real.log_injOn_pos (Set.mem_Ioi.mpr h\u2082) (Set.mem_Ioi.mpr (by norm_num [h\u2083]))\nsimp_all [Real.log_rpow, Real.log_pow]"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2086]"
        },
        "hole_14": {
          "success": false,
          "error_message": "Lean error:\ntype mismatch, term\n  h_cbrt\nafter simplification has type\n  1000000 ^ 3\u207b\u00b9 = 100 : Prop\nbut is expected to have type\n  1000 - 1000000 ^ 3\u207b\u00b9 = 900 : Prop",
          "original_tactic": "rw [h_sqrt]\nsimpa using h_cbrt"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h_main]"
        }
      },
      "successful_tactics": {
        "hole_1": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "simp",
        "hole_5": "linarith",
        "hole_6": "positivity",
        "hole_7": "norm_num",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "norm_num",
        "hole_3": "norm_num",
        "hole_4": "simp",
        "hole_5": "linarith",
        "hole_6": "positivity",
        "hole_7": "norm_num",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith",
        "hole_12": "admit",
        "hole_2": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 232.889836,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623019"
    },
    {
      "problem_id": "mathd_numbertheory_427",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [h\u2080]\nrw [show (\u2211 k in Nat.divisors 500, k) = 1092\n    by\n    rw [show (500 : \u2115) = 2 ^ 2 * 5 ^ 3 by norm_num]\n    rw [Nat.divisors_mul, Nat.divisors_prime_pow (by decide : Nat.Prime 2),\n        Nat.divisors_prime_pow (by decide : Nat.Prime 5)] <;>\n      rfl]"
        },
        "hole_2": {
          "success": false,
          "error_message": "Lean error:\nmaximum recursion depth has been reached\nuse `set_option maxRecDepth <num>` to increase limit\nuse `set_option diagnostics true` to get diagnostic information",
          "original_tactic": "rw [show (1092 : \u2115) = 2 ^ 2 * 3 * 7 * 13 by norm_num]\nrw [Nat.divisors_mul, Nat.divisors_mul, Nat.divisors_mul]\nnorm_num [Nat.divisors_prime_pow, Finset.sum_filter, Finset.sum_range_succ, Nat.divisors]\nrfl"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2083"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2082"
        }
      },
      "successful_tactics": {
        "hole_1": "simpa",
        "hole_3": "linarith",
        "hole_4": "linarith"
      },
      "tactic_mapping": {
        "hole_1": "simpa",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_2": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 76.19732,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623020"
    },
    {
      "problem_id": "algebra_absapbon1pabsapbleqsumabsaon1pabsa",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": true,
          "error_message": null,
          "original_tactic": "calc\n  abs (a + b) \u2264 abs a + abs b := by exact abs_add a b\n  _ = abs a + abs b := by rfl"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [div_le_div_iff (by positivity) (by positivity)]\nnlinarith [mul_nonneg h\u2083 (sub_nonneg.mpr h\u2084), mul_nonneg h\u2085 h\u2083, mul_nonneg h\u2085 (sub_nonneg.mpr h\u2084)]"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2080"
        },
        "hole_9": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_12": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_18": {
          "success": false,
          "error_message": "Tactic status: Incomplete: open goals remain, goals remain: 1",
          "original_tactic": "apply h\u2082\ntry norm_num <;> linarith"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2088"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2082"
        },
        "hole_21": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2081"
        },
        "hole_22": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_23": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_24": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_25": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_26": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2088, h\u2089, h\u2081\u2080]"
        },
        "hole_27": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_28": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_29": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_30": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith [h\u2086]"
        },
        "hole_31": {
          "success": false,
          "error_message": "Tactic status: Incomplete: contains sorry, goals remain: 0",
          "original_tactic": "apply div_le_div_of_le_left (by positivity) (by positivity)"
        },
        "hole_32": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2088"
        },
        "hole_33": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_34": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_35": {
          "success": true,
          "error_message": null,
          "original_tactic": "positivity"
        },
        "hole_36": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith [h\u2085]"
        },
        "hole_37": {
          "success": false,
          "error_message": "Tactic status: Incomplete: contains sorry, goals remain: 0",
          "original_tactic": "apply div_le_div_of_le_left (by positivity) (by positivity)"
        },
        "hole_38": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2089"
        },
        "hole_39": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_40": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_41": {
          "success": true,
          "error_message": null,
          "original_tactic": "calc\n  abs (a + b) / (1 + abs (a + b)) \u2264 (abs a + abs b) / (1 + (abs a + abs b)) := h\u2083\n  _ \u2264 abs a / (1 + abs a) + abs b / (1 + abs b) := h\u2084"
        },
        "hole_42": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085"
        }
      },
      "successful_tactics": {
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "norm_num",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_19": "linarith",
        "hole_20": "linarith",
        "hole_21": "linarith",
        "hole_22": "linarith",
        "hole_23": "linarith",
        "hole_24": "linarith",
        "hole_25": "linarith",
        "hole_26": "ring",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_29": "linarith",
        "hole_30": "norm_num",
        "hole_32": "linarith",
        "hole_33": "linarith",
        "hole_34": "linarith",
        "hole_35": "linarith",
        "hole_36": "norm_num",
        "hole_38": "linarith",
        "hole_39": "linarith",
        "hole_40": "linarith",
        "hole_41": "linarith",
        "hole_42": "linarith"
      },
      "tactic_mapping": {
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_4": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_8": "linarith",
        "hole_9": "linarith",
        "hole_10": "linarith",
        "hole_11": "linarith",
        "hole_12": "linarith",
        "hole_13": "linarith",
        "hole_14": "norm_num",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_19": "linarith",
        "hole_20": "linarith",
        "hole_21": "linarith",
        "hole_22": "linarith",
        "hole_23": "linarith",
        "hole_24": "linarith",
        "hole_25": "linarith",
        "hole_26": "ring",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_29": "linarith",
        "hole_30": "norm_num",
        "hole_32": "linarith",
        "hole_33": "linarith",
        "hole_34": "linarith",
        "hole_35": "linarith",
        "hole_36": "norm_num",
        "hole_38": "linarith",
        "hole_39": "linarith",
        "hole_40": "linarith",
        "hole_41": "linarith",
        "hole_42": "linarith",
        "hole_1": "admit",
        "hole_37": "admit",
        "hole_18": "admit",
        "hole_31": "admit",
        "hole_7": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 615.643087,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623026"
    },
    {
      "problem_id": "amc12a_2002_p13",
      "dataset": "minif2f",
      "verification_count": 1,
      "max_verifications": 3,
      "original_verification_pass": false,
      "hole_verification_pass": true,
      "filled_verification_pass": true,
      "complete_solve_success": false,
      "original_tactics_test": {
        "hole_1": {
          "success": false,
          "error_message": "Lean error:\ninternal exception #5",
          "original_tactic": "rw [div_le_iff h\u2085\u2086]"
        },
        "hole_2": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_3": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2085\u2083"
        },
        "hole_4": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg h\u2085]"
        },
        "hole_5": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_6": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_7": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2089] at h\u2087\nnlinarith"
        },
        "hole_8": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2083\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2083)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
        },
        "hole_10": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2081\u2082 with\n| inl h\u2081\u2082 => exact h\u2081\u2082\n| inr h\u2081\u2082 =>\n  have h\u2081\u2083 : a > 0 := h\u2080.1\n  have h\u2081\u2084 : (1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
        },
        "hole_11": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2081"
        },
        "hole_12": {
          "success": false,
          "error_message": "Lean error:\ninternal exception #5",
          "original_tactic": "rw [gt_iff_lt]\nrw [lt_div_iff h\u2086\u2086]"
        },
        "hole_13": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2087"
        },
        "hole_14": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_15": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2081\u2081"
        },
        "hole_16": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2088"
        },
        "hole_17": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2086\u2083"
        },
        "hole_18": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg h\u2086]"
        },
        "hole_19": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_20": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_21": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2081\u2080] at h\u2088 \u22a2\nnlinarith"
        },
        "hole_22": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2084\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2084)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
        },
        "hole_24": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2081\u2083 with\n| inl h\u2081\u2083 => exact h\u2081\u2083\n| inr h\u2081\u2083 =>\n  have h\u2081\u2084 : a > 0 := h\u2080.1\n  have h\u2081\u2085 : (-1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
        },
        "hole_25": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2082"
        },
        "hole_26": {
          "success": false,
          "error_message": "Lean error:\ninternal exception #5",
          "original_tactic": "rw [div_le_iff h\u2087\u2086]"
        },
        "hole_27": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_28": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2087\u2083"
        },
        "hole_29": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_nonneg h\u2087]"
        },
        "hole_30": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_31": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_32": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2081\u2081] at h\u2089\nnlinarith"
        },
        "hole_33": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2085\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2085)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
        },
        "hole_35": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2081\u2084 with\n| inl h\u2081\u2084 => exact h\u2081\u2084\n| inr h\u2081\u2084 =>\n  have h\u2081\u2085 : b > 0 := h\u2080.2\n  have h\u2081\u2086 : (1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
        },
        "hole_36": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2083"
        },
        "hole_37": {
          "success": false,
          "error_message": "Lean error:\ninternal exception #5",
          "original_tactic": "rw [gt_iff_lt]\nrw [lt_div_iff h\u2088\u2086]"
        },
        "hole_38": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2088\u2087"
        },
        "hole_39": {
          "success": true,
          "error_message": null,
          "original_tactic": "nlinarith"
        },
        "hole_40": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2088\u2081\u2081"
        },
        "hole_41": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2088\u2088"
        },
        "hole_42": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2088\u2083"
        },
        "hole_43": {
          "success": true,
          "error_message": null,
          "original_tactic": "rw [abs_of_neg h\u2088]"
        },
        "hole_44": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_45": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_46": {
          "success": true,
          "error_message": null,
          "original_tactic": "field_simp [h\u2081\u2082] at h\u2081\u2080 \u22a2\nnlinarith"
        },
        "hole_47": {
          "success": true,
          "error_message": null,
          "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2086\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2086)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
        },
        "hole_49": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases h\u2081\u2085 with\n| inl h\u2081\u2085 => exact h\u2081\u2085\n| inr h\u2081\u2085 =>\n  have h\u2081\u2086 : b > 0 := h\u2080.2\n  have h\u2081\u2087 : (-1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
        },
        "hole_50": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2084"
        },
        "hole_51": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_52": {
          "success": true,
          "error_message": null,
          "original_tactic": "contradiction"
        },
        "hole_53": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact Or.inr h\u2088\u2084"
        },
        "hole_54": {
          "success": true,
          "error_message": null,
          "original_tactic": "linarith"
        },
        "hole_55": {
          "success": true,
          "error_message": null,
          "original_tactic": "contradiction"
        },
        "hole_56": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact Or.inr h\u2089\u2084"
        },
        "hole_57": {
          "success": true,
          "error_message": null,
          "original_tactic": "cases' h\u2081\u2080\u2081 with h\u2081\u2080\u2081 h\u2081\u2080\u2081\ncases' h\u2081\u2080\u2082 with h\u2081\u2080\u2082 h\u2081\u2080\u2082\nexfalso\napply h\u2081\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\nrw [h\u2081\u2080\u2081, h\u2081\u2080\u2082]\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\ncases' h\u2081\u2080\u2082 with h\u2081\u2080\u2082 h\u2081\u2080\u2082\nrw [h\u2081\u2080\u2081, h\u2081\u2080\u2082]\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\nexfalso\napply h\u2081\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
        },
        "hole_58": {
          "success": true,
          "error_message": null,
          "original_tactic": "exact h\u2081\u2080"
        }
      },
      "successful_tactics": {
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_11": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_19": "linarith",
        "hole_20": "linarith",
        "hole_25": "linarith",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_30": "linarith",
        "hole_31": "linarith",
        "hole_36": "linarith",
        "hole_38": "linarith",
        "hole_39": "linarith",
        "hole_40": "linarith",
        "hole_41": "linarith",
        "hole_42": "linarith",
        "hole_44": "linarith",
        "hole_45": "linarith",
        "hole_50": "linarith",
        "hole_51": "linarith",
        "hole_52": "linarith",
        "hole_54": "linarith",
        "hole_55": "linarith",
        "hole_58": "linarith"
      },
      "tactic_mapping": {
        "hole_2": "linarith",
        "hole_3": "linarith",
        "hole_5": "linarith",
        "hole_6": "linarith",
        "hole_11": "linarith",
        "hole_13": "linarith",
        "hole_14": "linarith",
        "hole_15": "linarith",
        "hole_16": "linarith",
        "hole_17": "linarith",
        "hole_19": "linarith",
        "hole_20": "linarith",
        "hole_25": "linarith",
        "hole_27": "linarith",
        "hole_28": "linarith",
        "hole_30": "linarith",
        "hole_31": "linarith",
        "hole_36": "linarith",
        "hole_38": "linarith",
        "hole_39": "linarith",
        "hole_40": "linarith",
        "hole_41": "linarith",
        "hole_42": "linarith",
        "hole_44": "linarith",
        "hole_45": "linarith",
        "hole_50": "linarith",
        "hole_51": "linarith",
        "hole_52": "linarith",
        "hole_54": "linarith",
        "hole_55": "linarith",
        "hole_58": "linarith",
        "hole_10": "admit",
        "hole_4": "admit",
        "hole_47": "admit",
        "hole_26": "admit",
        "hole_32": "admit",
        "hole_12": "admit",
        "hole_1": "admit",
        "hole_49": "admit",
        "hole_57": "admit",
        "hole_35": "admit",
        "hole_33": "admit",
        "hole_46": "admit",
        "hole_21": "admit",
        "hole_8": "admit",
        "hole_43": "admit",
        "hole_18": "admit",
        "hole_24": "admit",
        "hole_37": "admit",
        "hole_29": "admit",
        "hole_53": "admit",
        "hole_56": "admit",
        "hole_22": "admit",
        "hole_7": "admit"
      },
      "proof_state_tests": 0,
      "tactic_attempts": {},
      "processing_time_seconds": 855.026573,
      "constraint_satisfied": true,
      "timestamp": "2025-06-20T03:44:29.623030"
    }
  ]
}