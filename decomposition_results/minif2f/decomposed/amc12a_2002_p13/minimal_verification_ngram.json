{
  "problem_id": "amc12a_2002_p13",
  "dataset": "minif2f",
  "verification_count": 1,
  "max_verifications": 3,
  "original_verification_pass": false,
  "hole_verification_pass": true,
  "filled_verification_pass": true,
  "synthesized_verification_pass": true,
  "complete_solve_success": false,
  "original_tactics_test": {
    "hole_1": {
      "success": false,
      "error_message": "Lean error:\ninternal exception #5",
      "original_tactic": "rw [div_le_iff h\u2085\u2086]"
    },
    "hole_2": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_3": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2085\u2083"
    },
    "hole_4": {
      "success": true,
      "error_message": null,
      "original_tactic": "rw [abs_of_nonneg h\u2085]"
    },
    "hole_5": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_6": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_7": {
      "success": true,
      "error_message": null,
      "original_tactic": "field_simp [h\u2089] at h\u2087\nnlinarith"
    },
    "hole_8": {
      "success": true,
      "error_message": null,
      "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2083\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2083)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
    },
    "hole_10": {
      "success": true,
      "error_message": null,
      "original_tactic": "cases h\u2081\u2082 with\n| inl h\u2081\u2082 => exact h\u2081\u2082\n| inr h\u2081\u2082 =>\n  have h\u2081\u2083 : a > 0 := h\u2080.1\n  have h\u2081\u2084 : (1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
    },
    "hole_11": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2081\u2081"
    },
    "hole_12": {
      "success": false,
      "error_message": "Lean error:\ninternal exception #5",
      "original_tactic": "rw [gt_iff_lt]\nrw [lt_div_iff h\u2086\u2086]"
    },
    "hole_13": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2086\u2087"
    },
    "hole_14": {
      "success": true,
      "error_message": null,
      "original_tactic": "nlinarith"
    },
    "hole_15": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2086\u2081\u2081"
    },
    "hole_16": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2086\u2088"
    },
    "hole_17": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2086\u2083"
    },
    "hole_18": {
      "success": true,
      "error_message": null,
      "original_tactic": "rw [abs_of_neg h\u2086]"
    },
    "hole_19": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_20": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_21": {
      "success": true,
      "error_message": null,
      "original_tactic": "field_simp [h\u2081\u2080] at h\u2088 \u22a2\nnlinarith"
    },
    "hole_22": {
      "success": true,
      "error_message": null,
      "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2084\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2084)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
    },
    "hole_24": {
      "success": true,
      "error_message": null,
      "original_tactic": "cases h\u2081\u2083 with\n| inl h\u2081\u2083 => exact h\u2081\u2083\n| inr h\u2081\u2083 =>\n  have h\u2081\u2084 : a > 0 := h\u2080.1\n  have h\u2081\u2085 : (-1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
    },
    "hole_25": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2081\u2082"
    },
    "hole_26": {
      "success": false,
      "error_message": "Lean error:\ninternal exception #5",
      "original_tactic": "rw [div_le_iff h\u2087\u2086]"
    },
    "hole_27": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_28": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2087\u2083"
    },
    "hole_29": {
      "success": true,
      "error_message": null,
      "original_tactic": "rw [abs_of_nonneg h\u2087]"
    },
    "hole_30": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_31": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_32": {
      "success": true,
      "error_message": null,
      "original_tactic": "field_simp [h\u2081\u2081] at h\u2089\nnlinarith"
    },
    "hole_33": {
      "success": true,
      "error_message": null,
      "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2085\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2085)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
    },
    "hole_35": {
      "success": true,
      "error_message": null,
      "original_tactic": "cases h\u2081\u2084 with\n| inl h\u2081\u2084 => exact h\u2081\u2084\n| inr h\u2081\u2084 =>\n  have h\u2081\u2085 : b > 0 := h\u2080.2\n  have h\u2081\u2086 : (1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
    },
    "hole_36": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2081\u2083"
    },
    "hole_37": {
      "success": false,
      "error_message": "Lean error:\ninternal exception #5",
      "original_tactic": "rw [gt_iff_lt]\nrw [lt_div_iff h\u2088\u2086]"
    },
    "hole_38": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2088\u2087"
    },
    "hole_39": {
      "success": true,
      "error_message": null,
      "original_tactic": "nlinarith"
    },
    "hole_40": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2088\u2081\u2081"
    },
    "hole_41": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2088\u2088"
    },
    "hole_42": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2088\u2083"
    },
    "hole_43": {
      "success": true,
      "error_message": null,
      "original_tactic": "rw [abs_of_neg h\u2088]"
    },
    "hole_44": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_45": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_46": {
      "success": true,
      "error_message": null,
      "original_tactic": "field_simp [h\u2081\u2082] at h\u2081\u2080 \u22a2\nnlinarith"
    },
    "hole_47": {
      "success": true,
      "error_message": null,
      "original_tactic": "apply or_iff_not_imp_left.mpr\nintro h\u2081\u2086\napply mul_left_cancel\u2080 (sub_ne_zero_of_ne h\u2081\u2086)\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
    },
    "hole_49": {
      "success": true,
      "error_message": null,
      "original_tactic": "cases h\u2081\u2085 with\n| inl h\u2081\u2085 => exact h\u2081\u2085\n| inr h\u2081\u2085 =>\n  have h\u2081\u2086 : b > 0 := h\u2080.2\n  have h\u2081\u2087 : (-1 - Real.sqrt 5) / 2 \u2264 0 := by nlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\n  linarith"
    },
    "hole_50": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2081\u2084"
    },
    "hole_51": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_52": {
      "success": true,
      "error_message": null,
      "original_tactic": "contradiction"
    },
    "hole_53": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact Or.inr h\u2088\u2084"
    },
    "hole_54": {
      "success": true,
      "error_message": null,
      "original_tactic": "linarith"
    },
    "hole_55": {
      "success": true,
      "error_message": null,
      "original_tactic": "contradiction"
    },
    "hole_56": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact Or.inr h\u2089\u2084"
    },
    "hole_57": {
      "success": true,
      "error_message": null,
      "original_tactic": "cases' h\u2081\u2080\u2081 with h\u2081\u2080\u2081 h\u2081\u2080\u2081\ncases' h\u2081\u2080\u2082 with h\u2081\u2080\u2082 h\u2081\u2080\u2082\nexfalso\napply h\u2081\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\nrw [h\u2081\u2080\u2081, h\u2081\u2080\u2082]\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\ncases' h\u2081\u2080\u2082 with h\u2081\u2080\u2082 h\u2081\u2080\u2082\nrw [h\u2081\u2080\u2081, h\u2081\u2080\u2082]\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]\nexfalso\napply h\u2081\nnlinarith [Real.sqrt_nonneg 5, Real.sq_sqrt (show 0 \u2264 5 by norm_num)]"
    },
    "hole_58": {
      "success": true,
      "error_message": null,
      "original_tactic": "exact h\u2081\u2080"
    }
  },
  "successful_tactics": {
    "hole_2": "linarith",
    "hole_3": "linarith",
    "hole_5": "linarith",
    "hole_6": "linarith",
    "hole_11": "linarith",
    "hole_13": "linarith",
    "hole_14": "linarith",
    "hole_15": "linarith",
    "hole_16": "linarith",
    "hole_17": "linarith",
    "hole_19": "linarith",
    "hole_20": "linarith",
    "hole_25": "linarith",
    "hole_27": "linarith",
    "hole_28": "linarith",
    "hole_30": "linarith",
    "hole_31": "linarith",
    "hole_36": "linarith",
    "hole_38": "linarith",
    "hole_39": "linarith",
    "hole_40": "linarith",
    "hole_41": "linarith",
    "hole_42": "linarith",
    "hole_44": "linarith",
    "hole_45": "linarith",
    "hole_50": "linarith",
    "hole_51": "linarith",
    "hole_52": "linarith",
    "hole_54": "linarith",
    "hole_55": "linarith",
    "hole_58": "linarith"
  },
  "tactic_mapping": {
    "hole_2": "linarith",
    "hole_3": "linarith",
    "hole_5": "linarith",
    "hole_6": "linarith",
    "hole_11": "linarith",
    "hole_13": "linarith",
    "hole_14": "linarith",
    "hole_15": "linarith",
    "hole_16": "linarith",
    "hole_17": "linarith",
    "hole_19": "linarith",
    "hole_20": "linarith",
    "hole_25": "linarith",
    "hole_27": "linarith",
    "hole_28": "linarith",
    "hole_30": "linarith",
    "hole_31": "linarith",
    "hole_36": "linarith",
    "hole_38": "linarith",
    "hole_39": "linarith",
    "hole_40": "linarith",
    "hole_41": "linarith",
    "hole_42": "linarith",
    "hole_44": "linarith",
    "hole_45": "linarith",
    "hole_50": "linarith",
    "hole_51": "linarith",
    "hole_52": "linarith",
    "hole_54": "linarith",
    "hole_55": "linarith",
    "hole_58": "linarith",
    "hole_10": "admit",
    "hole_4": "admit",
    "hole_47": "admit",
    "hole_26": "admit",
    "hole_32": "admit",
    "hole_12": "admit",
    "hole_1": "admit",
    "hole_49": "admit",
    "hole_57": "admit",
    "hole_35": "admit",
    "hole_33": "admit",
    "hole_46": "admit",
    "hole_21": "admit",
    "hole_8": "admit",
    "hole_43": "admit",
    "hole_18": "admit",
    "hole_24": "admit",
    "hole_37": "admit",
    "hole_29": "admit",
    "hole_53": "admit",
    "hole_56": "admit",
    "hole_22": "admit",
    "hole_7": "admit"
  },
  "proof_state_tests": 0,
  "tactic_attempts": {},
  "processing_time_seconds": 855.026573,
  "constraint_satisfied": true,
  "tactics_replaced": 31,
  "timestamp": "2025-06-20T03:44:29.449354"
}