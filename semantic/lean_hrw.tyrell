enum Theorem {
    "left_distrib",
    "right_distrib",
    "distrib_three_right",
    "add_one_mul",
    "mul_add_one",
    "one_add_mul",
    "mul_one_add",
    "two_mul",
    "mul_two",
    "mul_boole",
    "boole_mul",
    "add_mul_self_eq",
    "neg_mul",
    "mul_neg",
    "neg_mul_neg",
    "neg_mul_eq_neg_mul",
    "neg_mul_eq_mul_neg",
    "neg_mul_comm",
    "neg_eq_neg_one_mul",
    "mul_neg_one",
    "neg_one_mul",
    "mul_sub_left_distrib",
    "mul_sub_right_distrib",
    "sub_one_mul",
    "mul_sub_one",
    "one_sub_mul",
    "mul_one_sub",

    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_right_injective",
    "mul_right_inj",
    "mul_ne_mul_right",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_left_injective",
    "mul_left_inj",
    "mul_ne_mul_left",
    "mul_assoc",
    "mul_comm",
    "MulOneClass",
    "one_mul",
    "mul_one",
    "npowRec_add",
    "npowRec_succ",
    "npowRec'_succ",
    "npowRec'_two_mul",
    "npowRec'_mul_comm",
    "npowRec_eq",
    "npowBinRec",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "pow_zero",
    "pow_succ",
    "inv_inv",
    "exists_zpow_surjective",
    "zpow_eq_pow",
    "zpow_zero",
    "zpow_natCast",
    "zpow_negSucc",
    "negSucc_zsmul",
    "div_eq_mul_inv",
    "inv_eq_one_div",
    "mul_div_assoc",
    "one_div",
    "inv_one",
    "mul_inv_rev",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_of_mul_eq_one_left",
    "eq_inv_of_mul_eq_one_left",
    "inv_mul_cancel",
    "inv_eq_of_mul",
    "mul_inv_cancel",
    "div_self'",
    "inv_mul_cancel_left",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_div_cancel_right",
    "inv_mul_cancel_right",
    "div_mul_cancel"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
