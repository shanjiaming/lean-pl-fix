enum Theorem {
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "MulOneClass.ext",
    "Subset.antisymm",
    "Subset.antisymm_iff",
    "Subset.refl",
    "Subset.trans",
    "Superset.trans",
    "add_choose",
    "add_choose_mul_factorial_mul_factorial",
    "add_eq_max_iff",
    "add_eq_min_iff",
    "add_eq_one_iff",
    "add_eq_three_iff",
    "add_eq_two_iff",
    "add_lt_add_iff_left",
    "add_mod_eq_add_mod_left",
    "add_mod_eq_add_mod_right",
    "add_mod_eq_ite",
    "add_mul_self_eq",
    "add_one_mul",
    "add_pos_iff_pos_or_pos",
    "add_sq",
    "add_sub_one_le_mul",
    "add_succ_lt_add",
    "ascFactorial_eq_factorial_mul_choose",
    "boole_mul",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "choose_eq_asc_factorial_div_factorial",
    "choose_eq_choose_pred_add",
    "choose_eq_descFactorial_div_factorial",
    "choose_eq_factorial_div_factorial",
    "choose_eq_zero_iff",
    "choose_eq_zero_of_lt",
    "choose_le_add",
    "choose_le_choose",
    "choose_le_middle",
    "choose_le_succ",
    "choose_le_succ_of_lt_half_left",
    "choose_mono",
    "choose_mul",
    "choose_mul_factorial_mul_factorial",
    "choose_mul_succ_eq",
    "choose_one_right",
    "choose_pos",
    "choose_self",
    "choose_succ_left",
    "choose_succ_right",
    "choose_succ_right_eq",
    "choose_succ_self",
    "choose_succ_self_right",
    "choose_succ_succ",
    "choose_symm",
    "choose_symm_add",
    "choose_symm_half",
    "choose_symm_of_eq_add",
    "choose_two_right",
    "choose_zero_right",
    "choose_zero_succ",
    "coe_coeEmb",
    "coe_inj",
    "coe_injective",
    "coe_mem",
    "coe_sort_coe",
    "coe_ssubset",
    "coe_subset",
    "comp_mul_left",
    "comp_mul_right",
    "conj_eq_one_iff",
    "decreasingInduction_self",
    "decreasingInduction_succ",
    "decreasingInduction_succ_left",
    "decreasingInduction_trans",
    "descFactorial_eq_factorial_mul_choose",
    "diag_induction",
    "distrib_three_right",
    "dite_pow",
    "div_add_mod",
    "div_div",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_div_comm",
    "div_div_div_eq",
    "div_div_eq_mul_div",
    "div_div_self",
    "div_dvd_of_dvd",
    "div_eq_div_iff_comm",
    "div_eq_div_iff_div_eq_div",
    "div_eq_div_iff_mul_eq_mul",
    "div_eq_div_mul_div",
    "div_eq_iff_eq_mul",
    "div_eq_iff_eq_of_dvd_dvd",
    "div_eq_inv_mul",
    "div_eq_inv_self",
    "div_eq_mul_inv",
    "div_eq_mul_one_div",
    "div_eq_of_eq_mul",
    "div_eq_one",
    "div_eq_self",
    "div_eq_sub_mod_div",
    "div_inv_eq_mul",
    "div_le_iff_le_mul_add_pred",
    "div_le_iff_le_mul_of_dvd",
    "div_left_inj",
    "div_left_injective",
    "div_lt_div_of_lt_of_dvd",
    "div_lt_iff_lt_mul",
    "div_lt_one_iff",
    "div_lt_self",
    "div_mul",
    "div_mul_cancel",
    "div_mul_cancel_left",
    "div_mul_cancel_right",
    "div_mul_comm",
    "div_mul_div_cancel",
    "div_mul_div_comm",
    "div_mul_div_le_div",
    "div_mul_eq_div_div",
    "div_mul_eq_div_div_swap",
    "div_mul_eq_div_mul_one_div",
    "div_mul_eq_mul_div",
    "div_mul_mul_cancel",
    "div_ne_one",
    "div_ne_one_of_ne",
    "div_ne_zero_iff_of_dvd",
    "div_one",
    "div_pow",
    "div_right_comm",
    "div_right_inj",
    "div_right_injective",
    "div_self",
    "div_zpow",
    "dvd_div_of_mul_dvd",
    "dvd_iff_div_mul_eq",
    "dvd_iff_dvd_dvd",
    "dvd_iff_le_div_mul",
    "dvd_left_iff_eq",
    "dvd_mul_of_div_dvd",
    "dvd_right_iff_eq",
    "dvd_sub_mod",
    "eq_div_iff_mul_eq",
    "eq_div_iff_mul_eq_left",
    "eq_div_of_mul_eq",
    "eq_iff_eq_of_div_eq_div",
    "eq_inv_iff_mul_eq_one",
    "eq_inv_mul_iff_mul_eq",
    "eq_inv_mul_of_mul_eq",
    "eq_inv_of_mul_eq_one_left",
    "eq_inv_of_mul_eq_one_right",
    "eq_mul_inv_iff_mul_eq",
    "eq_mul_inv_of_mul_eq",
    "eq_mul_of_div_eq",
    "eq_mul_of_inv_mul_eq",
    "eq_mul_of_mul_inv_eq",
    "eq_of_div_eq_one",
    "eq_of_dvd_of_div_eq_one",
    "eq_of_dvd_of_lt_two_mul",
    "eq_of_inv_mul_eq_one",
    "eq_of_mul_inv_eq_one",
    "eq_of_one_div_eq_one_div",
    "eq_of_veq",
    "eq_one_div_of_mul_eq_one_left",
    "eq_one_div_of_mul_eq_one_right",
    "eq_one_iff_eq_one_of_mul_eq_one",
    "eq_one_of_mul_eq_one_left",
    "eq_one_of_mul_eq_one_right",
    "eq_zero_of_double_le",
    "eq_zero_of_dvd_of_div_eq_zero",
    "eq_zero_of_dvd_of_lt",
    "eq_zero_of_le_div",
    "eq_zero_of_le_half",
    "eq_zero_of_mul_le",
    "exists_lt_succ",
    "exists_of_ssubset",
    "exists_zpow_surjective",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "factorial_dvd_ascFactorial",
    "factorial_dvd_descFactorial",
    "factorial_mul_factorial_dvd_factorial",
    "factorial_mul_factorial_dvd_factorial_add",
    "forall_lt_succ",
    "half_le_of_sub_le_half",
    "hom_coe_pow",
    "inv_comp_inv",
    "inv_div",
    "inv_div_inv",
    "inv_div_left",
    "inv_eq_iff_eq_inv",
    "inv_eq_iff_mul_eq_one",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_one",
    "inv_eq_one_div",
    "inv_inj",
    "inv_injective",
    "inv_inv",
    "inv_inv_div_inv",
    "inv_involutive",
    "inv_mul",
    "inv_mul_cancel",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_eq_div",
    "inv_mul_eq_iff_eq_mul",
    "inv_mul_eq_of_eq_mul",
    "inv_mul_eq_one",
    "inv_ne_one",
    "inv_one",
    "inv_pow",
    "inv_pow_sub",
    "inv_surjective",
    "inv_unique",
    "inv_zpow",
    "ite_mul_one",
    "ite_one_mul",
    "ite_pow",
    "ite_zero_mul",
    "ite_zero_mul_ite_zero",
    "leRecOn_self",
    "leRecOn_succ",
    "leRecOn_succ_left",
    "leRecOn_trans",
    "leRec_eq_leRec",
    "leRec_self",
    "leRec_succ",
    "leRec_succ_left",
    "leRec_trans",
    "le_add_one_iff",
    "le_add_pred_of_pos",
    "le_and_le_add_one_iff",
    "le_div_iff_mul_le",
    "le_div_two_iff_mul_two_le",
    "le_eq_subset",
    "le_half_of_half_lt_sub",
    "le_iff_ne_zero_of_dvd",
    "le_iff_subset",
    "le_induction",
    "le_mk_of_forall_le",
    "le_mul_self",
    "le_of_lt_add_of_dvd",
    "le_of_pred_lt",
    "le_one_iff_eq_zero_or_eq_one",
    "le_or_le_of_add_eq_add_pred",
    "le_self_pow",
    "le_succ_iff",
    "leftInverse_div_mul_left",
    "leftInverse_inv",
    "leftInverse_inv_mul_mul_right",
    "leftInverse_mul_left_div",
    "leftInverse_mul_right_inv_mul",
    "left_distrib",
    "left_eq_mul",
    "left_ne_mul",
    "lt_cauchy",
    "lt_div_iff_mul_lt_of_dvd",
    "lt_div_mul_add",
    "lt_eq_subset",
    "lt_iff_add_one_le",
    "lt_iff_le_pred",
    "lt_iff_ssubset",
    "lt_mul_div_succ",
    "lt_mul_of_div_lt",
    "lt_of_div_lt_div",
    "lt_of_lt_pred",
    "lt_of_pow_dvd_right",
    "lt_one_add_iff",
    "lt_pred_iff",
    "mem_coe",
    "mem_def",
    "mem_mk",
    "mem_of_subset",
    "mem_val",
    "mk_add",
    "mk_coe",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mod_add_div",
    "mod_eq_iff_lt",
    "mod_succ_eq_iff_lt",
    "mod_two_ne_one",
    "mod_two_ne_zero",
    "mul_add_mod",
    "mul_add_mod_of_lt",
    "mul_add_mul_div_of_dvd",
    "mul_add_one",
    "mul_add_one_le_add_one_pow",
    "mul_assoc",
    "mul_boole",
    "mul_comm",
    "mul_comm_div",
    "mul_div",
    "mul_div_assoc",
    "mul_div_cancel",
    "mul_div_cancel_left",
    "mul_div_cancel_right",
    "mul_div_div_cancel",
    "mul_div_eq_iff_dvd",
    "mul_div_le_mul_div_assoc",
    "mul_div_left_comm",
    "mul_div_lt_iff_not_dvd",
    "mul_div_mul_comm",
    "mul_div_mul_left_eq_div",
    "mul_div_mul_right_eq_div",
    "mul_div_right_comm",
    "mul_dvd_of_dvd_div",
    "mul_eq_left",
    "mul_eq_of_eq_div",
    "mul_eq_of_eq_inv_mul",
    "mul_eq_of_eq_mul_inv",
    "mul_eq_one_iff_eq_inv",
    "mul_eq_one_iff_inv_eq",
    "mul_eq_right",
    "mul_inv",
    "mul_inv_cancel",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_eq_iff_eq_mul",
    "mul_inv_eq_of_eq_mul",
    "mul_inv_eq_one",
    "mul_inv_rev",
    "mul_ite_zero",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_comm",
    "mul_left_eq_self_iff",
    "mul_left_inj",
    "mul_left_injective",
    "mul_left_iterate",
    "mul_left_iterate_apply_one",
    "mul_left_surjective",
    "mul_lt_mul",
    "mul_lt_mul_pow_succ",
    "mul_mul_div_cancel",
    "mul_mul_inv_cancel",
    "mul_mul_mul_comm",
    "mul_ne_left",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_ne_right",
    "mul_neg",
    "mul_neg_one",
    "mul_one",
    "mul_one_add",
    "mul_one_div",
    "mul_one_eq_id",
    "mul_one_sub",
    "mul_pow_sub_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_comm",
    "mul_right_eq_self_iff",
    "mul_right_inj",
    "mul_right_injective",
    "mul_right_iterate",
    "mul_right_iterate_apply_one",
    "mul_right_surjective",
    "mul_rotate",
    "mul_self_inj",
    "mul_self_le_mul_self",
    "mul_self_le_mul_self_iff",
    "mul_self_lt_mul_self",
    "mul_self_lt_mul_self_iff",
    "mul_self_zpow",
    "mul_sub_div_of_dvd",
    "mul_sub_left_distrib",
    "mul_sub_mul_div_of_dvd",
    "mul_sub_one",
    "mul_sub_right_distrib",
    "mul_two",
    "mul_zpow_neg_one",
    "mul_zpow_self",
    "multichoose_eq",
    "multichoose_one",
    "multichoose_one_right",
    "multichoose_succ_succ",
    "multichoose_two",
    "multichoose_zero_right",
    "multichoose_zero_succ",
    "multiplicative_of_isTotal",
    "multiplicative_of_symmetric_of_isTotal",
    "negSucc_zsmul",
    "neg_eq_neg_one_mul",
    "neg_mul",
    "neg_mul_comm",
    "neg_mul_eq_mul_neg",
    "neg_mul_eq_neg_mul",
    "neg_mul_neg",
    "neg_one_mul",
    "not_dvd_iff_between_consec_multiples",
    "not_dvd_of_between_consec_multiples",
    "not_dvd_of_pos_of_lt",
    "not_mem_mono",
    "not_pos_pow_dvd",
    "not_subset",
    "not_succ_lt_self",
    "npowBinRec.go_spec",
    "npowRec",
    "npowRec_eq",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_add_le_iff",
    "one_add_mul",
    "one_div",
    "one_div_div",
    "one_div_mul_eq_div",
    "one_div_mul_one_div",
    "one_div_mul_one_div_rev",
    "one_div_one",
    "one_div_one_div",
    "one_div_pow",
    "one_div_zpow",
    "one_eq_inv",
    "one_le_div_iff",
    "one_le_iff_ne_zero",
    "one_le_of_lt",
    "one_le_pow",
    "one_lt_iff_ne_zero_and_ne_one",
    "one_lt_mul_iff",
    "one_lt_pow",
    "one_lt_succ_succ",
    "one_lt_two_pow",
    "one_mod_eq_one",
    "one_mul",
    "one_mul_eq_id",
    "one_sub_mul",
    "one_zpow",
    "pairwise_subtype_iff_pairwise_finset",
    "pow_add",
    "pow_boole",
    "pow_dite",
    "pow_eq_pow_mod",
    "pow_ite",
    "pow_iterate",
    "pow_mod",
    "pow_mul",
    "pow_mul_comm",
    "pow_mul_pow_sub",
    "pow_natAbs_eq_one",
    "pow_one",
    "pow_right_comm",
    "pow_self_mul_pow_self_le",
    "pow_self_pos",
    "pow_sub",
    "pow_sub_mul_pow",
    "pow_sub_one_mul",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "pred_add_self",
    "pred_eq_of_eq_succ",
    "pred_eq_self_iff",
    "pred_le_iff",
    "pred_one_add",
    "pred_sub",
    "ratCast_lt",
    "rec_add_one",
    "rec_zero",
    "rightInverse_inv",
    "right_distrib",
    "right_eq_mul",
    "right_ne_mul",
    "self_add_pred",
    "self_add_sub_one",
    "setOf_mem",
    "sq_sub_sq",
    "ssubset_def",
    "ssubset_iff_of_subset",
    "ssubset_iff_subset_ne",
    "ssubset_of_ssubset_of_subset",
    "ssubset_of_subset_of_ssubset",
    "strongRecOn",
    "sub_mod_eq_zero_of_mod_eq",
    "sub_mul_div",
    "sub_one_add_self",
    "sub_one_mul",
    "sub_succ",
    "subset_def",
    "subset_iff",
    "subset_of_le",
    "succ_add_sub_one",
    "succ_le_iff",
    "succ_mul_choose_eq",
    "succ_mul_pos",
    "succ_ne_succ",
    "succ_pos",
    "succ_succ_ne_one",
    "triangle_succ",
    "two_le_iff",
    "two_lt_of_ne",
    "two_mul",
    "two_mul_ne_two_mul_add_one",
    "two_mul_odd_div_two",
    "two_pow_succ",
    "val_inj",
    "val_injective",
    "val_le_iff",
    "val_lt_iff",
    "val_strictMono",
    "zpow_add",
    "zpow_add_one",
    "zpow_comm",
    "zpow_eq_zpow_emod",
    "zpow_induction_left",
    "zpow_induction_right",
    "zpow_iterate",
    "zpow_mul",
    "zpow_natCast",
    "zpow_natCast_sub_natCast",
    "zpow_natCast_sub_one",
    "zpow_neg",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one",
    "zpow_one_add",
    "zpow_one_sub_natCast",
    "zpow_sub_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

enum Place {
    "here",
    "before"
}

enum Int {
    "2",
    "3"
}


enum NULL{
    "NULL"
}

value Empty;
value Stmt;
value Bool;


program Lean() -> Bool;
func use_theorem_tactic: Stmt -> AtTactic, Theorem;
func oneline: Stmt -> OnelineTactic;
func delete: Stmt -> NULL;
func nth_rw: Stmt -> Int;
func unfold: Stmt -> NULL;
func checker: Bool -> Stmt, Place;
func empty: Empty -> Empty;
