enum Theorem {
    "add_lt_add_iff_left",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "ext_cauchy",
    "ext_cauchy_iff",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "mk_add",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one_le_add_one_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "ratCast_lt"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

enum Place {
    "here",
    "before"
}

enum Int {
    "2",
    "3"
}


enum NULL{
    "NULL"
}

value Empty;
value Stmt;
value Bool;


program Lean() -> Bool;
func use_theorem_tactic: Stmt -> AtTactic, Theorem;
func oneline: Stmt -> OnelineTactic;
func delete: Stmt -> NULL;
func nth_rw: Stmt -> Int;
func unfold: Stmt -> NULL;
func checker: Bool -> Stmt, Place;
func empty: Empty -> Empty;
