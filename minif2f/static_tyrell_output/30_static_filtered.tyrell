enum Theorem {
    "Nodup.ext",
    "RingHom.ext_rat",
    "Subset.antisymm",
    "Subset.antisymm_iff",
    "Subset.refl",
    "Subset.trans",
    "Superset.trans",
    "add_lt_add_iff_left",
    "add_mul_self_eq",
    "add_one_mul",
    "add_sq",
    "boole_mul",
    "card_attach",
    "card_le_card",
    "card_lt_card",
    "card_mono",
    "card_pmap",
    "card_strictMono",
    "cast_add_of_ne_zero",
    "cast_comm",
    "cast_commute",
    "cast_divInt_of_ne_zero",
    "cast_div_of_ne_zero",
    "cast_intCast",
    "cast_inv_of_ne_zero",
    "cast_mkRat_of_ne_zero",
    "cast_mul_of_ne_zero",
    "cast_natCast",
    "cast_one",
    "cast_zero",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_attach",
    "coe_card",
    "coe_coeEmb",
    "coe_eq_coe",
    "coe_eq_univ",
    "coe_inj",
    "coe_injective",
    "coe_le",
    "coe_mem",
    "coe_nodup",
    "coe_pmap",
    "coe_reverse",
    "coe_sort_coe",
    "coe_ssubset",
    "coe_subset",
    "coe_univ",
    "commute_cast",
    "comp_mul_left",
    "comp_mul_right",
    "conj_eq_one_iff",
    "distrib_three_right",
    "dite_pow",
    "div_div",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_div_comm",
    "div_div_div_eq",
    "div_div_eq_mul_div",
    "div_div_self",
    "div_eq_div_iff_comm",
    "div_eq_div_iff_div_eq_div",
    "div_eq_div_iff_mul_eq_mul",
    "div_eq_div_mul_div",
    "div_eq_iff_eq_mul",
    "div_eq_inv_mul",
    "div_eq_inv_self",
    "div_eq_mul_one_div",
    "div_eq_of_eq_mul",
    "div_eq_one",
    "div_eq_self",
    "div_inv_eq_mul",
    "div_left_inj",
    "div_left_injective",
    "div_mul",
    "div_mul_cancel_left",
    "div_mul_cancel_right",
    "div_mul_comm",
    "div_mul_div_cancel",
    "div_mul_div_comm",
    "div_mul_eq_div_div",
    "div_mul_eq_div_div_swap",
    "div_mul_eq_div_mul_one_div",
    "div_mul_eq_mul_div",
    "div_mul_mul_cancel",
    "div_ne_one",
    "div_ne_one_of_ne",
    "div_one",
    "div_pow",
    "div_right_comm",
    "div_right_inj",
    "div_right_injective",
    "div_zpow",
    "eq_div_iff_mul_eq",
    "eq_div_of_mul_eq",
    "eq_iff_eq_of_div_eq_div",
    "eq_inv_iff_mul_eq_one",
    "eq_inv_mul_iff_mul_eq",
    "eq_inv_mul_of_mul_eq",
    "eq_inv_of_mul_eq_one_right",
    "eq_mul_inv_iff_mul_eq",
    "eq_mul_inv_of_mul_eq",
    "eq_mul_of_div_eq",
    "eq_mul_of_inv_mul_eq",
    "eq_mul_of_mul_inv_eq",
    "eq_nnratCast",
    "eq_of_div_eq_one",
    "eq_of_inv_mul_eq_one",
    "eq_of_le_of_card_le",
    "eq_of_mul_inv_eq_one",
    "eq_of_one_div_eq_one_div",
    "eq_of_veq",
    "eq_one_div_of_mul_eq_one_left",
    "eq_one_div_of_mul_eq_one_right",
    "eq_one_iff_eq_one_of_mul_eq_one",
    "eq_univ_iff_forall",
    "eq_univ_of_forall",
    "exists_of_ssubset",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "ext_nnrat",
    "ext_nnrat_on_pnat",
    "ext_rat",
    "ext_rat_on_pnat",
    "hom_coe_pow",
    "inv_comp_inv",
    "inv_div",
    "inv_div_inv",
    "inv_div_left",
    "inv_eq_iff_eq_inv",
    "inv_eq_iff_mul_eq_one",
    "inv_eq_one",
    "inv_inj",
    "inv_injective",
    "inv_inv_div_inv",
    "inv_involutive",
    "inv_mul",
    "inv_mul_eq_div",
    "inv_mul_eq_iff_eq_mul",
    "inv_mul_eq_of_eq_mul",
    "inv_mul_eq_one",
    "inv_ne_one",
    "inv_pow",
    "inv_pow_sub",
    "inv_surjective",
    "inv_unique",
    "inv_zpow",
    "ite_mul_one",
    "ite_one_mul",
    "ite_pow",
    "ite_zero_mul",
    "ite_zero_mul_ite_zero",
    "leInductionOn",
    "le_eq_subset",
    "le_iff_subset",
    "le_mk_of_forall_le",
    "leftInverse_div_mul_left",
    "leftInverse_inv",
    "leftInverse_inv_mul_mul_right",
    "leftInverse_mul_left_div",
    "leftInverse_mul_right_inv_mul",
    "left_distrib",
    "left_eq_mul",
    "left_ne_mul",
    "lift_coe",
    "lt_cauchy",
    "lt_eq_subset",
    "lt_iff_ssubset",
    "map_ratCast",
    "mem_attach",
    "mem_coe",
    "mem_def",
    "mem_mk",
    "mem_of_le",
    "mem_of_subset",
    "mem_pmap",
    "mem_univ",
    "mem_univ_val",
    "mem_val",
    "mk_add",
    "mk_coe",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one",
    "mul_add_one_le_add_one_pow",
    "mul_boole",
    "mul_comm_div",
    "mul_div",
    "mul_div_assoc",
    "mul_div_cancel",
    "mul_div_cancel_left",
    "mul_div_div_cancel",
    "mul_div_left_comm",
    "mul_div_mul_comm",
    "mul_div_mul_left_eq_div",
    "mul_div_mul_right_eq_div",
    "mul_div_right_comm",
    "mul_eq_left",
    "mul_eq_of_eq_div",
    "mul_eq_of_eq_inv_mul",
    "mul_eq_of_eq_mul_inv",
    "mul_eq_one_iff_eq_inv",
    "mul_eq_one_iff_inv_eq",
    "mul_eq_right",
    "mul_inv",
    "mul_inv_eq_iff_eq_mul",
    "mul_inv_eq_of_eq_mul",
    "mul_inv_eq_one",
    "mul_ite_zero",
    "mul_left_comm",
    "mul_left_iterate",
    "mul_left_iterate_apply_one",
    "mul_left_surjective",
    "mul_mul_div_cancel",
    "mul_mul_inv_cancel",
    "mul_mul_mul_comm",
    "mul_ne_left",
    "mul_ne_right",
    "mul_neg",
    "mul_neg_one",
    "mul_one_add",
    "mul_one_div",
    "mul_one_eq_id",
    "mul_one_sub",
    "mul_pow_sub_one",
    "mul_right_comm",
    "mul_right_iterate",
    "mul_right_iterate_apply_one",
    "mul_right_surjective",
    "mul_rotate",
    "mul_self_zpow",
    "mul_sub_left_distrib",
    "mul_sub_one",
    "mul_sub_right_distrib",
    "mul_two",
    "mul_zpow_neg_one",
    "mul_zpow_self",
    "multiplicative_of_isTotal",
    "multiplicative_of_symmetric_of_isTotal",
    "neg_eq_neg_one_mul",
    "neg_mul",
    "neg_mul_comm",
    "neg_mul_eq_mul_neg",
    "neg_mul_eq_neg_mul",
    "neg_mul_neg",
    "neg_one_mul",
    "nodup_map_iff_injOn",
    "nodup_map_univ_iff_injective",
    "nodup_of_le",
    "not_mem_mono",
    "not_subset",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_add_mul",
    "one_div_div",
    "one_div_mul_eq_div",
    "one_div_mul_one_div",
    "one_div_mul_one_div_rev",
    "one_div_one",
    "one_div_one_div",
    "one_div_pow",
    "one_div_zpow",
    "one_eq_inv",
    "one_mul_eq_id",
    "one_sub_mul",
    "one_zpow",
    "pairwise_coe_iff",
    "pairwise_coe_iff_pairwise",
    "pairwise_subtype_iff_pairwise_finset",
    "pmap_congr",
    "pow_boole",
    "pow_dite",
    "pow_eq_pow_mod",
    "pow_ite",
    "pow_iterate",
    "pow_mul_pow_sub",
    "pow_natAbs_eq_one",
    "pow_sub",
    "pow_sub_mul_pow",
    "pow_sub_one_mul",
    "quot_mk_to_coe",
    "ratCast_lt",
    "rightInverse_inv",
    "right_distrib",
    "right_eq_mul",
    "right_ne_mul",
    "setOf_mem",
    "ssubset_def",
    "ssubset_iff_of_subset",
    "ssubset_iff_subset_ne",
    "ssubset_of_ssubset_of_subset",
    "ssubset_of_subset_of_ssubset",
    "sub_one_mul",
    "subset_def",
    "subset_iff",
    "subset_of_le",
    "subset_univ",
    "two_mul",
    "val_inj",
    "val_injective",
    "val_le_iff",
    "val_lt_iff",
    "val_strictMono",
    "zpow_add",
    "zpow_add_one",
    "zpow_comm",
    "zpow_eq_zpow_emod",
    "zpow_induction_left",
    "zpow_induction_right",
    "zpow_iterate",
    "zpow_mul",
    "zpow_natCast_sub_natCast",
    "zpow_natCast_sub_one",
    "zpow_neg",
    "zpow_one_add",
    "zpow_one_sub_natCast",
    "zpow_sub_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

enum Place {
    "here",
    "before"
}

enum Int {
    "2",
    "3"
}


enum NULL{
    "NULL"
}

value Empty;
value Stmt;
value Bool;


program Lean() -> Bool;
func use_theorem_tactic: Stmt -> AtTactic, Theorem;
func oneline: Stmt -> OnelineTactic;
func delete: Stmt -> NULL;
func nth_rw: Stmt -> Int;
func unfold: Stmt -> NULL;
func checker: Bool -> Stmt, Place;
func empty: Empty -> Empty;
