enum Theorem {
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Commute.lie_eq",
    "I_im",
    "I_mul",
    "I_mul_I",
    "I_mul_im",
    "I_mul_re",
    "I_pow_eq_pow_mod",
    "I_pow_four",
    "I_pow_three",
    "I_re",
    "I_sq",
    "MulOneClass.ext",
    "add_conj",
    "add_im",
    "add_left",
    "add_lt_add_iff_left",
    "add_re",
    "add_right",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_imAddGroupHom",
    "coe_reAddGroupHom",
    "commute_iff_lie_eq",
    "comp_mul_left",
    "comp_mul_right",
    "conj_I",
    "conj_eq_iff_im",
    "conj_eq_iff_re",
    "conj_eq_iff_real",
    "conj_eq_one_iff",
    "conj_im",
    "conj_inv",
    "conj_natCast",
    "conj_neg_I",
    "conj_ofNat",
    "conj_ofReal",
    "conj_re",
    "dite_pow",
    "div_I",
    "div_div",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_div_comm",
    "div_div_div_eq",
    "div_div_eq_mul_div",
    "div_div_self",
    "div_eq_div_iff_comm",
    "div_eq_div_iff_div_eq_div",
    "div_eq_div_iff_mul_eq_mul",
    "div_eq_div_mul_div",
    "div_eq_iff_eq_mul",
    "div_eq_inv_mul",
    "div_eq_inv_self",
    "div_eq_mul_inv",
    "div_eq_mul_one_div",
    "div_eq_of_eq_mul",
    "div_eq_one",
    "div_eq_self",
    "div_im",
    "div_intCast",
    "div_inv_eq_mul",
    "div_left_inj",
    "div_left_injective",
    "div_mul",
    "div_mul_cancel",
    "div_mul_cancel_left",
    "div_mul_cancel_right",
    "div_mul_comm",
    "div_mul_div_cancel",
    "div_mul_div_comm",
    "div_mul_eq_div_div",
    "div_mul_eq_div_div_swap",
    "div_mul_eq_div_mul_one_div",
    "div_mul_eq_mul_div",
    "div_mul_mul_cancel",
    "div_natCast",
    "div_ne_one",
    "div_ne_one_of_ne",
    "div_ofNat",
    "div_ofNat_im",
    "div_ofNat_re",
    "div_ofReal",
    "div_one",
    "div_pow",
    "div_ratCast",
    "div_re",
    "div_right_comm",
    "div_right_inj",
    "div_right_injective",
    "div_self",
    "div_zpow",
    "eq_div_iff_mul_eq",
    "eq_div_of_mul_eq",
    "eq_iff_eq_of_div_eq_div",
    "eq_inv_iff_mul_eq_one",
    "eq_inv_mul_iff_mul_eq",
    "eq_inv_mul_of_mul_eq",
    "eq_inv_of_mul_eq_one_left",
    "eq_inv_of_mul_eq_one_right",
    "eq_mul_inv_iff_mul_eq",
    "eq_mul_inv_of_mul_eq",
    "eq_mul_of_div_eq",
    "eq_mul_of_inv_mul_eq",
    "eq_mul_of_mul_inv_eq",
    "eq_of_div_eq_one",
    "eq_of_inv_mul_eq_one",
    "eq_of_mul_inv_eq_one",
    "eq_of_one_div_eq_one_div",
    "eq_one_div_of_mul_eq_one_left",
    "eq_one_div_of_mul_eq_one_right",
    "eq_one_iff_eq_one_of_mul_eq_one",
    "eq_or_eq_neg_of_sq_eq_sq",
    "equivRealProdAddHom_symm_apply",
    "equivRealProd_symm_apply",
    "eta",
    "exists_zpow_surjective",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "hom_coe_pow",
    "horizontalSegment_eq",
    "im_eq_sub_conj",
    "im_mul_ofReal",
    "im_nsmul",
    "im_ofReal_mul",
    "im_sq_le_normSq",
    "im_surjective",
    "im_zsmul",
    "inv_I",
    "inv_comp_inv",
    "inv_def",
    "inv_div",
    "inv_div_inv",
    "inv_div_left",
    "inv_eq_iff_eq_inv",
    "inv_eq_iff_mul_eq_one",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_one",
    "inv_eq_one_div",
    "inv_eq_self_iff",
    "inv_im",
    "inv_inj",
    "inv_injective",
    "inv_inv",
    "inv_inv_div_inv",
    "inv_involutive",
    "inv_mul",
    "inv_mul_cancel",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_eq_div",
    "inv_mul_eq_iff_eq_mul",
    "inv_mul_eq_of_eq_mul",
    "inv_mul_eq_one",
    "inv_ne_one",
    "inv_one",
    "inv_pow",
    "inv_pow_sub",
    "inv_re",
    "inv_surjective",
    "inv_unique",
    "inv_zpow",
    "ite_mul_one",
    "ite_one_mul",
    "ite_pow",
    "le_mk_of_forall_le",
    "leftInverse_div_mul_left",
    "leftInverse_inv",
    "leftInverse_inv_mul_mul_right",
    "leftInverse_mul_left_div",
    "leftInverse_mul_right_inv_mul",
    "left_eq_mul",
    "left_ne_mul",
    "lie_def",
    "lt_cauchy",
    "mem_reProdIm",
    "mk_add",
    "mk_const",
    "mk_eq",
    "mk_eq_add_mul_I",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_I_im",
    "mul_I_re",
    "mul_add_one_le_add_one_pow",
    "mul_assoc",
    "mul_comm",
    "mul_comm_div",
    "mul_conj",
    "mul_div",
    "mul_div_assoc",
    "mul_div_cancel",
    "mul_div_cancel_left",
    "mul_div_cancel_right",
    "mul_div_div_cancel",
    "mul_div_left_comm",
    "mul_div_mul_comm",
    "mul_div_mul_left_eq_div",
    "mul_div_mul_right_eq_div",
    "mul_div_right_comm",
    "mul_eq_left",
    "mul_eq_of_eq_div",
    "mul_eq_of_eq_inv_mul",
    "mul_eq_of_eq_mul_inv",
    "mul_eq_one_iff_eq_inv",
    "mul_eq_one_iff_inv_eq",
    "mul_eq_right",
    "mul_im",
    "mul_inv",
    "mul_inv_cancel",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_eq_iff_eq_mul",
    "mul_inv_eq_of_eq_mul",
    "mul_inv_eq_one",
    "mul_inv_rev",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_comm",
    "mul_left_inj",
    "mul_left_injective",
    "mul_left_iterate",
    "mul_left_iterate_apply_one",
    "mul_left_surjective",
    "mul_mul_div_cancel",
    "mul_mul_inv_cancel",
    "mul_mul_mul_comm",
    "mul_ne_left",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_ne_right",
    "mul_one",
    "mul_one_div",
    "mul_one_eq_id",
    "mul_pow_sub_one",
    "mul_re",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_comm",
    "mul_right_inj",
    "mul_right_injective",
    "mul_right_iterate",
    "mul_right_iterate_apply_one",
    "mul_right_surjective",
    "mul_rotate",
    "mul_self_eq_mul_self_iff",
    "mul_self_eq_one_iff",
    "mul_self_sub_mul_self",
    "mul_self_sub_mul_self_eq",
    "mul_self_sub_one",
    "mul_self_zpow",
    "mul_zpow_neg_one",
    "mul_zpow_self",
    "multiplicative_of_isTotal",
    "multiplicative_of_symmetric_of_isTotal",
    "negSucc_zsmul",
    "neg_im",
    "neg_left",
    "neg_left_iff",
    "neg_one_left",
    "neg_one_pow_eq_or",
    "neg_one_pow_eq_pow_mod_two",
    "neg_one_right",
    "neg_one_sq",
    "neg_pow",
    "neg_re",
    "neg_right",
    "neg_right_iff",
    "neg_sq",
    "normSq_I",
    "normSq_add",
    "normSq_add_mul_I",
    "normSq_apply",
    "normSq_conj",
    "normSq_div",
    "normSq_eq_conj_mul_self",
    "normSq_eq_zero",
    "normSq_intCast",
    "normSq_inv",
    "normSq_mk",
    "normSq_mul",
    "normSq_natCast",
    "normSq_neg",
    "normSq_nonneg",
    "normSq_ofNat",
    "normSq_ofReal",
    "normSq_one",
    "normSq_pos",
    "normSq_ratCast",
    "normSq_sub",
    "normSq_zero",
    "npowBinRec.go_spec",
    "npowRec",
    "npowRec_eq",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "ofReal_add",
    "ofReal_comp_nsmul",
    "ofReal_comp_zsmul",
    "ofReal_def",
    "ofReal_div",
    "ofReal_eq_one",
    "ofReal_eq_zero",
    "ofReal_im",
    "ofReal_inj",
    "ofReal_injective",
    "ofReal_inv",
    "ofReal_mul",
    "ofReal_ne_one",
    "ofReal_ne_zero",
    "ofReal_neg",
    "ofReal_nnqsmul",
    "ofReal_one",
    "ofReal_pow",
    "ofReal_qsmul",
    "ofReal_re",
    "ofReal_sub",
    "ofReal_zero",
    "ofReal_zpow",
    "one_div",
    "one_div_div",
    "one_div_mul_eq_div",
    "one_div_mul_one_div",
    "one_div_mul_one_div_rev",
    "one_div_one",
    "one_div_one_div",
    "one_div_pow",
    "one_div_zpow",
    "one_eq_inv",
    "one_im",
    "one_mul",
    "one_mul_eq_id",
    "one_re",
    "one_zpow",
    "pow_add",
    "pow_boole",
    "pow_dite",
    "pow_eq_pow_mod",
    "pow_ite",
    "pow_iterate",
    "pow_mul",
    "pow_mul_comm",
    "pow_mul_pow_sub",
    "pow_natAbs_eq_one",
    "pow_one",
    "pow_right_comm",
    "pow_sub",
    "pow_sub_mul_pow",
    "pow_sub_one_mul",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "preimage_equivRealProd_prod",
    "range_im",
    "range_re",
    "ratCast_lt",
    "reProdIm_subset_iff",
    "re_add_im",
    "re_eq_add_conj",
    "re_mul_ofReal",
    "re_nsmul",
    "re_ofNat",
    "re_ofReal_mul",
    "re_sq_le_normSq",
    "re_surjective",
    "re_zsmul",
    "real_smul",
    "rightInverse_inv",
    "right_eq_mul",
    "right_ne_mul",
    "smul_im",
    "smul_re",
    "sq_eq_sq_iff_eq_or_eq_neg",
    "sq_ne_one_iff",
    "sq_sub_sq",
    "star_def",
    "sub_conj",
    "sub_im",
    "sub_left",
    "sub_re",
    "sub_right",
    "sub_sq",
    "sub_sq_comm",
    "verticalSegment_eq",
    "zero_im",
    "zero_re",
    "zpow_add",
    "zpow_add_one",
    "zpow_comm",
    "zpow_eq_zpow_emod",
    "zpow_induction_left",
    "zpow_induction_right",
    "zpow_iterate",
    "zpow_mul",
    "zpow_natCast",
    "zpow_natCast_sub_natCast",
    "zpow_natCast_sub_one",
    "zpow_neg",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one",
    "zpow_one_add",
    "zpow_one_sub_natCast",
    "zpow_sub_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

enum Place {
    "here",
    "before"
}

enum Int {
    "2",
    "3"
}


enum NULL{
    "NULL"
}

value Empty;
value Stmt;
value Bool;


program Lean() -> Bool;
func use_theorem_tactic: Stmt -> AtTactic, Theorem;
func oneline: Stmt -> OnelineTactic;
func delete: Stmt -> NULL;
func nth_rw: Stmt -> Int;
func unfold: Stmt -> NULL;
func checker: Bool -> Stmt, Place;
func empty: Empty -> Empty;
