{
  "selected_library_modules": [
    "Mathlib.Control.Traversable.Basic",
    "Mathlib.Data.Finset.Defs",
    "Mathlib.Data.Real.Basic",
    "Mathlib.Logic.Basic",
    "Mathlib.Order.Defs.PartialOrder"
  ],
  "theorems": [
    "And.exists",
    "BAll.imp_left",
    "BAll.imp_right",
    "BEx.elim",
    "BEx.imp_left",
    "BEx.imp_right",
    "BEx.intro",
    "Decidable.and_forall_ne",
    "Decidable.eq_or_ne",
    "Decidable.ne_or_eq",
    "Eq.rec_eq_cast",
    "Exists.fst",
    "Exists.snd",
    "Exists\u2082.imp",
    "Exists\u2083.imp",
    "Fact.elim",
    "Iff.ne_left",
    "Iff.ne_right",
    "Iff.not_left",
    "Iff.not_right",
    "Imp.swap",
    "Ne.ne_or_ne",
    "Not.imp_symm",
    "Or.elim3",
    "Or.imp3",
    "Prop.exists_iff",
    "Prop.forall_iff",
    "Subset.antisymm",
    "Subset.antisymm_iff",
    "Subset.refl",
    "Subset.trans",
    "Superset.trans",
    "add_lt_add_iff_left",
    "and_forall_ne",
    "and_iff_not_or_not",
    "and_or_imp",
    "and_symm_left",
    "and_symm_right",
    "app_eq_coe",
    "apply_dite\u2082",
    "apply_ite\u2082",
    "beq_eq_decide",
    "beq_ext",
    "bex_def",
    "by_cases",
    "by_contradiction",
    "cast_heq_iff_heq",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "choose_eq",
    "coe_coeEmb",
    "coe_inj",
    "coe_injective",
    "coe_mem",
    "coe_mk",
    "coe_sort_coe",
    "coe_ssubset",
    "coe_subset",
    "comp_apply",
    "comp_assoc",
    "comp_id",
    "congr_arg_heq",
    "congr_arg_refl",
    "congr_fun_congr_arg",
    "congr_fun_rfl",
    "congr_heq",
    "congr_refl_left",
    "congr_refl_right",
    "dec_em",
    "dite_apply",
    "dite_dite_comm",
    "dite_eq_iff",
    "dite_eq_or_eq",
    "dite_mem",
    "dite_ne_left_iff",
    "dite_ne_right_iff",
    "dite_prop_iff_and",
    "dite_prop_iff_or",
    "em",
    "eqRec_heq",
    "eq_cast_iff_heq",
    "eq_equivalence",
    "eq_false_intro",
    "eq_ite_iff",
    "eq_of_veq",
    "eq_or_lt_of_le",
    "eq_or_ne",
    "eq_true_intro",
    "exists_and_exists_comm",
    "exists_apply_eq",
    "exists_apply_eq_apply",
    "exists_apply_eq_apply2",
    "exists_apply_eq_apply3",
    "exists_iff_of_forall",
    "exists_mem_of_exists",
    "exists_mem_or",
    "exists_mem_or_left",
    "exists_of_exists_mem",
    "exists_of_ssubset",
    "exists_or_forall_not",
    "exists_prop_of_false",
    "exists_swap",
    "exists\u2082_comm",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "fact_iff",
    "forall_and_left",
    "forall_and_right",
    "forall_apply_eq_imp_iff",
    "forall_cond_comm",
    "forall_eq_apply_imp_iff",
    "forall_imp_iff_exists_imp",
    "forall_mem_comm",
    "forall_or_exists_not",
    "forall_or_left",
    "forall_or_of_or_forall",
    "forall_or_right",
    "forall_prop_congr",
    "forall_swap",
    "forall_true_iff",
    "forall\u2082_and",
    "forall\u2082_imp",
    "forall\u2082_or_left",
    "forall\u2082_swap",
    "forall\u2082_true_iff",
    "forall\u2083_imp",
    "forall\u2083_true_iff",
    "gt_irrefl",
    "heq_cast_iff_heq",
    "heq_of_eq_cast",
    "heq_rec_iff_heq",
    "id_comp",
    "if_congr",
    "if_ctx_congr",
    "iff_eq_eq",
    "iff_iff_and_or_not_and_not",
    "iff_iff_not_or_and_or_not",
    "iff_mpr_iff_true_intro",
    "iff_not_comm",
    "imp_and_neg_imp_iff",
    "imp_congr_ctx_eq",
    "imp_congr_eq",
    "imp_forall_iff",
    "imp_forall_iff_forall",
    "imp_iff_not_or",
    "imp_iff_or_not",
    "imp_iff_right_iff",
    "imp_or",
    "ite_and",
    "ite_apply",
    "ite_eq_iff",
    "ite_eq_or_eq",
    "ite_ite_comm",
    "ite_mem",
    "ite_ne_left_iff",
    "ite_ne_right_iff",
    "ite_or",
    "ite_prop_iff_and",
    "ite_prop_iff_or",
    "lawful_beq_subsingleton",
    "le_antisymm",
    "le_antisymm_iff",
    "le_eq_subset",
    "le_iff_lt_or_eq",
    "le_iff_subset",
    "le_mk_of_forall_le",
    "le_of_eq",
    "le_of_eq_or_lt",
    "le_of_lt",
    "le_of_lt_or_eq",
    "le_rfl",
    "lt_asymm",
    "lt_cauchy",
    "lt_eq_subset",
    "lt_iff_le_not_le",
    "lt_iff_ssubset",
    "lt_irrefl",
    "lt_of_le_not_le",
    "lt_of_le_of_ne",
    "lt_or_eq_of_le",
    "mem_coe",
    "mem_def",
    "mem_dite",
    "mem_ite",
    "mem_mk",
    "mem_of_subset",
    "mem_val",
    "mk_add",
    "mk_coe",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one_le_add_one_pow",
    "ne_and_eq_iff_right",
    "ne_of_eq_of_ne",
    "ne_of_gt",
    "ne_of_lt",
    "ne_of_ne_of_eq",
    "ne_or_eq",
    "not_and_not_right",
    "not_and_or",
    "not_beq_of_ne",
    "not_exists_mem",
    "not_forall_not",
    "not_forall\u2082",
    "not_forall\u2082_of_exists\u2082_not",
    "not_iff",
    "not_iff_comm",
    "not_iff_not",
    "not_imp",
    "not_imp_comm",
    "not_imp_not",
    "not_le_of_gt",
    "not_le_of_lt",
    "not_lt_of_ge",
    "not_lt_of_le",
    "not_mem_mono",
    "not_ne_iff",
    "not_or_of_imp",
    "not_subset",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_not_imp",
    "of_not_not",
    "or_congr_left",
    "or_congr_right",
    "or_iff_not_and_not",
    "or_not",
    "or_not_of_imp",
    "pairwise_subtype_iff_pairwise_finset",
    "peirce",
    "preserves_map",
    "preserves_pure",
    "preserves_seq",
    "ratCast_lt",
    "rec_heq_iff_heq",
    "rec_heq_of_heq",
    "setOf_mem",
    "some_spec\u2082",
    "ssubset_def",
    "ssubset_iff_of_subset",
    "ssubset_iff_subset_ne",
    "ssubset_of_ssubset_of_subset",
    "ssubset_of_subset_of_ssubset",
    "subset_def",
    "subset_iff",
    "subset_of_le",
    "val_inj",
    "val_injective",
    "val_le_iff",
    "val_lt_iff",
    "val_strictMono",
    "xor_comm",
    "xor_iff_iff_not",
    "xor_iff_not_iff",
    "xor_iff_or_and_not_and",
    "xor_not_not"
  ]
}