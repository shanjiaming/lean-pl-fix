{
  "selected_library_modules": [
    "Mathlib.Algebra.Group.Defs",
    "Mathlib.Algebra.Order.Monoid.Canonical.Defs",
    "Mathlib.Algebra.Order.Monoid.Unbundled.Basic",
    "Mathlib.Data.Nat.BinaryRec",
    "Mathlib.Data.Nat.Bits",
    "Mathlib.Data.Real.Basic",
    "Mathlib.Data.Real.Sign",
    "Mathlib.Logic.Basic",
    "Mathlib.Order.Monotone.Defs"
  ],
  "theorems": [
    "And.exists",
    "Antitone.comp_monotone",
    "Antitone.comp_monotoneOn",
    "Antitone.const_mul",
    "Antitone.imp",
    "Antitone.mul",
    "Antitone.mul_const",
    "Antitone.mul_strictAnti",
    "Antitone.prod_map",
    "Antitone.reflect_lt",
    "Antitone.strictAnti_of_injective",
    "AntitoneOn.const_mul",
    "AntitoneOn.mul",
    "AntitoneOn.mul_const",
    "AntitoneOn.mul_strictAnti",
    "AntitoneOn.reflect_lt",
    "BAll.imp_left",
    "BAll.imp_right",
    "BEx.elim",
    "BEx.imp_left",
    "BEx.imp_right",
    "BEx.intro",
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Contravariant.MulLECancellable",
    "Decidable.and_forall_ne",
    "Decidable.eq_or_ne",
    "Decidable.ne_or_eq",
    "Eq.rec_eq_cast",
    "Exists.fst",
    "Exists.snd",
    "Exists\u2082.imp",
    "Exists\u2083.imp",
    "Fact.elim",
    "Function.monotone_eval",
    "Iff.ne_left",
    "Iff.ne_right",
    "Iff.not_left",
    "Iff.not_right",
    "Imp.swap",
    "Left.mul_le_one",
    "Left.mul_lt_mul",
    "Left.mul_lt_one",
    "Left.mul_lt_one_of_le_of_lt",
    "Left.mul_lt_one_of_lt_of_le",
    "Left.one_le_mul",
    "Left.one_lt_mul",
    "Left.one_lt_mul_of_le_of_lt",
    "Left.one_lt_mul_of_lt_of_le",
    "Monotone.comp_antitone",
    "Monotone.comp_antitoneOn",
    "Monotone.comp_le_comp_left",
    "Monotone.const_mul",
    "Monotone.imp",
    "Monotone.mul",
    "Monotone.mul_const",
    "Monotone.mul_strictMono",
    "Monotone.prod_map",
    "Monotone.reflect_lt",
    "Monotone.strictMono_of_injective",
    "MonotoneOn.const_mul",
    "MonotoneOn.mul",
    "MonotoneOn.mul_const",
    "MonotoneOn.mul_strictMono",
    "MonotoneOn.reflect_lt",
    "MulLeftStrictMono.toIsLeftCancelMul",
    "MulOneClass.ext",
    "MulRightStrictMono.toIsRightCancelMul",
    "Ne.ne_or_ne",
    "Not.imp_symm",
    "Or.elim3",
    "Or.imp3",
    "Prop.exists_iff",
    "Prop.forall_iff",
    "Right.mul_le_one",
    "Right.mul_lt_mul",
    "Right.mul_lt_one",
    "Right.mul_lt_one_of_le_of_lt",
    "Right.mul_lt_one_of_lt_of_le",
    "Right.one_le_mul",
    "Right.one_lt_mul",
    "Right.one_lt_mul_of_le_of_lt",
    "Right.one_lt_mul_of_lt_of_le",
    "StrictAnti.comp_strictMono",
    "StrictAnti.comp_strictMonoOn",
    "StrictAnti.const_mul",
    "StrictAnti.imp",
    "StrictAnti.mul",
    "StrictAnti.mul_antitone",
    "StrictAnti.mul_const",
    "StrictAnti.prod_map",
    "StrictAntiOn.const_mul",
    "StrictAntiOn.mul",
    "StrictAntiOn.mul_antitone",
    "StrictAntiOn.mul_const",
    "StrictMono.comp_strictAnti",
    "StrictMono.comp_strictAntiOn",
    "StrictMono.const_mul",
    "StrictMono.imp",
    "StrictMono.mul",
    "StrictMono.mul_const",
    "StrictMono.mul_monotone",
    "StrictMono.prod_map",
    "StrictMonoOn.const_mul",
    "StrictMonoOn.mul",
    "StrictMonoOn.mul_const",
    "StrictMonoOn.mul_monotone",
    "Subtype.mono_coe",
    "Subtype.strictMono_coe",
    "add_lt_add_iff_left",
    "and_forall_ne",
    "and_iff_not_or_not",
    "and_or_imp",
    "and_symm_left",
    "and_symm_right",
    "antitone",
    "antitoneOn_const",
    "antitoneOn_iff_forall_lt",
    "antitone_app",
    "antitone_const",
    "antitone_iff_apply\u2082",
    "antitone_iff_forall_lt",
    "antitone_lam",
    "antitone_prod_iff",
    "apply_dite\u2082",
    "apply_ite\u2082",
    "beq_eq_decide",
    "beq_ext",
    "bex_def",
    "binaryRec_decreasing",
    "binaryRec_eq",
    "binaryRec_one",
    "binaryRec_zero",
    "bit0_bits",
    "bit1_bits",
    "bitCasesOn_bit",
    "bitCasesOn_bit0",
    "bitCasesOn_bit1",
    "bit_add",
    "bit_cases_on_inj",
    "bit_cases_on_injective",
    "bit_decide_mod_two_eq_one_shiftRight_one",
    "bit_decomp",
    "bit_div_two",
    "bit_eq_zero_iff",
    "bit_le",
    "bit_lt_bit",
    "bit_mod_two",
    "bit_ne_zero",
    "bit_shiftRight_one",
    "bit_testBit_zero_shiftRight_one",
    "bit_val",
    "bit_zero",
    "bits_append_bit",
    "boddDiv2_eq",
    "bodd_add",
    "bodd_add_div2",
    "bodd_bit",
    "bodd_eq_bits_head",
    "bodd_eq_one_and_ne_zero",
    "bodd_mul",
    "bodd_succ",
    "bodd_two",
    "bot_eq_one",
    "by_cases",
    "by_contradiction",
    "cast_heq_iff_heq",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "choose_eq",
    "cmp_mul_left",
    "cmp_mul_right",
    "congr_arg_heq",
    "congr_arg_refl",
    "congr_fun_congr_arg",
    "congr_fun_rfl",
    "congr_heq",
    "congr_refl_left",
    "congr_refl_right",
    "const_mono",
    "const_strictMono",
    "dec_em",
    "dite_apply",
    "dite_dite_comm",
    "dite_eq_iff",
    "dite_eq_or_eq",
    "dite_mem",
    "dite_ne_left_iff",
    "dite_ne_right_iff",
    "dite_prop_iff_and",
    "dite_prop_iff_or",
    "div2_bit",
    "div2_bit0",
    "div2_bit1",
    "div2_bits_eq_tail",
    "div2_succ",
    "div2_two",
    "div2_val",
    "div_eq_mul_inv",
    "div_mul_cancel",
    "div_self",
    "em",
    "eqRec_heq",
    "eq_cast_iff_heq",
    "eq_equivalence",
    "eq_false_intro",
    "eq_inv_of_mul_eq_one_left",
    "eq_ite_iff",
    "eq_one_of_mul_le_one_left",
    "eq_one_of_mul_le_one_right",
    "eq_one_of_one_le_mul_left",
    "eq_one_of_one_le_mul_right",
    "eq_or_ne",
    "eq_true_intro",
    "exists_and_exists_comm",
    "exists_apply_eq",
    "exists_apply_eq_apply",
    "exists_apply_eq_apply2",
    "exists_apply_eq_apply3",
    "exists_iff_of_forall",
    "exists_mem_of_exists",
    "exists_mem_or",
    "exists_mem_or_left",
    "exists_of_exists_mem",
    "exists_one_lt_mul_of_lt",
    "exists_or_forall_not",
    "exists_prop_of_false",
    "exists_square_le",
    "exists_swap",
    "exists_zpow_surjective",
    "exists\u2082_comm",
    "ext_cauchy",
    "ext_cauchy_iff",
    "fact_iff",
    "forall_and_left",
    "forall_and_right",
    "forall_apply_eq_imp_iff",
    "forall_cond_comm",
    "forall_eq_apply_imp_iff",
    "forall_imp_iff_exists_imp",
    "forall_mem_comm",
    "forall_or_exists_not",
    "forall_or_left",
    "forall_or_of_or_forall",
    "forall_or_right",
    "forall_prop_congr",
    "forall_swap",
    "forall_true_iff",
    "forall\u2082_and",
    "forall\u2082_imp",
    "forall\u2082_or_left",
    "forall\u2082_swap",
    "forall\u2082_true_iff",
    "forall\u2083_imp",
    "forall\u2083_true_iff",
    "heq_cast_iff_heq",
    "heq_of_eq_cast",
    "heq_rec_iff_heq",
    "if_congr",
    "if_ctx_congr",
    "iff_eq_eq",
    "iff_iff_and_or_not_and_not",
    "iff_iff_not_or_and_or_not",
    "iff_mpr_iff_true_intro",
    "iff_not_comm",
    "imp_and_neg_imp_iff",
    "imp_congr_ctx_eq",
    "imp_congr_eq",
    "imp_forall_iff",
    "imp_forall_iff_forall",
    "imp_iff_not_or",
    "imp_iff_or_not",
    "imp_iff_right_iff",
    "imp_or",
    "injective_of_le_imp_le",
    "injective_of_lt_imp_ne",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_one_div",
    "inv_inv",
    "inv_mul_cancel",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_one",
    "inv_sign",
    "ite_and",
    "ite_apply",
    "ite_eq_iff",
    "ite_eq_or_eq",
    "ite_ite_comm",
    "ite_mem",
    "ite_ne_left_iff",
    "ite_ne_right_iff",
    "ite_or",
    "ite_prop_iff_and",
    "ite_prop_iff_or",
    "lawful_beq_subsingleton",
    "le_iff_exists_mul",
    "le_mk_of_forall_le",
    "le_mul_iff_one_le_left",
    "le_mul_iff_one_le_right",
    "le_mul_of_le_left",
    "le_mul_of_le_mul_left",
    "le_mul_of_le_mul_right",
    "le_mul_of_le_of_one_le",
    "le_mul_of_le_right",
    "le_mul_of_one_le_left",
    "le_mul_of_one_le_of_le",
    "le_mul_of_one_le_right",
    "le_mul_self",
    "le_of_le_mul_of_le_one_left",
    "le_of_le_mul_of_le_one_right",
    "le_of_mul_le_left",
    "le_of_mul_le_mul_left",
    "le_of_mul_le_mul_right",
    "le_of_mul_le_of_one_le_left",
    "le_of_mul_le_of_one_le_right",
    "le_of_mul_le_right",
    "le_one_of_mul_le_left",
    "le_one_of_mul_le_right",
    "le_self_mul",
    "lt_cauchy",
    "lt_iff_exists_mul",
    "lt_mul_iff_one_lt_left",
    "lt_mul_iff_one_lt_right",
    "lt_mul_of_le_of_one_lt",
    "lt_mul_of_lt_mul_left",
    "lt_mul_of_lt_mul_right",
    "lt_mul_of_lt_of_one_le",
    "lt_mul_of_lt_of_one_lt",
    "lt_mul_of_one_le_of_lt",
    "lt_mul_of_one_lt_left",
    "lt_mul_of_one_lt_of_le",
    "lt_mul_of_one_lt_of_lt",
    "lt_mul_of_one_lt_right",
    "lt_of_lt_mul_of_le_one_left",
    "lt_of_lt_mul_of_le_one_right",
    "lt_of_mul_lt_mul_left",
    "lt_of_mul_lt_mul_right",
    "lt_of_mul_lt_of_one_le_left",
    "lt_of_mul_lt_of_one_le_right",
    "lt_one_of_mul_lt_left",
    "lt_one_of_mul_lt_right",
    "max_mul",
    "max_mul_mul_le_max_mul_max",
    "mem_dite",
    "mem_ite",
    "min_mul",
    "min_mul_distrib",
    "min_mul_min_le_min_mul_mul",
    "min_one",
    "mk_add",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mod_two_of_bodd",
    "monotone",
    "monotoneOn_const",
    "monotoneOn_id",
    "monotoneOn_iff_forall_lt",
    "monotone_app",
    "monotone_const",
    "monotone_fst",
    "monotone_id",
    "monotone_iff_apply\u2082",
    "monotone_iff_forall_lt",
    "monotone_lam",
    "monotone_prod_iff",
    "monotone_snd",
    "mulLECancellable_mul",
    "mulLECancellable_one",
    "mul_add_one_le_add_one_pow",
    "mul_assoc",
    "mul_comm",
    "mul_div_assoc",
    "mul_div_cancel_right",
    "mul_eq_one_iff_of_one_le",
    "mul_inv_cancel",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_rev",
    "mul_le_iff_le_one_left",
    "mul_le_iff_le_one_right",
    "mul_le_mul",
    "mul_le_mul_iff_left",
    "mul_le_mul_iff_right",
    "mul_le_mul_left",
    "mul_le_mul_right",
    "mul_le_mul_three",
    "mul_le_of_le_of_le_one",
    "mul_le_of_le_one_left",
    "mul_le_of_le_one_of_le",
    "mul_le_of_le_one_right",
    "mul_le_of_mul_le_left",
    "mul_le_of_mul_le_right",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_inj",
    "mul_left_inj_of_comparable",
    "mul_left_injective",
    "mul_left_mono",
    "mul_left_strictMono",
    "mul_lt_iff_lt_one_left",
    "mul_lt_iff_lt_one_right",
    "mul_lt_mul_iff_left",
    "mul_lt_mul_iff_right",
    "mul_lt_mul_left",
    "mul_lt_mul_of_le_of_lt",
    "mul_lt_mul_of_lt_of_le",
    "mul_lt_mul_of_lt_of_lt",
    "mul_lt_mul_right",
    "mul_lt_of_le_of_lt_one",
    "mul_lt_of_le_one_of_lt",
    "mul_lt_of_lt_of_le_one",
    "mul_lt_of_lt_of_lt_one",
    "mul_lt_of_lt_one_left",
    "mul_lt_of_lt_one_of_le",
    "mul_lt_of_lt_one_of_lt",
    "mul_lt_of_lt_one_right",
    "mul_lt_of_mul_lt_left",
    "mul_lt_of_mul_lt_right",
    "mul_max",
    "mul_min",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_inj",
    "mul_right_inj_of_comparable",
    "mul_right_injective",
    "mul_right_mono",
    "mul_right_strictMono",
    "ne_and_eq_iff_right",
    "ne_of_eq_of_ne",
    "ne_of_ne_of_eq",
    "ne_or_eq",
    "negSucc_zsmul",
    "not_and_not_right",
    "not_and_or",
    "not_beq_of_ne",
    "not_exists_mem",
    "not_forall_not",
    "not_forall\u2082",
    "not_forall\u2082_of_exists\u2082_not",
    "not_iff",
    "not_iff_comm",
    "not_iff_not",
    "not_imp",
    "not_imp_comm",
    "not_imp_not",
    "not_ne_iff",
    "not_or_of_imp",
    "npowBinRec.go_spec",
    "npowRec",
    "npowRec_eq",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_gt",
    "of_not_imp",
    "of_not_not",
    "one_bits",
    "one_div",
    "one_le",
    "one_le_of_le_mul_left",
    "one_le_of_le_mul_right",
    "one_lt_mul_iff",
    "one_lt_of_gt",
    "one_lt_of_lt_mul_left",
    "one_lt_of_lt_mul_right",
    "one_min",
    "one_mul",
    "or_congr_left",
    "or_congr_right",
    "or_iff_not_and_not",
    "or_not",
    "or_not_of_imp",
    "peirce",
    "pos",
    "pow_add",
    "pow_mul",
    "pow_mul_comm",
    "pow_one",
    "pow_right_comm",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "ratCast_lt",
    "rec_heq_iff_heq",
    "rec_heq_of_heq",
    "self_le_mul_left",
    "self_le_mul_right",
    "shiftLeft",
    "shiftLeft_sub",
    "shiftRight_one",
    "sign_apply_eq",
    "sign_apply_eq_of_ne_zero",
    "sign_eq_zero_iff",
    "sign_intCast",
    "sign_inv",
    "sign_mul_nonneg",
    "sign_mul_pos_of_ne_zero",
    "sign_neg",
    "sign_of_neg",
    "sign_of_pos",
    "sign_one",
    "sign_zero",
    "some_spec\u2082",
    "strictAnti_of_le_iff_le",
    "strictMonoOn_id",
    "strictMono_id",
    "strictMono_of_le_iff_le",
    "testBit_bit_succ",
    "testBit_bit_zero",
    "update_mono",
    "update_strictMono",
    "xor_comm",
    "xor_iff_iff_not",
    "xor_iff_not_iff",
    "xor_iff_or_and_not_and",
    "xor_not_not",
    "zero_bits",
    "zpow_natCast",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one"
  ]
}