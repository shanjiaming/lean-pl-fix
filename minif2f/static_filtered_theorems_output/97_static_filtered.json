{
  "selected_library_modules": [
    "Mathlib.Data.Nat.Digits",
    "Mathlib.Data.Real.Basic"
  ],
  "theorems": [
    "add_lt_add_iff_left",
    "base_pow_length_digits_le",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_int_ofDigits",
    "coe_ofDigits",
    "digit_sum_le",
    "digits.injective",
    "digitsAux_def",
    "digitsAux_zero",
    "digits_add",
    "digits_add_two_add_one",
    "digits_append_digits",
    "digits_append_zeroes_append_digits",
    "digits_base_pow_mul",
    "digits_def",
    "digits_eq_cons_digits_div",
    "digits_eq_nil_iff_eq_zero",
    "digits_getLast",
    "digits_inj_iff",
    "digits_len",
    "digits_len_le_digits_len_succ",
    "digits_lt_base",
    "digits_ne_nil_iff_ne_zero",
    "digits_ofDigits",
    "digits_of_lt",
    "digits_of_two_le_of_pos",
    "digits_one",
    "digits_one_succ",
    "digits_succ",
    "digits_two_eq_bits",
    "digits_zero",
    "digits_zero_of_eq_zero",
    "digits_zero_succ",
    "digits_zero_zero",
    "dvd_iff_dvd_digits_sum",
    "dvd_iff_dvd_ofDigits",
    "dvd_ofDigits_sub_ofDigits",
    "eleven_dvd_iff",
    "eleven_dvd_of_palindrome",
    "ext_cauchy",
    "ext_cauchy_iff",
    "getLast_digit_ne_zero",
    "head",
    "le_digits_len_le",
    "le_mk_of_forall_le",
    "lt_base_pow_length_digits",
    "lt_cauchy",
    "mk_add",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "modEq_digits_sum",
    "modEq_eleven_digits_sum",
    "modEq_nine_digits_sum",
    "modEq_three_digits_sum",
    "mul_add_one_le_add_one_pow",
    "mul_ofDigits",
    "nat_repr_len_aux",
    "nine_dvd_iff",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq",
    "ofDigits_append",
    "ofDigits_cons",
    "ofDigits_digits",
    "ofDigits_digits_append_digits",
    "ofDigits_div_eq_ofDigits_tail",
    "ofDigits_div_pow_eq_ofDigits_drop",
    "ofDigits_eq_foldr",
    "ofDigits_eq_sum_mapIdx",
    "ofDigits_eq_sum_mapIdx_aux",
    "ofDigits_inj_of_len_eq",
    "ofDigits_lt_base_pow_length",
    "ofDigits_mod",
    "ofDigits_modEq",
    "ofDigits_mod_eq_head",
    "ofDigits_monotone",
    "ofDigits_neg_one",
    "ofDigits_nil",
    "ofDigits_one",
    "ofDigits_one_cons",
    "ofDigits_singleton",
    "ofDigits_zmod",
    "ofDigits_zmodeq",
    "ofRat_rat",
    "pow_length_le_mul_ofDigits",
    "ratCast_lt",
    "repr_length",
    "self_div_pow_eq_ofDigits_drop",
    "sub_one_mul_sum_div_pow_eq_sub_sum_digits",
    "sub_one_mul_sum_log_div_pow_eq_sub_sum_digits",
    "sum_le_ofDigits",
    "three_dvd_iff",
    "toDigitsCore_length",
    "toDigitsCore_lens_eq",
    "toDigitsCore_lens_eq_aux",
    "zmodeq_ofDigits_digits"
  ]
}