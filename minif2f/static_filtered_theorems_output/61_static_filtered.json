{
  "selected_library_modules": [
    "Mathlib.Algebra.Group.Basic",
    "Mathlib.Algebra.Group.Defs",
    "Mathlib.Data.Nat.Count",
    "Mathlib.Data.Real.Basic",
    "Mathlib.NumberTheory.Divisors"
  ],
  "theorems": [
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "MulOneClass.ext",
    "Prime.divisors",
    "Prime.prod_divisors",
    "Prime.prod_properDivisors",
    "Prime.properDivisors",
    "add_lt_add_iff_left",
    "card_divisors_le_self",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "comp_mul_left",
    "comp_mul_right",
    "conj_eq_one_iff",
    "cons_self_properDivisors",
    "count_add",
    "count_eq_card_filter_range",
    "count_eq_card_fintype",
    "count_iff_forall",
    "count_iff_forall_not",
    "count_injective",
    "count_le",
    "count_le_card",
    "count_lt_card",
    "count_lt_count_succ_iff",
    "count_mono_left",
    "count_monotone",
    "count_one",
    "count_strict_mono",
    "count_succ",
    "count_succ_eq_count_iff",
    "count_succ_eq_succ_count_iff",
    "count_zero",
    "disjoint_divisors_filter_isPrimePow",
    "dite_pow",
    "div_div",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_div_comm",
    "div_div_div_eq",
    "div_div_eq_mul_div",
    "div_div_self",
    "div_eq_div_iff_comm",
    "div_eq_div_iff_div_eq_div",
    "div_eq_div_iff_mul_eq_mul",
    "div_eq_div_mul_div",
    "div_eq_iff_eq_mul",
    "div_eq_inv_mul",
    "div_eq_inv_self",
    "div_eq_mul_inv",
    "div_eq_mul_one_div",
    "div_eq_of_eq_mul",
    "div_eq_one",
    "div_eq_self",
    "div_inv_eq_mul",
    "div_left_inj",
    "div_left_injective",
    "div_mul",
    "div_mul_cancel",
    "div_mul_cancel_left",
    "div_mul_cancel_right",
    "div_mul_comm",
    "div_mul_div_cancel",
    "div_mul_div_comm",
    "div_mul_eq_div_div",
    "div_mul_eq_div_div_swap",
    "div_mul_eq_div_mul_one_div",
    "div_mul_eq_mul_div",
    "div_mul_mul_cancel",
    "div_ne_one",
    "div_ne_one_of_ne",
    "div_one",
    "div_pow",
    "div_right_comm",
    "div_right_inj",
    "div_right_injective",
    "div_self",
    "div_zpow",
    "divisor_le",
    "divisorsAntidiag_natCast",
    "divisorsAntidiag_neg",
    "divisorsAntidiag_neg_natCast",
    "divisorsAntidiag_ofNat",
    "divisorsAntidiagonal_four",
    "divisorsAntidiagonal_one",
    "divisorsAntidiagonal_three",
    "divisorsAntidiagonal_two",
    "divisorsAntidiagonal_zero",
    "divisors_eq_empty",
    "divisors_filter_dvd_of_dvd",
    "divisors_inj",
    "divisors_injective",
    "divisors_one",
    "divisors_prime_pow",
    "divisors_subset_of_dvd",
    "divisors_subset_properDivisors",
    "divisors_zero",
    "dvd_of_mem_divisors",
    "eq_div_iff_mul_eq",
    "eq_div_of_mul_eq",
    "eq_iff_eq_of_div_eq_div",
    "eq_inv_iff_mul_eq_one",
    "eq_inv_mul_iff_mul_eq",
    "eq_inv_mul_of_mul_eq",
    "eq_inv_of_mul_eq_one_left",
    "eq_inv_of_mul_eq_one_right",
    "eq_mul_inv_iff_mul_eq",
    "eq_mul_inv_of_mul_eq",
    "eq_mul_of_div_eq",
    "eq_mul_of_inv_mul_eq",
    "eq_mul_of_mul_inv_eq",
    "eq_of_div_eq_one",
    "eq_of_inv_mul_eq_one",
    "eq_of_mul_inv_eq_one",
    "eq_of_one_div_eq_one_div",
    "eq_one_div_of_mul_eq_one_left",
    "eq_one_div_of_mul_eq_one_right",
    "eq_one_iff_eq_one_of_mul_eq_one",
    "eq_properDivisors_of_subset_of_sum_eq_sum",
    "exists_zpow_surjective",
    "ext_cauchy",
    "ext_cauchy_iff",
    "filter_dvd_eq_divisors",
    "filter_dvd_eq_properDivisors",
    "fst_mem_divisors_of_mem_antidiagonal",
    "hom_coe_pow",
    "image_div_divisors_eq_divisors",
    "image_fst_divisorsAntidiagonal",
    "image_snd_divisorsAntidiagonal",
    "insert_self_properDivisors",
    "inv_comp_inv",
    "inv_div",
    "inv_div_inv",
    "inv_div_left",
    "inv_eq_iff_eq_inv",
    "inv_eq_iff_mul_eq_one",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_one",
    "inv_eq_one_div",
    "inv_inj",
    "inv_injective",
    "inv_inv",
    "inv_inv_div_inv",
    "inv_involutive",
    "inv_mul",
    "inv_mul_cancel",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_eq_div",
    "inv_mul_eq_iff_eq_mul",
    "inv_mul_eq_of_eq_mul",
    "inv_mul_eq_one",
    "inv_ne_one",
    "inv_one",
    "inv_pow",
    "inv_pow_sub",
    "inv_surjective",
    "inv_unique",
    "inv_zpow",
    "ite_mul_one",
    "ite_one_mul",
    "ite_pow",
    "le_mk_of_forall_le",
    "leftInverse_div_mul_left",
    "leftInverse_inv",
    "leftInverse_inv_mul_mul_right",
    "leftInverse_mul_left_div",
    "leftInverse_mul_right_inv_mul",
    "left_eq_mul",
    "left_ne_mul",
    "left_ne_zero_of_mem_divisorsAntidiagonal",
    "lt_cauchy",
    "lt_of_count_lt_count",
    "map_div_left_divisors",
    "map_div_right_divisors",
    "map_neg_divisorsAntidiag",
    "map_prodComm_divisorsAntidiag",
    "map_swap_divisorsAntidiagonal",
    "mem_divisors",
    "mem_divisorsAntidiag",
    "mem_divisorsAntidiagonal",
    "mem_divisors_prime_pow",
    "mem_divisors_self",
    "mem_properDivisors",
    "mem_properDivisors_iff_exists",
    "mem_properDivisors_prime_pow",
    "mk_add",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one_le_add_one_pow",
    "mul_assoc",
    "mul_comm",
    "mul_comm_div",
    "mul_div",
    "mul_div_assoc",
    "mul_div_cancel",
    "mul_div_cancel_left",
    "mul_div_cancel_right",
    "mul_div_div_cancel",
    "mul_div_left_comm",
    "mul_div_mul_comm",
    "mul_div_mul_left_eq_div",
    "mul_div_mul_right_eq_div",
    "mul_div_right_comm",
    "mul_eq_left",
    "mul_eq_of_eq_div",
    "mul_eq_of_eq_inv_mul",
    "mul_eq_of_eq_mul_inv",
    "mul_eq_one_iff_eq_inv",
    "mul_eq_one_iff_inv_eq",
    "mul_eq_right",
    "mul_inv",
    "mul_inv_cancel",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_eq_iff_eq_mul",
    "mul_inv_eq_of_eq_mul",
    "mul_inv_eq_one",
    "mul_inv_rev",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_comm",
    "mul_left_inj",
    "mul_left_injective",
    "mul_left_iterate",
    "mul_left_iterate_apply_one",
    "mul_left_surjective",
    "mul_mem_one_two_three_iff",
    "mul_mem_zero_one_two_three_four_iff",
    "mul_mul_div_cancel",
    "mul_mul_inv_cancel",
    "mul_mul_mul_comm",
    "mul_ne_left",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_ne_right",
    "mul_one",
    "mul_one_div",
    "mul_one_eq_id",
    "mul_pow_sub_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_comm",
    "mul_right_inj",
    "mul_right_injective",
    "mul_right_iterate",
    "mul_right_iterate_apply_one",
    "mul_right_surjective",
    "mul_rotate",
    "mul_self_zpow",
    "mul_zpow_neg_one",
    "mul_zpow_self",
    "multiplicative_of_isTotal",
    "multiplicative_of_symmetric_of_isTotal",
    "ne_zero_of_mem_divisorsAntidiagonal",
    "negSucc_zsmul",
    "neg_mem_divisorsAntidiag",
    "nonempty_divisors",
    "nonempty_properDivisors",
    "npowBinRec.go_spec",
    "npowRec",
    "npowRec_eq",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_div",
    "one_div_div",
    "one_div_mul_eq_div",
    "one_div_mul_one_div",
    "one_div_mul_one_div_rev",
    "one_div_one",
    "one_div_one_div",
    "one_div_pow",
    "one_div_zpow",
    "one_eq_inv",
    "one_lt_div_of_mem_properDivisors",
    "one_lt_of_mem_properDivisors",
    "one_mem_divisors",
    "one_mem_properDivisors_iff_one_lt",
    "one_mul",
    "one_mul_eq_id",
    "one_zpow",
    "perfect_iff_sum_divisors_eq_two_mul",
    "perfect_iff_sum_properDivisors",
    "pos_of_mem_divisors",
    "pos_of_mem_properDivisors",
    "pow_add",
    "pow_boole",
    "pow_dite",
    "pow_eq_pow_mod",
    "pow_ite",
    "pow_iterate",
    "pow_mul",
    "pow_mul_comm",
    "pow_mul_pow_sub",
    "pow_natAbs_eq_one",
    "pow_one",
    "pow_right_comm",
    "pow_sub",
    "pow_sub_mul_pow",
    "pow_sub_one_mul",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "primeFactors_eq_to_filter_divisors_prime",
    "primeFactors_filter_dvd_of_dvd",
    "prodMk_mem_divisorsAntidiag",
    "prod_div_divisors",
    "prod_divisorsAntidiagonal",
    "prod_divisors_prime_pow",
    "prod_properDivisors_prime_pow",
    "properDivisors.not_self_mem",
    "properDivisors_eq_empty",
    "properDivisors_eq_singleton_one_iff_prime",
    "properDivisors_one",
    "properDivisors_prime_pow",
    "properDivisors_subset_divisors",
    "properDivisors_zero",
    "ratCast_lt",
    "rightInverse_inv",
    "right_eq_mul",
    "right_ne_mul",
    "right_ne_zero_of_mem_divisorsAntidiagonal",
    "snd_mem_divisors_of_mem_antidiagonal",
    "sum_divisors_eq_sum_properDivisors_add_self",
    "sum_properDivisors_dvd",
    "sum_properDivisors_eq_one_iff_prime",
    "sup_divisors_id",
    "swap_mem_divisorsAntidiag",
    "swap_mem_divisorsAntidiagonal",
    "swap_mem_divisorsAntidiagonal_aux",
    "zpow_add",
    "zpow_add_one",
    "zpow_comm",
    "zpow_eq_zpow_emod",
    "zpow_induction_left",
    "zpow_induction_right",
    "zpow_iterate",
    "zpow_mul",
    "zpow_natCast",
    "zpow_natCast_sub_natCast",
    "zpow_natCast_sub_one",
    "zpow_neg",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one",
    "zpow_one_add",
    "zpow_one_sub_natCast",
    "zpow_sub_one"
  ]
}