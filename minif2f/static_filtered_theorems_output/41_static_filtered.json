{
  "selected_library_modules": [
    "Mathlib.Algebra.Group.Action.Defs",
    "Mathlib.Algebra.Group.Defs",
    "Mathlib.Data.Finset.Defs",
    "Mathlib.Data.Real.Basic"
  ],
  "theorems": [
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Commute.smul_left",
    "Commute.smul_right",
    "Function.Injective.smulCommClass",
    "Function.Surjective.smulCommClass",
    "IsCentralScalar.unop_smul_eq_smul",
    "IsScalarTower.of_smul_one_mul",
    "MulOneClass.ext",
    "MulOpposite.smul_eq_mul_unop",
    "SMulCommClass.of_commMonoid",
    "SMulCommClass.of_mul_smul_one",
    "SMulCommClass.symm",
    "Subset.antisymm",
    "Subset.antisymm_iff",
    "Subset.refl",
    "Subset.trans",
    "Superset.trans",
    "add_lt_add_iff_left",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_coeEmb",
    "coe_inj",
    "coe_injective",
    "coe_mem",
    "coe_sort_coe",
    "coe_ssubset",
    "coe_subset",
    "comp.isScalarTower",
    "comp.smulCommClass",
    "comp_smul_left",
    "div_eq_mul_inv",
    "div_mul_cancel",
    "div_self",
    "eq_inv_of_mul_eq_one_left",
    "eq_of_veq",
    "exists_of_ssubset",
    "exists_zpow_surjective",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_eq_one_div",
    "inv_inv",
    "inv_mul_cancel",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_one",
    "inv_smul_smul",
    "le_eq_subset",
    "le_iff_subset",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "lt_eq_subset",
    "lt_iff_ssubset",
    "mem_coe",
    "mem_def",
    "mem_mk",
    "mem_of_subset",
    "mem_val",
    "mk_add",
    "mk_coe",
    "mk_const",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one_le_add_one_pow",
    "mul_assoc",
    "mul_comm",
    "mul_div_assoc",
    "mul_div_cancel_right",
    "mul_inv_cancel",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_rev",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_inj",
    "mul_left_injective",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_inj",
    "mul_right_injective",
    "mul_smul_comm",
    "mul_smul_mul_comm",
    "mul_smul_one",
    "negSucc_zsmul",
    "not_mem_mono",
    "not_subset",
    "npowBinRec.go_spec",
    "npowRec",
    "npowRec_eq",
    "npowRec_eq_npowBinRec",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_div",
    "one_mul",
    "one_smul",
    "one_smul_eq_id",
    "op_smul_eq_mul",
    "pairwise_subtype_iff_pairwise_finset",
    "pow_add",
    "pow_mul",
    "pow_mul_comm",
    "pow_one",
    "pow_right_comm",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "ratCast_lt",
    "setOf_mem",
    "smul_assoc",
    "smul_div_assoc",
    "smul_eq_mul",
    "smul_inv",
    "smul_inv_smul",
    "smul_iterate",
    "smul_iterate_apply",
    "smul_mul",
    "smul_mul_assoc",
    "smul_mul_smul_comm",
    "smul_one_mul",
    "smul_one_smul",
    "smul_pow",
    "smul_smul",
    "smul_smul_smul_comm",
    "smul_zpow",
    "ssubset_def",
    "ssubset_iff_of_subset",
    "ssubset_iff_subset_ne",
    "ssubset_of_ssubset_of_subset",
    "ssubset_of_subset_of_ssubset",
    "subset_def",
    "subset_iff",
    "subset_of_le",
    "val_inj",
    "val_injective",
    "val_le_iff",
    "val_lt_iff",
    "val_strictMono",
    "zpow_natCast",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one"
  ]
}