{
  "selected_library_modules": [
    "Mathlib.Algebra.Group.Action.Defs",
    "Mathlib.Algebra.Group.Defs",
    "Mathlib.Data.Real.Basic"
  ],
  "theorems": [
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Commute.smul_left",
    "Commute.smul_right",
    "Function.End.mul_def",
    "Function.End.one_def",
    "Function.Injective.smulCommClass",
    "Function.Surjective.smulCommClass",
    "IsCentralScalar.unop_smul_eq_smul",
    "IsPretransitive.of_compHom",
    "IsPretransitive.of_smul_eq",
    "IsScalarTower.of_smul_one_mul",
    "MulAction.IsPretransitive.of_isScalarTower",
    "MulOneClass.ext",
    "SMul.smul_eq_hSMul",
    "SMulCommClass.of_mul_smul_one",
    "SMulCommClass.symm",
    "add_lt_add_iff_left",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "comp.isScalarTower",
    "comp.smulCommClass",
    "compHom_smul_def",
    "comp_smul_left",
    "div_eq_mul_inv",
    "eq_inv_of_mul_eq_one_left",
    "exists_smul_eq",
    "ext_cauchy",
    "ext_cauchy_iff",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_inv",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_self",
    "inv_one",
    "isPretransitive_compHom",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_assoc",
    "mul_comm",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_rev",
    "mul_inv_self",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_inv",
    "mul_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_inv",
    "mul_smul_comm",
    "mul_smul_one",
    "negSucc_zsmul",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_mul",
    "one_smul",
    "one_smul_eq_id",
    "pow_add",
    "pow_mul",
    "pow_mul_comm",
    "pow_one",
    "pow_right_comm",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "ratCast_lt",
    "smul_assoc",
    "smul_div_assoc",
    "smul_eq_mul",
    "smul_left_injective",
    "smul_mul_assoc",
    "smul_mul_smul",
    "smul_one_mul",
    "smul_one_smul",
    "smul_pow",
    "smul_smul",
    "smul_smul_smul_comm",
    "surjective_smul",
    "toFun_apply",
    "zpow_natCast",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one"
  ]
}