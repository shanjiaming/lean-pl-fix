enum Theorem {
    "Dvd.dvd.even",
    "Even.add_odd",
    "Even.isSquare_zpow",
    "Even.neg_one_pow",
    "Even.neg_one_zpow",
    "Even.neg_zpow",
    "Even.odd_add",
    "Even.pow_of_ne_zero",
    "Even.sub_odd",
    "Even.trans_dvd",
    "IsSquare.div",
    "IsSquare.map",
    "IsSquare.mul",
    "Odd.add_even",
    "Odd.add_odd",
    "Odd.map",
    "Odd.natCast",
    "Odd.neg",
    "Odd.neg_pow",
    "Odd.of_mul_left",
    "Odd.of_mul_right",
    "Odd.pow",
    "Odd.pow_add_pow_eq_zero",
    "Odd.sub_even",
    "Odd.sub_odd",
    "_root_.Odd.not_two_dvd_nat",
    "add_lt_add_iff_left",
    "bit0_div_bit0",
    "bit0_div_two",
    "bit0_mod_bit0",
    "bit1_div_bit0",
    "bit1_div_two",
    "bit1_mod_bit0",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "div_two_mul_two_add_one_of_odd",
    "even_add",
    "even_div",
    "even_iff_exists_two_mul",
    "even_iff_not_odd",
    "even_iff_two_dvd",
    "even_neg_two",
    "even_ofMul_iff",
    "even_or_odd",
    "even_sub",
    "even_toAdd_iff",
    "even_two_mul",
    "even_xor_odd",
    "ext_cauchy",
    "ext_cauchy_iff",
    "isSquare_iff_exists_sq",
    "isSquare_one",
    "isSquare_op_iff",
    "isSquare_toMul_iff",
    "isSquare_unop_iff",
    "iterate_bit0",
    "iterate_bit1",
    "iterate_eq_id",
    "iterate_eq_self",
    "iterate_even",
    "iterate_odd",
    "iterate_two_mul",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mod_two_add_add_odd_mod_two",
    "ne_of_odd_add",
    "neg_one_pow_eq_one_iff_even",
    "not_even_two_mul_add_one",
    "not_odd_iff",
    "odd_add",
    "odd_iff",
    "odd_iff_exists_bit1",
    "odd_mul",
    "odd_neg_one",
    "odd_sub",
    "odd_two_mul_add_one",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_add_div_two_mul_two_of_odd",
    "ratCast_lt",
    "two_mul_div_two_add_one_of_odd"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
