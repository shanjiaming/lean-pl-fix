enum Theorem {
    "GroupWithZero.mul_left_injective",
    "GroupWithZero.mul_right_injective",
    "IsUnit.mk0",
    "IsUnit.ring_inverse",
    "Perm.coe_subsingleton",
    "Perm.ext_iff",
    "Perm.subsingleton_eq_refl",
    "Ring.inverse_eq_inv",
    "Units.mk0_mul",
    "_root_.EquivLike.coe_coe",
    "_root_.GroupWithZero.eq_zero_or_unit",
    "add_lt_add_iff_left",
    "apply_eq_iff_eq",
    "apply_eq_iff_eq_symm_apply",
    "arrowCongr_comp",
    "bijective_comp",
    "cast_eq_iff_heq",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_fn_injective",
    "comp_bijective",
    "comp_injective",
    "comp_surjective",
    "comp_symm_eq",
    "conj_comp",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_self",
    "div_eq_div_iff_div_eq_div",
    "div_eq_iff_mul_eq",
    "div_eq_of_eq_mul",
    "div_eq_one_iff_eq",
    "div_eq_zero_iff",
    "div_helper",
    "div_left_inj",
    "div_mul_cancel_left₀",
    "div_mul_cancel_of_imp",
    "div_mul_cancel_right₀",
    "div_mul_div_cancel",
    "div_mul_eq_mul_div₀",
    "div_mul_left",
    "div_mul_right",
    "div_ne_zero",
    "div_ne_zero_iff",
    "div_self_mul_self",
    "div_sq_cancel",
    "div_zero",
    "eq_comp_symm",
    "eq_div_iff_mul_eq",
    "eq_div_of_mul_eq",
    "eq_inv_mul_iff_mul_eq₀",
    "eq_mul_inv_iff_mul_eq₀",
    "eq_mul_inverse_iff_mul_eq",
    "eq_mul_of_inv_mul_eq₀",
    "eq_mul_of_mul_inv_eq₀",
    "eq_of_zero_eq_one",
    "eq_symm_apply",
    "eq_symm_comp",
    "eq_zero_of_mul_eq_self_left",
    "eq_zero_of_mul_eq_self_right",
    "eq_zero_of_mul_self_eq_zero",
    "eq_zero_of_one_div_eq_zero",
    "eq_zero_of_zero_eq_one",
    "eq_zero_of_zpow_eq_zero",
    "exists0",
    "exists_iff_ne_zero",
    "ext_cauchy",
    "ext_cauchy_iff",
    "ext_iff",
    "injective_comp",
    "inv_eq_zero",
    "inv_mul",
    "inv_mul_cancel_left₀",
    "inv_mul_cancel_right₀",
    "inv_mul_eq_iff_eq_mul₀",
    "inv_mul_eq_one₀",
    "inv_mul_mul_self",
    "inv_pow_sub_of_lt",
    "inv_pow_sub₀",
    "inverse_mul_cancel",
    "inverse_mul_cancel_left",
    "inverse_mul_cancel_right",
    "inverse_mul_eq_iff_eq_mul",
    "inverse_non_unit",
    "inverse_one",
    "inverse_unit",
    "inverse_zero",
    "isUnit_iff_ne_zero",
    "isUnit_ring_inverse",
    "isUnit_zero_iff",
    "le_mk_of_forall_le",
    "leftInverse_symm",
    "left_eq_mul₀",
    "left_inv",
    "left_ne_zero_of_mul",
    "left_ne_zero_of_mul_eq_one",
    "lt_cauchy",
    "mk0_inj",
    "mk0_one",
    "mk0_val",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_div_cancel_left_of_imp",
    "mul_div_cancel_of_imp",
    "mul_div_cancel₀",
    "mul_div_mul_left",
    "mul_div_mul_right",
    "mul_eq_left₀",
    "mul_eq_mul_left_iff",
    "mul_eq_mul_of_div_eq_div",
    "mul_eq_mul_right_iff",
    "mul_eq_of_eq_inv_mul₀",
    "mul_eq_of_eq_mul_inv₀",
    "mul_eq_one_iff_eq_inv₀",
    "mul_eq_one_iff_inv_eq₀",
    "mul_eq_right₀",
    "mul_eq_zero_of_ne_zero_imp_eq_zero",
    "mul_inv",
    "mul_inv_eq_iff_eq_mul₀",
    "mul_inv_eq_one₀",
    "mul_inv_mul_self",
    "mul_inverse_cancel",
    "mul_inverse_cancel_left",
    "mul_inverse_cancel_right",
    "mul_left_eq_self₀",
    "mul_left_eq_zero",
    "mul_left_surjective₀",
    "mul_mul_div",
    "mul_ne_zero",
    "mul_one_div_cancel",
    "mul_right_eq_self₀",
    "mul_right_eq_zero",
    "mul_right_surjective₀",
    "mul_self_div_self",
    "mul_self_mul_inv",
    "mul_zero_eq_const",
    "ne_zero",
    "ne_zero_and_ne_zero_of_mul",
    "ne_zero_of_one_div_ne_zero",
    "ne_zero_pow",
    "nonempty_congr",
    "not_isUnit_zero",
    "ofBijective_apply_symm_apply",
    "ofBijective_symm_apply_apply",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_div_mul_cancel",
    "one_div_ne_zero",
    "permCongr_def",
    "permCongr_symm_apply",
    "permCongr_trans",
    "pow_eq_zero",
    "pow_eq_zero_of_le",
    "pow_ne_zero",
    "pow_ne_zero_iff",
    "pow_sub_of_lt",
    "pow_sub₀",
    "psigmaCongrRight_refl",
    "psigmaCongrRight_symm",
    "psigmaCongrRight_trans",
    "ratCast_lt",
    "rightInverse_symm",
    "right_eq_mul₀",
    "right_inv",
    "right_ne_zero_of_mul",
    "right_ne_zero_of_mul_eq_one",
    "sigmaCongrRight_refl",
    "sigmaCongrRight_symm",
    "sigmaCongrRight_trans",
    "sq_eq_zero_iff",
    "subsingleton_congr",
    "subsingleton_iff_zero_eq_one",
    "surjective_comp",
    "symm_apply_eq",
    "symm_bijective",
    "symm_comp_eq",
    "trans_assoc",
    "val_mk0",
    "zero_div",
    "zero_eq_inv",
    "zero_mul_eq_const",
    "zero_ne_one_or_forall_eq_0",
    "zero_pow_eq",
    "zero_pow_eq_zero",
    "zero_zpow",
    "zero_zpow_eq",
    "zpow_add",
    "zpow_add_one₀",
    "zpow_add₀",
    "zpow_eq_zero_iff",
    "zpow_ne_zero",
    "zpow_ne_zero_iff",
    "zpow_neg_mul_zpow_self",
    "zpow_one_add₀",
    "zpow_sub_one₀",
    "zpow_sub₀"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
