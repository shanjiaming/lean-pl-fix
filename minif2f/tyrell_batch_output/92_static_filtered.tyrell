enum Theorem {
    "Prime.divisors",
    "Prime.prod_divisors",
    "Prime.prod_properDivisors",
    "Prime.properDivisors",
    "_root_.Dvd.dvd.modEq_zero_nat",
    "_root_.Dvd.dvd.zero_modEq_nat",
    "add_div",
    "add_div_eq_of_add_mod_lt",
    "add_div_eq_of_le_mod_add_mod",
    "add_div_le_add_div",
    "add_le_of_lt",
    "add_lt_add_iff_left",
    "add_mod_add_ite",
    "add_mod_add_of_le_add_mod",
    "add_mod_of_add_mod_lt",
    "cancel_left_div_gcd",
    "cancel_left_of_coprime",
    "cancel_right_div_gcd",
    "cancel_right_of_coprime",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "chineseRemainder",
    "chineseRemainder_lt_mul",
    "chineseRemainder_modEq_unique",
    "cons_self_properDivisors",
    "coprime_of_mul_modEq_one",
    "divisor_le",
    "divisorsAntidiagonal_one",
    "divisorsAntidiagonal_zero",
    "divisors_eq_empty",
    "divisors_filter_dvd_of_dvd",
    "divisors_inj",
    "divisors_injective",
    "divisors_one",
    "divisors_prime_pow",
    "divisors_subset_of_dvd",
    "divisors_subset_properDivisors",
    "divisors_zero",
    "dvd_iff",
    "dvd_of_mem_divisors",
    "eq_of_abs_lt",
    "eq_of_lt_of_lt",
    "eq_properDivisors_of_subset_of_sum_eq_sum",
    "ext_cauchy",
    "ext_cauchy_iff",
    "filter_dvd_eq_divisors",
    "filter_dvd_eq_properDivisors",
    "fst_mem_divisors_of_mem_antidiagonal",
    "gcd_eq",
    "image_div_divisors_eq_divisors",
    "image_fst_divisorsAntidiagonal",
    "image_snd_divisorsAntidiagonal",
    "insert_self_properDivisors",
    "le_mk_of_forall_le",
    "le_mod_add_mod_of_dvd_add_of_not_dvd",
    "le_of_lt_add",
    "left_ne_zero_of_mem_divisorsAntidiagonal",
    "lt_cauchy",
    "map_div_left_divisors",
    "map_div_right_divisors",
    "map_swap_divisorsAntidiagonal",
    "mem_divisors",
    "mem_divisorsAntidiagonal",
    "mem_divisors_prime_pow",
    "mem_divisors_self",
    "mem_properDivisors",
    "mem_properDivisors_iff_exists",
    "mem_properDivisors_prime_pow",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "modEq_and_modEq_iff_modEq_mul",
    "modEq_iff_dvd",
    "modEq_one",
    "modEq_sub",
    "modEq_zero_iff_dvd",
    "mod_eq_of_modEq",
    "mod_lcm",
    "mod_modEq",
    "ne_zero_of_mem_divisorsAntidiagonal",
    "nonempty_divisors",
    "nonempty_properDivisors",
    "odd_mod_four_iff",
    "odd_mul_odd",
    "odd_mul_odd_div_two",
    "odd_of_mod_four_eq_one",
    "odd_of_mod_four_eq_three",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_div",
    "of_dvd",
    "of_mul_left",
    "of_mul_right",
    "one_lt_div_of_mem_properDivisors",
    "one_lt_of_mem_properDivisors",
    "one_mem_divisors",
    "one_mem_properDivisors_iff_one_lt",
    "perfect_iff_sum_divisors_eq_two_mul",
    "perfect_iff_sum_properDivisors",
    "pos_of_mem_divisors",
    "pos_of_mem_properDivisors",
    "prime_divisors_eq_to_filter_divisors_prime",
    "prime_divisors_filter_dvd_of_dvd",
    "prod_div_divisors",
    "prod_divisorsAntidiagonal",
    "prod_divisors_prime_pow",
    "prod_properDivisors_prime_pow",
    "properDivisors.not_self_mem",
    "properDivisors_eq_empty",
    "properDivisors_eq_singleton_one_iff_prime",
    "properDivisors_one",
    "properDivisors_prime_pow",
    "properDivisors_subset_divisors",
    "properDivisors_zero",
    "ratCast_lt",
    "right_ne_zero_of_mem_divisorsAntidiagonal",
    "snd_mem_divisors_of_mem_antidiagonal",
    "sum_divisors_eq_sum_properDivisors_add_self",
    "sum_properDivisors_dvd",
    "sum_properDivisors_eq_one_iff_prime",
    "sup_divisors_id",
    "swap_mem_divisorsAntidiagonal",
    "swap_mem_divisorsAntidiagonal_aux"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
