enum Theorem {
    "Perm.coe_subsingleton",
    "Perm.ext_iff",
    "Perm.subsingleton_eq_refl",
    "_root_.EquivLike.coe_coe",
    "add_lt_add_iff_left",
    "apply_eq_iff_eq",
    "apply_eq_iff_eq_symm_apply",
    "arrowCongr_comp",
    "bijective_comp",
    "cast_eq_iff_heq",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_fn_injective",
    "comp_bijective",
    "comp_injective",
    "comp_surjective",
    "comp_symm_eq",
    "conj_comp",
    "eq_comp_symm",
    "eq_symm_apply",
    "eq_symm_comp",
    "ext_cauchy",
    "ext_cauchy_iff",
    "ext_iff",
    "injective_comp",
    "le_mk_of_forall_le",
    "leftInverse_symm",
    "left_inv",
    "lt_cauchy",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "nonempty_congr",
    "ofBijective_apply_symm_apply",
    "ofBijective_symm_apply_apply",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "permCongr_def",
    "permCongr_symm_apply",
    "permCongr_trans",
    "psigmaCongrRight_refl",
    "psigmaCongrRight_symm",
    "psigmaCongrRight_trans",
    "ratCast_lt",
    "rightInverse_symm",
    "right_inv",
    "sigmaCongrRight_refl",
    "sigmaCongrRight_symm",
    "sigmaCongrRight_trans",
    "subsingleton_congr",
    "surjective_comp",
    "symm_apply_eq",
    "symm_bijective",
    "symm_comp_eq",
    "trans_assoc"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
