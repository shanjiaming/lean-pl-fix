enum Theorem {
    "_root_.Dvd.dvd.modEq_zero_nat",
    "_root_.Dvd.dvd.zero_modEq_nat",
    "add_div",
    "add_div_eq_of_add_mod_lt",
    "add_div_eq_of_le_mod_add_mod",
    "add_div_le_add_div",
    "add_le_of_lt",
    "add_lt_add_iff_left",
    "add_mod_add_ite",
    "add_mod_add_of_le_add_mod",
    "add_mod_of_add_mod_lt",
    "apply_rangeSplitting",
    "cancel_left_div_gcd",
    "cancel_left_of_coprime",
    "cancel_right_div_gcd",
    "cancel_right_of_coprime",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "chineseRemainder",
    "chineseRemainder_lt_mul",
    "chineseRemainder_modEq_unique",
    "comp_rangeSplitting",
    "coprime_of_mul_modEq_one",
    "diff_eq",
    "dvd_iff",
    "eq_of_abs_lt",
    "eq_of_lt_of_lt",
    "ext_cauchy",
    "ext_cauchy_iff",
    "gcd_eq",
    "le_mk_of_forall_le",
    "le_mod_add_mod_of_dvd_add_of_not_dvd",
    "le_of_lt_add",
    "lt_cauchy",
    "mapsTo_image",
    "mapsTo_preimage",
    "mem_diagonal",
    "mem_diff_of_mem",
    "mem_image",
    "mem_image2_of_mem",
    "mem_image_of_mem",
    "mem_offDiag",
    "mem_preimage",
    "mem_prod",
    "mem_prod_eq",
    "mem_seq_iff",
    "mem_univ_pi",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mem_prod",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "modEq_and_modEq_iff_modEq_mul",
    "modEq_iff_dvd",
    "modEq_one",
    "modEq_sub",
    "modEq_zero_iff_dvd",
    "mod_eq_of_modEq",
    "mod_lcm",
    "mod_modEq",
    "odd_mod_four_iff",
    "odd_mul_odd",
    "odd_mul_odd_div_two",
    "odd_of_mod_four_eq_one",
    "odd_of_mod_four_eq_three",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_div",
    "of_dvd",
    "of_mul_left",
    "of_mul_right",
    "prod_eq",
    "prod_mk_mem_set_prod_eq",
    "ratCast_lt",
    "seq_eq_image2",
    "subset_kernImage_iff"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
