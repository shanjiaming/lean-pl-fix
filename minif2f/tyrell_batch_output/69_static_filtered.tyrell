enum Theorem {
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Continuous.sqrt",
    "ContinuousOn.sqrt",
    "Filter.Tendsto.sqrt",
    "MulOneClass.ext",
    "SMul.smul_eq_hSMul",
    "abs_le_sqrt",
    "add_lt_add_iff_left",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_sqrt",
    "continuous_sqrt",
    "div_eq_mul_inv",
    "div_sqrt",
    "eq_inv_of_mul_eq_one_left",
    "ext_cauchy",
    "ext_cauchy_iff",
    "floor_real_sqrt_eq_nat_sqrt",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_inv",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_self",
    "inv_one",
    "le_mk_of_forall_le",
    "le_sqrt",
    "le_sqrt_iff_sq_le",
    "le_sqrt_of_sq_le",
    "lt_cauchy",
    "lt_of_le_of_ne",
    "lt_sq_of_sqrt_lt",
    "lt_sqrt",
    "lt_sqrt_of_sq_lt",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_assoc",
    "mul_comm",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_right",
    "mul_inv_rev",
    "mul_inv_self",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_inv",
    "mul_one",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_inv",
    "mul_self_sqrt",
    "nat_floor_real_sqrt_eq_nat_sqrt",
    "nat_sqrt_le_real_sqrt",
    "ne_of_ne_of_eq",
    "negSucc_zsmul",
    "neg_sqrt_le_of_sq_le",
    "neg_sqrt_lt_of_sq_lt",
    "nonneg_of_isNat",
    "nonneg_of_isRat",
    "npow_eq_pow",
    "nz_of_isNegNat",
    "nz_of_isRat",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_mul",
    "pos_of_isNat",
    "pos_of_isRat",
    "pow_add",
    "pow_mul",
    "pow_mul_comm",
    "pow_one",
    "pow_right_comm",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "ratCast_lt",
    "real_sqrt_le_nat_sqrt_succ",
    "real_sqrt_lt_nat_sqrt_succ",
    "sq_le",
    "sq_lt",
    "sq_sqrt",
    "sqrt_div",
    "sqrt_div_self",
    "sqrt_eq_cases",
    "sqrt_eq_iff_eq_sq",
    "sqrt_eq_iff_mul_self_eq",
    "sqrt_eq_iff_mul_self_eq_of_pos",
    "sqrt_eq_iff_sq_eq",
    "sqrt_eq_one",
    "sqrt_eq_zero",
    "sqrt_eq_zero_of_nonpos",
    "sqrt_inj",
    "sqrt_inv",
    "sqrt_le_iff",
    "sqrt_le_iff_le_sq",
    "sqrt_le_left",
    "sqrt_le_sqrt",
    "sqrt_le_sqrt_iff",
    "sqrt_lt",
    "sqrt_lt_sqrt",
    "sqrt_lt_sqrt_iff",
    "sqrt_lt_sqrt_iff_of_pos",
    "sqrt_mul",
    "sqrt_mul_self",
    "sqrt_mul_self_eq_abs",
    "sqrt_ne_zero",
    "sqrt_nonneg",
    "sqrt_one",
    "sqrt_one_add_le",
    "sqrt_pos",
    "sqrt_sq",
    "sqrt_sq_eq_abs",
    "sqrt_zero",
    "sum_mul_le_sqrt_mul_sqrt",
    "sum_sqrt_mul_sqrt_le",
    "zpow_natCast",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
