enum Theorem {
    "I_im",
    "I_mul",
    "I_mul_I",
    "I_mul_im",
    "I_mul_re",
    "I_pow_bit0",
    "I_pow_bit1",
    "I_pow_four",
    "I_re",
    "I_sq",
    "add_conj",
    "add_im",
    "add_lt_add_iff_left",
    "add_re",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_imAddGroupHom",
    "coe_reAddGroupHom",
    "conj_I",
    "conj_eq_iff_im",
    "conj_eq_iff_re",
    "conj_eq_iff_real",
    "conj_im",
    "conj_inv",
    "conj_natCast",
    "conj_neg_I",
    "conj_ofNat",
    "conj_ofReal",
    "conj_re",
    "div_I",
    "div_im",
    "div_intCast",
    "div_natCast",
    "div_ofNat",
    "div_ofNat_im",
    "div_ofNat_re",
    "div_ofReal",
    "div_ratCast",
    "div_re",
    "equivRealProd_symm_apply",
    "eta",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "ext_iff",
    "im_eq_sub_conj",
    "im_mul_ofReal",
    "im_ofReal_mul",
    "im_sq_le_normSq",
    "im_surjective",
    "inv_I",
    "inv_def",
    "inv_im",
    "inv_re",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "mem_reProdIm",
    "mk_add",
    "mk_eq",
    "mk_eq_add_mul_I",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_I_im",
    "mul_I_re",
    "mul_conj",
    "mul_im",
    "mul_re",
    "neg_im",
    "neg_re",
    "normSq_I",
    "normSq_add",
    "normSq_add_mul_I",
    "normSq_apply",
    "normSq_conj",
    "normSq_div",
    "normSq_eq_conj_mul_self",
    "normSq_eq_zero",
    "normSq_intCast",
    "normSq_inv",
    "normSq_mk",
    "normSq_mul",
    "normSq_natCast",
    "normSq_neg",
    "normSq_nonneg",
    "normSq_ofNat",
    "normSq_ofReal",
    "normSq_one",
    "normSq_pos",
    "normSq_ratCast",
    "normSq_sub",
    "normSq_zero",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "ofReal_add",
    "ofReal_def",
    "ofReal_div",
    "ofReal_eq_coe",
    "ofReal_eq_one",
    "ofReal_eq_zero",
    "ofReal_im",
    "ofReal_inj",
    "ofReal_injective",
    "ofReal_inv",
    "ofReal_mul",
    "ofReal_ne_one",
    "ofReal_ne_zero",
    "ofReal_neg",
    "ofReal_nnqsmul",
    "ofReal_one",
    "ofReal_pow",
    "ofReal_qsmul",
    "ofReal_re",
    "ofReal_sub",
    "ofReal_zero",
    "ofReal_zpow",
    "one_im",
    "one_re",
    "range_im",
    "range_re",
    "ratCast_lt",
    "re_add_im",
    "re_eq_add_conj",
    "re_mul_ofReal",
    "re_ofNat",
    "re_ofReal_mul",
    "re_sq_le_normSq",
    "re_surjective",
    "real_smul",
    "smul_im",
    "smul_re",
    "star_def",
    "sub_conj",
    "sub_im",
    "sub_re",
    "zero_im",
    "zero_re"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
