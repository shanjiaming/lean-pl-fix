enum Theorem {
    "CommMagma.IsLeftCancelMul.toIsCancelMul",
    "CommMagma.IsLeftCancelMul.toIsRightCancelMul",
    "CommMagma.IsRightCancelMul.toIsCancelMul",
    "CommMagma.IsRightCancelMul.toIsLeftCancelMul",
    "Dvd.dvd.linear_comb",
    "Dvd.elim",
    "Dvd.elim_left",
    "Dvd.intro",
    "Dvd.intro_left",
    "Int.alternating_sum_range_choose",
    "Int.alternating_sum_range_choose_of_ne",
    "IsLeftCancelMulZero.to_isCancelMulZero",
    "IsLeftCancelMulZero.to_isRightCancelMulZero",
    "IsPrimal.mul",
    "IsRelPrime.ne_zero_or_ne_zero",
    "IsRightCancelMulZero.to_isCancelMulZero",
    "IsRightCancelMulZero.to_isLeftCancelMulZero",
    "MonoidHom.map_dvd",
    "MulEquiv.decompositionMonoid",
    "MulHom.map_dvd",
    "MulOneClass.ext",
    "SMul.smul_eq_hSMul",
    "add_lt_add_iff_left",
    "add_mul_self_eq",
    "add_one_mul",
    "add_pow",
    "add_sq",
    "bit0_eq_two_mul",
    "boole_mul",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "choose_middle_le_pow",
    "distrib_three_right",
    "div_eq_mul_inv",
    "dvdNotUnit_of_dvd_of_not_dvd",
    "dvd_add",
    "dvd_add_left",
    "dvd_add_right",
    "dvd_add_self_left",
    "dvd_add_self_right",
    "dvd_and_not_dvd_iff",
    "dvd_antisymm",
    "dvd_def",
    "dvd_iff_dvd_of_dvd_sub",
    "dvd_iff_exists_eq_mul_left",
    "dvd_mul",
    "dvd_mul_left",
    "dvd_mul_of_dvd_left",
    "dvd_mul_of_dvd_right",
    "dvd_mul_right",
    "dvd_mul_sub_mul",
    "dvd_neg",
    "dvd_of_eq",
    "dvd_of_mul_left_dvd",
    "dvd_of_mul_right_dvd",
    "dvd_pow",
    "dvd_pow_self",
    "dvd_refl",
    "dvd_rfl",
    "dvd_sub",
    "dvd_sub_comm",
    "dvd_sub_left",
    "dvd_sub_right",
    "dvd_sub_self_left",
    "dvd_sub_self_right",
    "dvd_trans",
    "dvd_zero",
    "eq_inv_of_mul_eq_one_left",
    "eq_of_forall_dvd",
    "eq_zero_of_zero_dvd",
    "eq_zero_or_one_of_sq_eq_self",
    "exists_dvd_and_dvd_of_dvd_mul",
    "exists_eq_mul_left_of_dvd",
    "exists_eq_mul_right_of_dvd",
    "ext_cauchy",
    "ext_cauchy_iff",
    "four_pow_le_two_mul_add_one_mul_central_binom",
    "inv_eq_of_mul_eq_one_left",
    "inv_eq_of_mul_eq_one_right",
    "inv_inv",
    "inv_mul_cancel_left",
    "inv_mul_cancel_right",
    "inv_mul_self",
    "inv_one",
    "isPrimal_zero",
    "isRelPrime_of_no_nonunits_factors",
    "isRelPrime_zero_left",
    "isRelPrime_zero_right",
    "ite_add_ite",
    "ite_mul",
    "ite_sub_ite",
    "ite_zero_mul",
    "ite_zero_mul_ite_zero",
    "le_mk_of_forall_le",
    "left_distrib",
    "lt_cauchy",
    "map_dvd",
    "map_dvd_iff",
    "min_pow_dvd_add",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_add_one",
    "mul_assoc",
    "mul_boole",
    "mul_comm",
    "mul_dvd_mul",
    "mul_dvd_mul_iff_left",
    "mul_dvd_mul_iff_right",
    "mul_dvd_mul_left",
    "mul_dvd_mul_right",
    "mul_eq_zero",
    "mul_eq_zero_comm",
    "mul_eq_zero_of_left",
    "mul_eq_zero_of_right",
    "mul_inv_cancel_comm",
    "mul_inv_cancel_left",
    "mul_inv_cancel_left₀",
    "mul_inv_cancel_right",
    "mul_inv_cancel_right₀",
    "mul_inv_rev",
    "mul_inv_self",
    "mul_ite",
    "mul_ite_zero",
    "mul_left_cancel",
    "mul_left_cancel_iff",
    "mul_left_cancel₀",
    "mul_left_inj",
    "mul_left_injective₀",
    "mul_left_inv",
    "mul_ne_zero_comm",
    "mul_ne_zero_iff",
    "mul_neg",
    "mul_neg_one",
    "mul_one",
    "mul_one_add",
    "mul_one_sub",
    "mul_right_cancel",
    "mul_right_cancel_iff",
    "mul_right_cancel₀",
    "mul_right_inj",
    "mul_right_injective₀",
    "mul_right_inv",
    "mul_self_eq_zero",
    "mul_self_ne_zero",
    "mul_sub_left_distrib",
    "mul_sub_one",
    "mul_sub_right_distrib",
    "mul_two",
    "ne_zero_of_dvd_ne_zero",
    "negSucc_zsmul",
    "neg_dvd",
    "neg_eq_neg_one_mul",
    "neg_mul",
    "neg_mul_comm",
    "neg_mul_eq_mul_neg",
    "neg_mul_eq_neg_mul",
    "neg_mul_neg",
    "neg_one_mul",
    "not_isRelPrime_zero_zero",
    "npow_eq_pow",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_add_mul",
    "one_dvd",
    "one_mul",
    "one_sub_mul",
    "pow_add",
    "pow_dvd_pow",
    "pow_dvd_pow_iff",
    "pow_dvd_pow_of_dvd",
    "pow_mul",
    "pow_mul_comm",
    "pow_one",
    "pow_right_comm",
    "pow_succ",
    "pow_three",
    "pow_zero",
    "prod_antidiagonal_pow_choose_succ",
    "prod_pow_choose_succ",
    "ratCast_lt",
    "right_distrib",
    "sub_one_mul",
    "sum_Icc_choose",
    "sum_antidiagonal_choose_add",
    "sum_antidiagonal_choose_succ_mul",
    "sum_choose_succ_mul",
    "sum_powerset_apply_card",
    "sum_powerset_neg_one_pow_card",
    "sum_powerset_neg_one_pow_card_of_nonempty",
    "sum_range_choose",
    "sum_range_choose_halfway",
    "two_dvd_bit0",
    "two_dvd_bit1",
    "two_mul",
    "zero_dvd_iff",
    "zero_eq_mul",
    "zero_eq_mul_self",
    "zero_ne_mul_self",
    "zpow_natCast",
    "zpow_negSucc",
    "zpow_neg_coe_of_pos",
    "zpow_neg_one",
    "zpow_ofNat",
    "zpow_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
