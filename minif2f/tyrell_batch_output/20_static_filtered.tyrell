enum Theorem {
    "Continuous.sqrt",
    "ContinuousOn.sqrt",
    "Even.pow_nonneg",
    "Even.pow_pos",
    "Even.pow_pos_iff",
    "Filter.Tendsto.sqrt",
    "Odd.pow_neg_iff",
    "Odd.pow_nonneg_iff",
    "Odd.pow_nonpos_iff",
    "Odd.pow_pos_iff",
    "Odd.strictMono_pow",
    "Prime.divisors",
    "Prime.prod_divisors",
    "Prime.prod_properDivisors",
    "Prime.properDivisors",
    "_root_.Cardinal.natCast_eq_toPartENat_iff",
    "_root_.Cardinal.natCast_le_toPartENat_iff",
    "_root_.Cardinal.natCast_lt_toPartENat_iff",
    "_root_.Cardinal.toPartENat_eq_natCast_iff",
    "_root_.Cardinal.toPartENat_le_natCast_iff",
    "_root_.Cardinal.toPartENat_lt_natCast_iff",
    "_root_.Fintype.card_eq_nat_card",
    "_root_.Set.Infinite.card_eq_zero",
    "abs_le_sqrt",
    "add_lt_add_iff_left",
    "add_pow_le",
    "add_sq_le",
    "bot_eq_one",
    "card_congr",
    "card_eq_card_finite_toFinset",
    "card_eq_card_toFinset",
    "card_eq_coe_fintype_card",
    "card_eq_finsetCard",
    "card_eq_fintype_card",
    "card_eq_of_bijective",
    "card_eq_of_equiv_fin",
    "card_eq_one_iff_unique",
    "card_eq_top_of_infinite",
    "card_eq_two_iff",
    "card_eq_zero",
    "card_eq_zero_iff_empty",
    "card_fun",
    "card_image_equiv",
    "card_image_le",
    "card_image_of_injOn",
    "card_image_of_injective",
    "card_le_card_of_injective",
    "card_le_card_of_surjective",
    "card_le_one_iff_subsingleton",
    "card_mono",
    "card_ne_zero",
    "card_of_subsingleton",
    "card_pi",
    "card_plift",
    "card_pos_iff",
    "card_preimage_of_injOn",
    "card_preimage_of_injective",
    "card_prod",
    "card_prod_singleton",
    "card_singleton_prod",
    "card_sum",
    "card_ulift",
    "card_unique",
    "card_zmod",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_sqrt",
    "cons_self_properDivisors",
    "continuous_sqrt",
    "count_add",
    "count_eq_card_filter_range",
    "count_eq_card_fintype",
    "count_injective",
    "count_le_card",
    "count_le_cardinal",
    "count_lt_card",
    "count_lt_count_succ_iff",
    "count_mono_left",
    "count_monotone",
    "count_one",
    "count_strict_mono",
    "count_succ",
    "count_succ_eq_count_iff",
    "count_succ_eq_succ_count_iff",
    "count_zero",
    "div_sqrt",
    "divisor_le",
    "divisorsAntidiagonal_one",
    "divisorsAntidiagonal_zero",
    "divisors_eq_empty",
    "divisors_filter_dvd_of_dvd",
    "divisors_inj",
    "divisors_injective",
    "divisors_one",
    "divisors_prime_pow",
    "divisors_subset_of_dvd",
    "divisors_subset_properDivisors",
    "divisors_zero",
    "dvd_of_mem_divisors",
    "eq_one_or_one_lt",
    "eq_properDivisors_of_subset_of_sum_eq_sum",
    "exists_one_lt_mul_of_lt",
    "ext_cauchy",
    "ext_cauchy_iff",
    "filter_dvd_eq_divisors",
    "filter_dvd_eq_properDivisors",
    "finite_of_card_ne_zero",
    "floor_real_sqrt_eq_nat_sqrt",
    "fst_mem_divisors_of_mem_antidiagonal",
    "image_div_divisors_eq_divisors",
    "image_fst_divisorsAntidiagonal",
    "image_snd_divisorsAntidiagonal",
    "insert_self_properDivisors",
    "le_iff_exists_mul",
    "le_iff_forall_one_lt_lt_mul",
    "le_mk_of_forall_le",
    "le_mul_left",
    "le_mul_of_le_left",
    "le_mul_of_le_right",
    "le_mul_right",
    "le_mul_self",
    "le_of_forall_one_lt_le_mul",
    "le_of_forall_one_lt_lt_mul",
    "le_of_mul_le_left",
    "le_of_mul_le_right",
    "le_of_pow_le_pow_left",
    "le_one_iff_eq_one",
    "le_self_mul",
    "le_self_pow",
    "le_sqrt",
    "le_sqrt_iff_sq_le",
    "le_sqrt_of_sq_le",
    "left_ne_zero_of_mem_divisorsAntidiagonal",
    "lt_cauchy",
    "lt_iff_exists_mul",
    "lt_of_count_lt_count",
    "lt_of_mul_self_lt_mul_self",
    "lt_of_pow_lt_pow_left",
    "lt_self_pow",
    "lt_sq_of_sqrt_lt",
    "lt_sqrt",
    "lt_sqrt_of_sq_lt",
    "map_div_left_divisors",
    "map_div_right_divisors",
    "map_neg",
    "map_neg_one",
    "map_sub_swap",
    "map_swap_divisorsAntidiagonal",
    "mem_divisors",
    "mem_divisorsAntidiagonal",
    "mem_divisors_prime_pow",
    "mem_divisors_self",
    "mem_properDivisors",
    "mem_properDivisors_iff_exists",
    "mem_properDivisors_prime_pow",
    "min_mul_distrib",
    "min_one",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mul_eq_one_iff",
    "mul_self_sqrt",
    "nat_floor_real_sqrt_eq_nat_sqrt",
    "nat_sqrt_le_real_sqrt",
    "ne_zero_of_mem_divisorsAntidiagonal",
    "neg_sqrt_le_of_sq_le",
    "neg_sqrt_lt_of_sq_lt",
    "nonempty_divisors",
    "nonempty_properDivisors",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_gt",
    "one_le",
    "one_le_pow_iff_of_nonneg",
    "one_le_pow_of_one_le",
    "one_le_sq_iff",
    "one_lt_card_iff_nontrivial",
    "one_lt_div_of_mem_properDivisors",
    "one_lt_iff_ne_one",
    "one_lt_mul_iff",
    "one_lt_of_mem_properDivisors",
    "one_lt_pow",
    "one_lt_pow_iff_of_nonneg",
    "one_lt_sq_iff",
    "one_mem_divisors",
    "one_mem_properDivisors_iff_one_lt",
    "one_min",
    "perfect_iff_sum_divisors_eq_two_mul",
    "perfect_iff_sum_properDivisors",
    "pos",
    "pos_of_gt",
    "pos_of_mem_divisors",
    "pos_of_mem_properDivisors",
    "pow_add_pow_le",
    "pow_bit0_nonneg",
    "pow_bit0_pos",
    "pow_bit0_pos_iff",
    "pow_bit1_neg_iff",
    "pow_bit1_nonneg_iff",
    "pow_bit1_nonpos_iff",
    "pow_bit1_pos_iff",
    "pow_eq_one_iff_of_nonneg",
    "pow_four_le_pow_two_of_pow_two_le",
    "pow_le_one",
    "pow_le_one_iff_of_nonneg",
    "pow_le_pow_iff_left",
    "pow_le_pow_iff_right",
    "pow_le_pow_left",
    "pow_le_pow_right",
    "pow_left_inj",
    "pow_left_strictMonoOn",
    "pow_lt_one",
    "pow_lt_one_iff_of_nonneg",
    "pow_lt_pow_iff_left",
    "pow_lt_pow_iff_right",
    "pow_lt_pow_iff_right_of_lt_one",
    "pow_lt_pow_left",
    "pow_lt_pow_right",
    "pow_lt_pow_right_of_lt_one",
    "pow_lt_self_of_lt_one",
    "pow_right_inj",
    "pow_right_injective",
    "pow_right_mono",
    "pow_right_strictAnti",
    "pow_right_strictMono",
    "prime_divisors_eq_to_filter_divisors_prime",
    "prime_divisors_filter_dvd_of_dvd",
    "prod_div_divisors",
    "prod_divisorsAntidiagonal",
    "prod_divisors_prime_pow",
    "prod_properDivisors_prime_pow",
    "properDivisors.not_self_mem",
    "properDivisors_eq_empty",
    "properDivisors_eq_singleton_one_iff_prime",
    "properDivisors_one",
    "properDivisors_prime_pow",
    "properDivisors_subset_divisors",
    "properDivisors_zero",
    "ratCast_lt",
    "real_sqrt_le_nat_sqrt_succ",
    "real_sqrt_lt_nat_sqrt_succ",
    "right_ne_zero_of_mem_divisorsAntidiagonal",
    "self_le_mul_left",
    "self_le_mul_right",
    "snd_mem_divisors_of_mem_antidiagonal",
    "sq_eq_sq",
    "sq_le",
    "sq_le_one_iff",
    "sq_lt",
    "sq_lt_one_iff",
    "sq_pos_iff",
    "sq_pos_of_neg",
    "sq_pos_of_pos",
    "sq_sqrt",
    "sqrt_div",
    "sqrt_div_self",
    "sqrt_eq_cases",
    "sqrt_eq_iff_eq_sq",
    "sqrt_eq_iff_mul_self_eq",
    "sqrt_eq_iff_mul_self_eq_of_pos",
    "sqrt_eq_iff_sq_eq",
    "sqrt_eq_one",
    "sqrt_eq_zero",
    "sqrt_eq_zero_of_nonpos",
    "sqrt_inj",
    "sqrt_inv",
    "sqrt_le_iff",
    "sqrt_le_iff_le_sq",
    "sqrt_le_left",
    "sqrt_le_sqrt",
    "sqrt_le_sqrt_iff",
    "sqrt_lt",
    "sqrt_lt_sqrt",
    "sqrt_lt_sqrt_iff",
    "sqrt_lt_sqrt_iff_of_pos",
    "sqrt_mul",
    "sqrt_mul_self",
    "sqrt_mul_self_eq_abs",
    "sqrt_ne_zero",
    "sqrt_nonneg",
    "sqrt_one",
    "sqrt_one_add_le",
    "sqrt_pos",
    "sqrt_sq",
    "sqrt_sq_eq_abs",
    "sqrt_zero",
    "strictMono_pow_bit1",
    "sum_divisors_eq_sum_properDivisors_add_self",
    "sum_mul_le_sqrt_mul_sqrt",
    "sum_properDivisors_dvd",
    "sum_properDivisors_eq_one_iff_prime",
    "sum_sqrt_mul_sqrt_le",
    "sup_divisors_id",
    "swap_mem_divisorsAntidiagonal",
    "swap_mem_divisorsAntidiagonal_aux",
    "zero_pow_le_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
