enum Theorem {
    "Int.ceil_toNat",
    "Int.floor_toNat",
    "Int.ofNat_ceil_eq_ceil",
    "Int.ofNat_floor_eq_floor",
    "Nat.ceil_int",
    "Nat.floor_int",
    "_root_.Dvd.dvd.modEq_zero_nat",
    "_root_.Dvd.dvd.zero_modEq_nat",
    "abs_fract",
    "abs_one_sub_fract",
    "abs_sub_lt_one_of_floor_eq_floor",
    "abs_sub_round",
    "abs_sub_round_div_natCast_eq",
    "abs_sub_round_eq_min",
    "add_div",
    "add_div_eq_of_add_mod_lt",
    "add_div_eq_of_le_mod_add_mod",
    "add_div_le_add_div",
    "add_le_of_lt",
    "add_lt_add_iff_left",
    "add_mod_add_ite",
    "add_mod_add_of_le_add_mod",
    "add_mod_of_add_mod_lt",
    "add_one_le_ceil_iff",
    "app_eq_coe",
    "binaryRec_decreasing",
    "binaryRec_eq",
    "binaryRec_zero",
    "bit0_bits",
    "bit0_eq_bit0",
    "bit0_le_bit",
    "bit0_le_bit1_iff",
    "bit0_lt_bit1_iff",
    "bit0_mod_two",
    "bit0_val",
    "bit1_bits",
    "bit1_eq_bit1",
    "bit1_eq_one",
    "bit1_le_bit0_iff",
    "bit1_lt_bit0_iff",
    "bit1_mod_two",
    "bit1_val",
    "bitCasesOn_bit",
    "bitCasesOn_bit0",
    "bitCasesOn_bit1",
    "bit_add",
    "bit_cases_on_inj",
    "bit_cases_on_injective",
    "bit_decomp",
    "bit_eq_zero_iff",
    "bit_le",
    "bit_le_bit1",
    "bit_le_bit1_iff",
    "bit_le_bit_iff",
    "bit_lt_bit",
    "bit_lt_bit0",
    "bit_lt_bit_iff",
    "bit_ne_zero",
    "bit_val",
    "bit_zero",
    "bits_append_bit",
    "boddDiv2_eq",
    "bodd_add",
    "bodd_add_div2",
    "bodd_bit",
    "bodd_bit0",
    "bodd_bit1",
    "bodd_eq_bits_head",
    "bodd_eq_one_and_ne_zero",
    "bodd_mul",
    "bodd_one",
    "bodd_succ",
    "bodd_two",
    "cancel_left_div_gcd",
    "cancel_left_of_coprime",
    "cancel_right_div_gcd",
    "cancel_right_of_coprime",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "ceil_add_ceil_le",
    "ceil_add_int",
    "ceil_add_le",
    "ceil_add_nat",
    "ceil_add_ofNat",
    "ceil_add_one",
    "ceil_congr",
    "ceil_eq_add_one_sub_fract",
    "ceil_eq_iff",
    "ceil_eq_on_Ioc",
    "ceil_eq_zero",
    "ceil_eq_zero_iff",
    "ceil_int",
    "ceil_intCast",
    "ceil_le",
    "ceil_le_ceil",
    "ceil_le_floor_add_one",
    "ceil_lt_add_one",
    "ceil_mono",
    "ceil_nat",
    "ceil_natCast",
    "ceil_neg",
    "ceil_nonneg",
    "ceil_ofNat",
    "ceil_one",
    "ceil_pos",
    "ceil_sub_int",
    "ceil_sub_nat",
    "ceil_sub_ofNat",
    "ceil_sub_one",
    "ceil_sub_self_eq",
    "ceil_zero",
    "chineseRemainder",
    "chineseRemainder_lt_mul",
    "chineseRemainder_modEq_unique",
    "coe_inj",
    "coe_mk",
    "comp_apply",
    "comp_assoc",
    "comp_id",
    "coprime_of_mul_modEq_one",
    "count_add",
    "count_eq_card_filter_range",
    "count_eq_card_fintype",
    "count_injective",
    "count_le_card",
    "count_le_cardinal",
    "count_lt_card",
    "count_lt_count_succ_iff",
    "count_mono_left",
    "count_monotone",
    "count_one",
    "count_strict_mono",
    "count_succ",
    "count_succ_eq_count_iff",
    "count_succ_eq_succ_count_iff",
    "count_zero",
    "div2_bit",
    "div2_bit0",
    "div2_bit1",
    "div2_bits_eq_tail",
    "div2_one",
    "div2_succ",
    "div2_two",
    "div2_val",
    "dvd_iff",
    "eq_of_abs_lt",
    "eq_of_lt_of_lt",
    "ext",
    "ext_cauchy",
    "ext_cauchy_iff",
    "ext_iff",
    "floorRing_ceil_eq",
    "floorRing_floor_eq",
    "floor_add_fract",
    "floor_add_int",
    "floor_add_nat",
    "floor_add_ofNat",
    "floor_add_one",
    "floor_congr",
    "floor_div_eq_div",
    "floor_div_nat",
    "floor_div_ofNat",
    "floor_eq_iff",
    "floor_eq_on_Ico",
    "floor_eq_zero",
    "floor_eq_zero_iff",
    "floor_fract",
    "floor_int",
    "floor_intCast",
    "floor_int_add",
    "floor_le",
    "floor_le_ceil",
    "floor_le_floor",
    "floor_le_neg_one_iff",
    "floor_le_of_le",
    "floor_le_one_of_le_one",
    "floor_le_sub_one_iff",
    "floor_lt",
    "floor_lt_ceil_of_lt",
    "floor_lt_ceil_of_lt_of_pos",
    "floor_lt_one",
    "floor_mono",
    "floor_nat",
    "floor_natCast",
    "floor_nat_add",
    "floor_neg",
    "floor_nonneg",
    "floor_nonpos",
    "floor_ofNat",
    "floor_ofNat_add",
    "floor_of_nonpos",
    "floor_one",
    "floor_pos",
    "floor_sub_int",
    "floor_sub_nat",
    "floor_sub_ofNat",
    "floor_sub_one",
    "floor_zero",
    "fract_add",
    "fract_add_floor",
    "fract_add_fract_le",
    "fract_add_int",
    "fract_add_le",
    "fract_add_nat",
    "fract_add_ofNat",
    "fract_add_one",
    "fract_div_intCast_eq_div_intCast_mod",
    "fract_div_mul_self_add_zsmul_eq",
    "fract_div_mul_self_mem_Ico",
    "fract_div_natCast_eq_div_natCast_mod",
    "fract_eq_fract",
    "fract_eq_iff",
    "fract_eq_self",
    "fract_eq_zero_or_add_one_sub_ceil",
    "fract_floor",
    "fract_fract",
    "fract_int",
    "fract_intCast",
    "fract_int_add",
    "fract_lt_one",
    "fract_mul_nat",
    "fract_natCast",
    "fract_nat_add",
    "fract_neg",
    "fract_neg_eq_zero",
    "fract_nonneg",
    "fract_ofNat",
    "fract_ofNat_add",
    "fract_one",
    "fract_one_add",
    "fract_pos",
    "fract_sub_int",
    "fract_sub_nat",
    "fract_sub_ofNat",
    "fract_sub_one",
    "fract_sub_self",
    "fract_zero",
    "gc_ceil_coe",
    "gc_coe_floor",
    "gcd_eq",
    "id_comp",
    "image_fract",
    "le_ceil",
    "le_floor",
    "le_floor_add",
    "le_floor_add_floor",
    "le_floor_iff",
    "le_mk_of_forall_le",
    "le_mod_add_mod_of_dvd_add_of_not_dvd",
    "le_of_ceil_le",
    "le_of_lt_add",
    "lt_cauchy",
    "lt_ceil",
    "lt_floor_add_one",
    "lt_of_ceil_lt",
    "lt_of_count_lt_count",
    "lt_of_floor_lt",
    "lt_of_lt_floor",
    "lt_one_of_floor_lt_one",
    "lt_succ_floor",
    "map_ceil",
    "map_floor",
    "map_fract",
    "map_round",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "modEq_and_modEq_iff_modEq_mul",
    "modEq_iff_dvd",
    "modEq_one",
    "modEq_sub",
    "modEq_zero_iff_dvd",
    "mod_eq_of_modEq",
    "mod_lcm",
    "mod_modEq",
    "mod_two_of_bodd",
    "natCast_ceil_eq_intCast_ceil",
    "natCast_floor_eq_intCast_floor",
    "odd_mod_four_iff",
    "odd_mul_odd",
    "odd_mul_odd_div_two",
    "odd_of_mod_four_eq_one",
    "odd_of_mod_four_eq_three",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "of_div",
    "of_dvd",
    "of_mul_left",
    "of_mul_right",
    "one_bits",
    "one_eq_bit1",
    "one_le_bit0_iff",
    "one_le_ceil_iff",
    "one_le_floor_iff",
    "one_lt_bit0_iff",
    "pos_of_bit0_pos",
    "pos_of_floor_pos",
    "preimage_Icc",
    "preimage_Ici",
    "preimage_Ico",
    "preimage_Iic",
    "preimage_Iio",
    "preimage_Ioc",
    "preimage_Ioi",
    "preimage_Ioo",
    "preimage_ceil_of_ne_zero",
    "preimage_ceil_singleton",
    "preimage_ceil_zero",
    "preimage_floor_of_ne_zero",
    "preimage_floor_singleton",
    "preimage_floor_zero",
    "preimage_fract",
    "preserves_map",
    "preserves_pure",
    "preserves_seq",
    "ratCast_lt",
    "round_add_int",
    "round_add_nat",
    "round_add_ofNat",
    "round_add_one",
    "round_eq",
    "round_eq_zero_iff",
    "round_intCast",
    "round_int_add",
    "round_le",
    "round_natCast",
    "round_nat_add",
    "round_neg_two_inv",
    "round_ofNat",
    "round_ofNat_add",
    "round_one",
    "round_sub_int",
    "round_sub_nat",
    "round_sub_ofNat",
    "round_sub_one",
    "round_two_inv",
    "round_zero",
    "self_sub_floor",
    "self_sub_fract",
    "shiftLeft",
    "shiftLeft_sub",
    "sub_floor_div_mul_lt",
    "sub_floor_div_mul_nonneg",
    "sub_one_lt_floor",
    "subsingleton_floorRing",
    "subsingleton_floorSemiring",
    "testBit_bit_succ",
    "testBit_bit_zero",
    "zero_bits"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
