enum Theorem {
    "Icc_eq_range",
    "Icc_pred_right",
    "Icc_succ_left",
    "Ico_eq_range",
    "Ico_image_const_sub_eq_Ico",
    "Ico_insert_succ_left",
    "Ico_pred_singleton",
    "Ico_succ_left",
    "Ico_succ_left_eq_erase_Ico",
    "Ico_succ_right",
    "Ico_succ_right_eq_insert_Ico",
    "Ico_succ_singleton",
    "Ico_succ_succ",
    "Ico_zero_eq_range",
    "Iio_eq_range",
    "Ioc_eq_range",
    "Ioc_succ_singleton",
    "Ioo_eq_range",
    "Nat.cauchy_induction",
    "Nat.cauchy_induction_mul",
    "Nat.cauchy_induction_two_mul",
    "Nat.decreasing_induction_of_infinite",
    "Nat.decreasing_induction_of_not_bddAbove",
    "Nat.pow_imp_self_of_one_lt",
    "Nat.strong_decreasing_induction",
    "_root_.Finset.range_eq_Ico",
    "add_lt_add_iff_left",
    "bit0_add",
    "bit0_neg",
    "bit0_zero",
    "bit1_add",
    "bit1_zero",
    "card_Icc",
    "card_Ico",
    "card_Iic",
    "card_Iio",
    "card_Ioc",
    "card_Ioo",
    "card_fintypeIcc",
    "card_fintypeIco",
    "card_fintypeIic",
    "card_fintypeIio",
    "card_fintypeIoc",
    "card_fintypeIoo",
    "card_uIcc",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "comp_mul_left",
    "comp_mul_right",
    "conj_eq_one_iff",
    "count_add",
    "count_eq_card_filter_range",
    "count_eq_card_fintype",
    "count_injective",
    "count_le_card",
    "count_le_cardinal",
    "count_lt_card",
    "count_lt_count_succ_iff",
    "count_mono_left",
    "count_monotone",
    "count_one",
    "count_strict_mono",
    "count_succ",
    "count_succ_eq_count_iff",
    "count_succ_eq_succ_count_iff",
    "count_zero",
    "dite_pow",
    "div_div",
    "div_div_cancel",
    "div_div_cancel_left",
    "div_div_div_cancel_left",
    "div_div_div_cancel_right",
    "div_div_div_comm",
    "div_div_div_eq",
    "div_div_eq_mul_div",
    "div_div_self",
    "div_eq_div_iff_comm",
    "div_eq_div_iff_div_eq_div",
    "div_eq_div_iff_mul_eq_mul",
    "div_eq_div_mul_div",
    "div_eq_iff_eq_mul",
    "div_eq_inv_mul",
    "div_eq_inv_self",
    "div_eq_mul_one_div",
    "div_eq_of_eq_mul",
    "div_eq_one",
    "div_eq_self",
    "div_inv_eq_mul",
    "div_left_inj",
    "div_left_injective",
    "div_mul",
    "div_mul_cancel",
    "div_mul_cancel_left",
    "div_mul_cancel_right",
    "div_mul_comm",
    "div_mul_div_cancel",
    "div_mul_div_comm",
    "div_mul_eq_div_div",
    "div_mul_eq_div_div_swap",
    "div_mul_eq_div_mul_one_div",
    "div_mul_eq_mul_div",
    "div_mul_mul_cancel",
    "div_ne_one",
    "div_ne_one_of_ne",
    "div_one",
    "div_pow",
    "div_right_comm",
    "div_right_inj",
    "div_right_injective",
    "div_self",
    "div_zpow",
    "eq_div_iff_mul_eq",
    "eq_div_of_mul_eq",
    "eq_iff_eq_of_div_eq_div",
    "eq_inv_iff_mul_eq_one",
    "eq_inv_mul_iff_mul_eq",
    "eq_inv_mul_of_mul_eq",
    "eq_inv_of_mul_eq_one_right",
    "eq_mul_inv_iff_mul_eq",
    "eq_mul_inv_of_mul_eq",
    "eq_mul_of_div_eq",
    "eq_mul_of_inv_mul_eq",
    "eq_mul_of_mul_inv_eq",
    "eq_of_div_eq_one",
    "eq_of_inv_mul_eq_one",
    "eq_of_mul_inv_eq_one",
    "eq_of_one_div_eq_one_div",
    "eq_one_div_of_mul_eq_one_left",
    "eq_one_div_of_mul_eq_one_right",
    "eq_one_iff_eq_one_of_mul_eq_one",
    "exists_pow_eq_one_of_zpow_eq_one",
    "ext_cauchy",
    "ext_cauchy_iff",
    "image_Ico_mod",
    "image_sub_const_Ico",
    "inv_comp_inv",
    "inv_div",
    "inv_div_inv",
    "inv_div_left",
    "inv_eq_iff_eq_inv",
    "inv_eq_iff_mul_eq_one",
    "inv_eq_one",
    "inv_eq_one_div",
    "inv_inj",
    "inv_injective",
    "inv_inv_div_inv",
    "inv_involutive",
    "inv_mul",
    "inv_mul_eq_div",
    "inv_mul_eq_iff_eq_mul",
    "inv_mul_eq_of_eq_mul",
    "inv_mul_eq_one",
    "inv_ne_one",
    "inv_pow",
    "inv_pow_sub",
    "inv_surjective",
    "inv_unique",
    "inv_zpow",
    "ite_mul_one",
    "ite_one_mul",
    "ite_pow",
    "le_mk_of_forall_le",
    "leftInverse_div_mul_left",
    "leftInverse_inv",
    "leftInverse_inv_mul_mul_right",
    "leftInverse_mul_left_div",
    "leftInverse_mul_right_inv_mul",
    "lt_cauchy",
    "lt_of_count_lt_count",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "mod_injOn_Ico",
    "mul_comm_div",
    "mul_div",
    "mul_div_assoc",
    "mul_div_cancel",
    "mul_div_cancel_left",
    "mul_div_cancel_right",
    "mul_div_div_cancel",
    "mul_div_left_comm",
    "mul_div_mul_comm",
    "mul_div_mul_left_eq_div",
    "mul_div_mul_right_eq_div",
    "mul_div_right_comm",
    "mul_eq_of_eq_div",
    "mul_eq_of_eq_inv_mul",
    "mul_eq_of_eq_mul_inv",
    "mul_eq_one_iff_eq_inv",
    "mul_eq_one_iff_inv_eq",
    "mul_inv",
    "mul_inv_eq_iff_eq_mul",
    "mul_inv_eq_of_eq_mul",
    "mul_inv_eq_one",
    "mul_left_comm",
    "mul_left_eq_self",
    "mul_left_inj",
    "mul_left_injective",
    "mul_left_ne_self",
    "mul_left_surjective",
    "mul_mul_div_cancel",
    "mul_mul_inv_cancel",
    "mul_mul_mul_comm",
    "mul_ne_mul_left",
    "mul_ne_mul_right",
    "mul_one_div",
    "mul_one_eq_id",
    "mul_pow_sub_one",
    "mul_right_comm",
    "mul_right_eq_self",
    "mul_right_inj",
    "mul_right_injective",
    "mul_right_ne_self",
    "mul_right_surjective",
    "mul_rotate",
    "mul_self_zpow",
    "mul_zpow_neg_one",
    "mul_zpow_self",
    "multiplicative_of_isTotal",
    "multiplicative_of_symmetric_of_isTotal",
    "multiset_Ico_map_mod",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_div",
    "one_div_div",
    "one_div_mul_eq_div",
    "one_div_mul_one_div",
    "one_div_mul_one_div_rev",
    "one_div_one",
    "one_div_one_div",
    "one_div_pow",
    "one_div_zpow",
    "one_eq_inv",
    "one_mul_eq_id",
    "one_zpow",
    "pow_boole",
    "pow_dite",
    "pow_eq_pow_mod",
    "pow_ite",
    "pow_mul_pow_sub",
    "pow_natAbs_eq_one",
    "pow_sub",
    "pow_sub_mul_pow",
    "pow_sub_one_mul",
    "range_add_eq_union",
    "range_eq_Icc_zero_sub_one",
    "range_image_pred_top_sub",
    "ratCast_lt",
    "rightInverse_inv",
    "self_eq_mul_left",
    "self_eq_mul_right",
    "self_ne_mul_left",
    "self_ne_mul_right",
    "uIcc_eq_range",
    "zpow_add",
    "zpow_add_one",
    "zpow_eq_zpow_emod",
    "zpow_induction_left",
    "zpow_induction_right",
    "zpow_mul",
    "zpow_neg",
    "zpow_one_add",
    "zpow_sub_one"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
