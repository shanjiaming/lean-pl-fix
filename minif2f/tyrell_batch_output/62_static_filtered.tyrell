enum Theorem {
    "abs_exp_mul_exp_add_exp_neg_le_of_abs_im_le",
    "abs_sin_half",
    "add_lt_add_iff_left",
    "bijOn_cos",
    "bijOn_sin",
    "cauchy_add",
    "cauchy_intCast",
    "cauchy_inv",
    "cauchy_mul",
    "cauchy_natCast",
    "cauchy_neg",
    "cauchy_nnratCast",
    "cauchy_one",
    "cauchy_ratCast",
    "cauchy_sub",
    "cauchy_zero",
    "coe_real_pi",
    "coe_sinOrderIso_apply",
    "continuousOn_cos",
    "continuousOn_sin",
    "continuous_cos",
    "continuous_cosh",
    "continuous_sin",
    "continuous_sinh",
    "cos_add_int_mul_pi",
    "cos_add_int_mul_two_pi",
    "cos_add_nat_mul_pi",
    "cos_add_nat_mul_two_pi",
    "cos_add_pi",
    "cos_add_pi_div_two",
    "cos_add_two_pi",
    "cos_antiperiodic",
    "cos_eq_one_iff",
    "cos_eq_one_iff_of_lt_of_lt",
    "cos_eq_sqrt_one_sub_sin_sq",
    "cos_half",
    "cos_int_mul_pi_sub",
    "cos_int_mul_two_pi",
    "cos_int_mul_two_pi_add_pi",
    "cos_int_mul_two_pi_sub",
    "cos_int_mul_two_pi_sub_pi",
    "cos_le_cos_of_nonneg_of_le_pi",
    "cos_lt_cos_of_nonneg_of_le_pi",
    "cos_lt_cos_of_nonneg_of_le_pi_div_two",
    "cos_mem_Icc",
    "cos_nat_mul_pi_sub",
    "cos_nat_mul_two_pi",
    "cos_nat_mul_two_pi_add_pi",
    "cos_nat_mul_two_pi_sub",
    "cos_nat_mul_two_pi_sub_pi",
    "cos_neg_of_pi_div_two_lt_of_lt",
    "cos_nonneg_of_mem_Icc",
    "cos_nonneg_of_neg_pi_div_two_le_of_le",
    "cos_nonpos_of_pi_div_two_le_of_le",
    "cos_periodic",
    "cos_pi",
    "cos_pi_div_eight",
    "cos_pi_div_four",
    "cos_pi_div_six",
    "cos_pi_div_sixteen",
    "cos_pi_div_thirty_two",
    "cos_pi_div_three",
    "cos_pi_div_two",
    "cos_pi_div_two_sub",
    "cos_pi_over_two_pow",
    "cos_pi_sub",
    "cos_pos_of_mem_Ioo",
    "cos_sub_int_mul_pi",
    "cos_sub_int_mul_two_pi",
    "cos_sub_nat_mul_pi",
    "cos_sub_nat_mul_two_pi",
    "cos_sub_pi",
    "cos_sub_pi_div_two",
    "cos_sub_two_pi",
    "cos_two_pi",
    "cos_two_pi_sub",
    "exists_cos_eq_zero",
    "exp_add_pi_mul_I",
    "exp_antiperiodic",
    "exp_int_mul_two_pi_mul_I",
    "exp_mul_I_antiperiodic",
    "exp_mul_I_periodic",
    "exp_nat_mul_two_pi_mul_I",
    "exp_periodic",
    "exp_pi_mul_I",
    "exp_sub_pi_mul_I",
    "exp_two_pi_mul_I",
    "ext_cauchy",
    "ext_cauchy_iff",
    "injOn_cos",
    "injOn_sin",
    "injOn_tan",
    "le_mk_of_forall_le",
    "lt_cauchy",
    "mapsTo_cos",
    "mapsTo_sin",
    "mk_add",
    "mk_eq",
    "mk_inf",
    "mk_le",
    "mk_le_of_forall_le",
    "mk_lt",
    "mk_mul",
    "mk_near_of_forall_near",
    "mk_neg",
    "mk_one",
    "mk_pos",
    "mk_sup",
    "mk_zero",
    "ofCauchy_add",
    "ofCauchy_div",
    "ofCauchy_inf",
    "ofCauchy_intCast",
    "ofCauchy_inv",
    "ofCauchy_mul",
    "ofCauchy_natCast",
    "ofCauchy_neg",
    "ofCauchy_nnratCast",
    "ofCauchy_one",
    "ofCauchy_ratCast",
    "ofCauchy_sub",
    "ofCauchy_sup",
    "ofCauchy_zero",
    "ofRat_rat",
    "one_le_pi_div_two",
    "pi_div_two_le_two",
    "pi_div_two_pos",
    "pi_le_four",
    "pi_ne_zero",
    "pi_nonneg",
    "pi_pos",
    "range_cos",
    "range_cos_infinite",
    "range_sin",
    "range_sin_infinite",
    "ratCast_lt",
    "sinOrderIso_apply",
    "sin_add_int_mul_pi",
    "sin_add_int_mul_two_pi",
    "sin_add_nat_mul_pi",
    "sin_add_nat_mul_two_pi",
    "sin_add_pi",
    "sin_add_pi_div_two",
    "sin_add_two_pi",
    "sin_antiperiodic",
    "sin_eq_sqrt_one_sub_cos_sq",
    "sin_eq_zero_iff",
    "sin_eq_zero_iff_cos_eq",
    "sin_eq_zero_iff_of_lt_of_lt",
    "sin_half_eq_neg_sqrt",
    "sin_half_eq_sqrt",
    "sin_int_mul_pi",
    "sin_int_mul_pi_sub",
    "sin_int_mul_two_pi_sub",
    "sin_le_sin_of_le_of_le_pi_div_two",
    "sin_lt_sin_of_lt_of_le_pi_div_two",
    "sin_mem_Icc",
    "sin_nat_mul_pi",
    "sin_nat_mul_pi_sub",
    "sin_nat_mul_two_pi_sub",
    "sin_ne_zero_iff",
    "sin_neg_of_neg_of_neg_pi_lt",
    "sin_nonneg_of_mem_Icc",
    "sin_nonneg_of_nonneg_of_le_pi",
    "sin_nonpos_of_nonnpos_of_neg_pi_le",
    "sin_periodic",
    "sin_pi",
    "sin_pi_div_eight",
    "sin_pi_div_four",
    "sin_pi_div_six",
    "sin_pi_div_sixteen",
    "sin_pi_div_thirty_two",
    "sin_pi_div_three",
    "sin_pi_div_two",
    "sin_pi_div_two_sub",
    "sin_pi_over_two_pow_succ",
    "sin_pi_sub",
    "sin_pos_of_mem_Ioo",
    "sin_pos_of_pos_of_lt_pi",
    "sin_sq_pi_over_two_pow",
    "sin_sq_pi_over_two_pow_succ",
    "sin_sub_int_mul_pi",
    "sin_sub_int_mul_two_pi",
    "sin_sub_nat_mul_pi",
    "sin_sub_nat_mul_two_pi",
    "sin_sub_pi",
    "sin_sub_pi_div_two",
    "sin_sub_two_pi",
    "sin_two_pi",
    "sin_two_pi_sub",
    "sq_cos_pi_div_six",
    "sq_sin_pi_div_three",
    "sqrtTwoAddSeries_lt_two",
    "sqrtTwoAddSeries_monotone_left",
    "sqrtTwoAddSeries_nonneg",
    "sqrtTwoAddSeries_one",
    "sqrtTwoAddSeries_succ",
    "sqrtTwoAddSeries_two",
    "sqrtTwoAddSeries_zero",
    "sqrtTwoAddSeries_zero_nonneg",
    "strictAntiOn_cos",
    "strictMonoOn_sin",
    "strictMonoOn_tan",
    "surjOn_cos",
    "surjOn_sin",
    "tan_add_int_mul_pi",
    "tan_add_nat_mul_pi",
    "tan_add_pi",
    "tan_inj_of_lt_of_lt_pi_div_two",
    "tan_int_mul_pi",
    "tan_int_mul_pi_sub",
    "tan_lt_tan_of_lt_of_lt_pi_div_two",
    "tan_lt_tan_of_nonneg_of_lt_pi_div_two",
    "tan_nat_mul_pi",
    "tan_nat_mul_pi_sub",
    "tan_neg_of_neg_of_pi_div_two_lt",
    "tan_nonneg_of_nonneg_of_le_pi_div_two",
    "tan_nonpos_of_nonpos_of_neg_pi_div_two_le",
    "tan_periodic",
    "tan_pi",
    "tan_pi_div_four",
    "tan_pi_div_six",
    "tan_pi_div_three",
    "tan_pi_div_two",
    "tan_pi_div_two_sub",
    "tan_pi_sub",
    "tan_pos_of_pos_of_lt_pi_div_two",
    "tan_sub_int_mul_pi",
    "tan_sub_nat_mul_pi",
    "tan_sub_pi",
    "tendsto_cos_neg_pi_div_two",
    "tendsto_cos_pi_div_two",
    "tendsto_sin_neg_pi_div_two",
    "tendsto_sin_pi_div_two",
    "tendsto_tan_neg_pi_div_two",
    "tendsto_tan_pi_div_two",
    "two_le_pi",
    "two_pi_pos"
}

enum OnelineTactic {
    "simp",
    "field_simp",
    "norm_num",
    "ring",
    "ring_nf",
    "omega",
    "linarith",
    "nlinarith"
}

enum AtTactic {
    "rw",
    "rwhat"
}

value Empty;
value Str;
value Bool;

program Lean() -> Bool;
func use_theorem_tactic: Str -> AtTactic, Theorem;
func oneline: Str -> OnelineTactic;
func checker: Bool -> Str;
func empty: Empty -> Empty;
