theorem series_convergence' {b : ‚Ñï ‚Üí ‚Ñù} (h_pos : ‚àÄ n, b n > 0)
  (h_lim : Tendsto b atTop (ùìù (1/2))): Summable (fun n => |b n^n * cos (n * œÄ) / n|) := by
  have h_main : Summable (fun n => (b n)^n / n : ‚Ñï ‚Üí ‚Ñù) := by
    have h‚ÇÅ : ‚àÉ (N : ‚Ñï), ‚àÄ n ‚â• N, b n < 3 / 4 := by
      have h‚ÇÇ : Filter.Tendsto b atTop (ùìù (1 / 2)) := h_lim
      have h‚ÇÉ : ‚àÄ·∂† (n : ‚Ñï) in atTop, b n ‚àà Set.Ioo (1 / 2 - 1 / 4) (1 / 2 + 1 / 4) := by
        have h‚ÇÑ : Filter.Tendsto b atTop (ùìù (1 / 2)) := h_lim
        have h‚ÇÖ : (1 / 2 : ‚Ñù) - 1 / 4 < 1 / 2 + 1 / 4 := by norm_num
        have h‚ÇÜ : b ‚Åª¬π' Set.Ioo (1 / 2 - 1 / 4) (1 / 2 + 1 / 4) ‚àà atTop := by
          apply h‚ÇÑ (IsOpen.mem_nhds isOpen_Ioo)
          norm_num [Set.mem_Ioo]
        exact h‚ÇÜ
      have h‚Çá : ‚àÉ (N : ‚Ñï), ‚àÄ (n : ‚Ñï), n ‚â• N ‚Üí b n ‚àà Set.Ioo (1 / 2 - 1 / 4) (1 / 2 + 1 / 4) := by
        rw [Filter.eventually_atTop] at h‚ÇÉ
        obtain ‚ü®N, hN‚ü© := h‚ÇÉ
        exact ‚ü®N, fun n hn => hN n hn‚ü©
      obtain ‚ü®N, hN‚ü© := h‚Çá
      refine' ‚ü®N, fun n hn => _‚ü©
      have h‚Çà : b n ‚àà Set.Ioo (1 / 2 - 1 / 4) (1 / 2 + 1 / 4) := hN n hn
      have h‚Çâ : b n < 1 / 2 + 1 / 4 := h‚Çà.2
      norm_num at h‚Çâ ‚ä¢
      <;> linarith
    obtain ‚ü®N, hN‚ü© := h‚ÇÅ
    have h‚ÇÇ : Summable (fun n => (b n)^n / n : ‚Ñï ‚Üí ‚Ñù) := by
      have h‚ÇÉ : ‚àÄ n ‚â• N, (b n : ‚Ñù) < 3 / 4 := by
        intro n hn
        exact hN n hn
      have h‚ÇÑ : Summable (fun n : ‚Ñï => ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n : ‚Ñï ‚Üí ‚Ñù) := by
        apply summable_geometric_of_lt_one
        <;> norm_num
      have h‚ÇÖ : ‚àÄ n ‚â• N, (b n : ‚Ñù) ^ n / n ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n := by
        intro n hn
        have h‚ÇÖ‚ÇÅ : (b n : ‚Ñù) < 3 / 4 := h‚ÇÉ n hn
        have h‚ÇÖ‚ÇÇ : 0 < (b n : ‚Ñù) := by exact_mod_cast h_pos n
        have h‚ÇÖ‚ÇÉ : (b n : ‚Ñù) ^ n ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n := by
          exact pow_le_pow_of_le_left (by positivity) (by linarith) n
        have h‚ÇÖ‚ÇÑ : (b n : ‚Ñù) ^ n / n ‚â§ (b n : ‚Ñù) ^ n := by
          cases n with
          | zero =>
            norm_num at hn ‚ä¢
            <;> simp_all [Nat.cast_zero]
            <;> linarith
          | succ n =>
            exact div_le_self (by positivity) (by
              norm_num
              <;>
              exact_mod_cast Nat.one_le_iff_ne_zero.mpr (by intro h; simp_all))
        calc
          (b n : ‚Ñù) ^ n / n ‚â§ (b n : ‚Ñù) ^ n := h‚ÇÖ‚ÇÑ
          _ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n := h‚ÇÖ‚ÇÉ
      have h‚ÇÜ : Summable (fun n : ‚Ñï => (b n : ‚Ñù) ^ n / n : ‚Ñï ‚Üí ‚Ñù) := by
        refine' Summable.of_nonneg_of_le (fun n => _) (fun n => _) (h‚ÇÑ.comp_le fun n => _)
        ¬∑ -- Prove nonnegativity
          exact div_nonneg (pow_nonneg (by exact_mod_cast (le_of_lt (h_pos n))) n) (Nat.cast_nonneg n)
        ¬∑ -- Prove the bound
          cases n with
          | zero =>
            norm_num
            <;> simp_all [Nat.cast_zero]
            <;> linarith
          | succ n =>
            by_cases h : n.succ ‚â• N
            ¬∑ -- Case n.succ ‚â• N
              exact h‚ÇÖ _ h
            ¬∑ -- Case n.succ < N
              have h‚Çá : n.succ < N := by linarith
              have h‚Çà : n.succ ‚â§ N := by linarith
              have h‚Çâ : (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                have h‚ÇÅ‚ÇÄ : (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ (b n.succ : ‚Ñù) ^ n.succ := by
                  exact div_le_self (by positivity) (by
                    norm_num
                    <;>
                    exact_mod_cast Nat.one_le_iff_ne_zero.mpr (by intro h; simp_all))
                have h‚ÇÅ‚ÇÅ : (b n.succ : ‚Ñù) ^ n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                  by_cases h‚ÇÅ‚ÇÇ : n.succ ‚â• N
                  ¬∑ -- Case n.succ ‚â• N
                    exact h‚ÇÖ _ h‚ÇÅ‚ÇÇ
                  ¬∑ -- Case n.succ < N
                    have h‚ÇÅ‚ÇÉ : n.succ < N := by linarith
                    have h‚ÇÅ‚ÇÑ : (b n.succ : ‚Ñù) < 3 / 4 := by
                      have h‚ÇÅ‚ÇÖ := hN n.succ
                      have h‚ÇÅ‚ÇÜ : n.succ ‚â• N ‚Üí b n.succ < 3 / 4 := by tauto
                      have h‚ÇÅ‚Çá : ¬¨n.succ ‚â• N := by tauto
                      have h‚ÇÅ‚Çà : b n.succ < 3 / 4 := by tauto
                      exact h‚ÇÅ‚Çà
                    have h‚ÇÅ‚ÇÖ : 0 < (b n.succ : ‚Ñù) := by exact_mod_cast h_pos n.succ
                    have h‚ÇÅ‚ÇÜ : (b n.succ : ‚Ñù) ^ n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                      exact pow_le_pow_of_le_left (by positivity) (by linarith) n.succ
                    exact h‚ÇÅ‚ÇÜ
                calc
                  (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ (b n.succ : ‚Ñù) ^ n.succ := h‚ÇÅ‚ÇÄ
                  _ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := h‚ÇÅ‚ÇÅ
              exact h‚Çâ
        ¬∑ -- Prove the bound for the summable function
          cases n with
          | zero =>
            norm_num
            <;> simp_all [Nat.cast_zero]
            <;> linarith
          | succ n =>
            by_cases h : n.succ ‚â• N
            ¬∑ -- Case n.succ ‚â• N
              exact h‚ÇÖ _ h
            ¬∑ -- Case n.succ < N
              have h‚Çá : n.succ < N := by linarith
              have h‚Çà : n.succ ‚â§ N := by linarith
              have h‚Çâ : (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                have h‚ÇÅ‚ÇÄ : (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ (b n.succ : ‚Ñù) ^ n.succ := by
                  exact div_le_self (by positivity) (by
                    norm_num
                    <;>
                    exact_mod_cast Nat.one_le_iff_ne_zero.mpr (by intro h; simp_all))
                have h‚ÇÅ‚ÇÅ : (b n.succ : ‚Ñù) ^ n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                  by_cases h‚ÇÅ‚ÇÇ : n.succ ‚â• N
                  ¬∑ -- Case n.succ ‚â• N
                    exact h‚ÇÖ _ h‚ÇÅ‚ÇÇ
                  ¬∑ -- Case n.succ < N
                    have h‚ÇÅ‚ÇÉ : n.succ < N := by linarith
                    have h‚ÇÅ‚ÇÑ : (b n.succ : ‚Ñù) < 3 / 4 := by
                      have h‚ÇÅ‚ÇÖ := hN n.succ
                      have h‚ÇÅ‚ÇÜ : n.succ ‚â• N ‚Üí b n.succ < 3 / 4 := by tauto
                      have h‚ÇÅ‚Çá : ¬¨n.succ ‚â• N := by tauto
                      have h‚ÇÅ‚Çà : b n.succ < 3 / 4 := by tauto
                      exact h‚ÇÅ‚Çà
                    have h‚ÇÅ‚ÇÖ : 0 < (b n.succ : ‚Ñù) := by exact_mod_cast h_pos n.succ
                    have h‚ÇÅ‚ÇÜ : (b n.succ : ‚Ñù) ^ n.succ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := by
                      exact pow_le_pow_of_le_left (by positivity) (by linarith) n.succ
                    exact h‚ÇÅ‚ÇÜ
                calc
                  (b n.succ : ‚Ñù) ^ n.succ / n.succ ‚â§ (b n.succ : ‚Ñù) ^ n.succ := h‚ÇÅ‚ÇÄ
                  _ ‚â§ ((3 / 4 : ‚Ñù) : ‚Ñù) ^ n.succ := h‚ÇÅ‚ÇÅ
              exact h‚Çâ
      exact h‚ÇÜ
    exact h‚ÇÇ
  
  have h_final : Summable (fun n => |b n^n * cos (n * œÄ) / n|) := by
    have h‚ÇÅ : (fun n => |b n^n * cos (n * œÄ) / n| : ‚Ñï ‚Üí ‚Ñù) = (fun n => (b n)^n / n : ‚Ñï ‚Üí ‚Ñù) := by
      funext n
      have h‚ÇÇ : |b n ^ n * Real.cos (n * Real.pi) / (n : ‚Ñù)| = (b n) ^ n / n := by
        have h‚ÇÉ : Real.cos (n * Real.pi) = (-1 : ‚Ñù) ^ n := by
          rw [show (n : ‚Ñù) * Real.pi = (n : ‚Ñù) * Real.pi by rfl]
          rw [Real.cos_eq_cos_add_int_mul_two_pi _ n]
          simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
        rw [h‚ÇÉ]
        have h‚ÇÑ : b n > 0 := h_pos n
        have h‚ÇÖ : (b n : ‚Ñù) > 0 := by exact_mod_cast h‚ÇÑ
        have h‚ÇÜ : |(b n : ‚Ñù) ^ n * ((-1 : ‚Ñù) : ‚Ñù) ^ n / (n : ‚Ñù)| = (b n : ‚Ñù) ^ n / n := by
          have h‚Çá : |(b n : ‚Ñù) ^ n * ((-1 : ‚Ñù) : ‚Ñù) ^ n / (n : ‚Ñù)| = |(b n : ‚Ñù) ^ n| * |((-1 : ‚Ñù) : ‚Ñù) ^ n| / |(n : ‚Ñù)| := by
            simp [abs_mul, abs_div, abs_of_nonneg, abs_of_nonpos, h‚ÇÖ.le]
            <;> ring_nf
            <;> field_simp [abs_mul, abs_div, abs_of_nonneg, abs_of_nonpos, h‚ÇÖ.le]
            <;> ring_nf
          rw [h‚Çá]
          have h‚Çà : |(b n : ‚Ñù) ^ n| = (b n : ‚Ñù) ^ n := by
            exact abs_of_nonneg (by positivity)
          have h‚Çâ : |((-1 : ‚Ñù) : ‚Ñù) ^ n| = 1 := by
            have h‚ÇÅ‚ÇÄ : ((-1 : ‚Ñù) : ‚Ñù) ^ n = 1 ‚à® ((-1 : ‚Ñù) : ‚Ñù) ^ n = -1 := by
              cases' Nat.even_or_odd n with h‚ÇÅ‚ÇÄ h‚ÇÅ‚ÇÄ
              ¬∑ -- Case: n is even
                rw [show ((-1 : ‚Ñù) : ‚Ñù) ^ n = 1 by
                  have h‚ÇÅ‚ÇÅ : Even n := h‚ÇÅ‚ÇÄ
                  rw [even_iff_two_dvd] at h‚ÇÅ‚ÇÅ
                  obtain ‚ü®k, rfl‚ü© := h‚ÇÅ‚ÇÅ
                  simp [pow_mul, pow_two, mul_one, mul_neg, neg_mul, neg_neg]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                ]
                <;> simp
              ¬∑ -- Case: n is odd
                rw [show ((-1 : ‚Ñù) : ‚Ñù) ^ n = -1 by
                  have h‚ÇÅ‚ÇÅ : Odd n := h‚ÇÅ‚ÇÄ
                  rw [Odd] at h‚ÇÅ‚ÇÅ
                  obtain ‚ü®k, rfl‚ü© := h‚ÇÅ‚ÇÅ
                  simp [pow_add, pow_mul, pow_one, mul_neg, mul_one, neg_mul, neg_neg]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                  <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
                    pow_mul, pow_two, pow_three]
                  <;> ring_nf
                  <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
                  <;> ring_nf
                ]
                <;> simp
            cases' h‚ÇÅ‚ÇÄ with h‚ÇÅ‚ÇÄ h‚ÇÅ‚ÇÄ <;> simp [h‚ÇÅ‚ÇÄ, abs_of_pos, abs_of_nonneg, h‚ÇÖ.le]
            <;> norm_num
          have h‚ÇÅ‚ÇÄ : |(n : ‚Ñù)| = (n : ‚Ñù) := by
            exact abs_of_nonneg (by
              cases n with
              | zero => norm_num
              | succ n =>
                positivity
              )
          rw [h‚Çà, h‚Çâ, h‚ÇÅ‚ÇÄ]
          <;> field_simp [h‚ÇÖ.ne']
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
          <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
            pow_mul, pow_two, pow_three]
          <;> ring_nf
          <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
          <;> ring_nf
        rw [h‚ÇÜ]
        <;> field_simp [h‚ÇÖ.ne']
        <;> ring_nf
        <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
          pow_mul, pow_two, pow_three]
        <;> ring_nf
        <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
        <;> ring_nf
        <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
          pow_mul, pow_two, pow_three]
        <;> ring_nf
        <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
        <;> ring_nf
        <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
          pow_mul, pow_two, pow_three]
        <;> ring_nf
        <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
        <;> ring_nf
        <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
          pow_mul, pow_two, pow_three]
        <;> ring_nf
        <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
        <;> ring_nf
      rw [h‚ÇÇ]
      <;> simp [h_pos]
      <;> field_simp [h_pos]
      <;> ring_nf
      <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
        pow_mul, pow_two, pow_three]
      <;> ring_nf
      <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
      <;> ring_nf
      <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
        pow_mul, pow_two, pow_three]
      <;> ring_nf
      <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
      <;> ring_nf
      <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
        pow_mul, pow_two, pow_three]
      <;> ring_nf
      <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
      <;> ring_nf
      <;> simp [Complex.ext_iff, Complex.cos, Complex.sin, Complex.exp_re, Complex.exp_im, pow_add,
        pow_mul, pow_two, pow_three]
      <;> ring_nf
      <;> field_simp [Real.cos_add, Real.sin_add, Real.cos_pi_div_two, Real.sin_pi_div_two]
      <;> ring_nf
    rw [h‚ÇÅ]
    exact h_main
  
  exact h_final